
NLS-IRM_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  0800aedc  0800aedc  0001aedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b92c  0800b92c  000204f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b92c  0800b92c  000204f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b92c  0800b92c  000204f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b92c  0800b92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  0800b934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200004f8  0800be2c  000204f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800be2c  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037efc  00000000  00000000  00020521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007633  00000000  00000000  0005841d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020b83  00000000  00000000  0005fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  000805d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002048  00000000  00000000  00081e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002196c  00000000  00000000  00083ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000331bf  00000000  00000000  000a5814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f5f8  00000000  00000000  000d89d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00177fcb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000507c  00000000  00000000  0017801c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004f8 	.word	0x200004f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aec4 	.word	0x0800aec4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004fc 	.word	0x200004fc
 800014c:	0800aec4 	.word	0x0800aec4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <OD_read_1014_default>:
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000f90:	4684      	mov	ip, r0
 8000f92:	b1c0      	cbz	r0, 8000fc6 <OD_read_1014_default+0x36>
 8000f94:	7c40      	ldrb	r0, [r0, #17]
 8000f96:	b9c0      	cbnz	r0, 8000fca <OD_read_1014_default+0x3a>
 8000f98:	b1c9      	cbz	r1, 8000fce <OD_read_1014_default+0x3e>
        || count < sizeof(uint32_t) || countRead == NULL
 8000f9a:	2a03      	cmp	r2, #3
 8000f9c:	d919      	bls.n	8000fd2 <OD_read_1014_default+0x42>
 8000f9e:	b1d3      	cbz	r3, 8000fd6 <OD_read_1014_default+0x46>
    ) {
        return ODR_DEV_INCOMPAT;
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000fa0:	f8dc 0004 	ldr.w	r0, [ip, #4]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 8000fa4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000fa6:	b15a      	cbz	r2, 8000fc0 <OD_read_1014_default+0x30>
 8000fa8:	f04f 0c00 	mov.w	ip, #0
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8000fac:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8000fb0:	3280      	adds	r2, #128	; 0x80
 8000fb2:	ea42 020c 	orr.w	r2, r2, ip
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000fb6:	600a      	str	r2, [r1, #0]
    CO_setUint32(buf, COB_IDEmergency32);

    *countRead = sizeof(uint32_t);
 8000fb8:	2204      	movs	r2, #4
 8000fba:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	4770      	bx	lr
    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 8000fc0:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000fc4:	e7f2      	b.n	8000fac <OD_read_1014_default+0x1c>
        return ODR_DEV_INCOMPAT;
 8000fc6:	2009      	movs	r0, #9
 8000fc8:	4770      	bx	lr
 8000fca:	2009      	movs	r0, #9
 8000fcc:	4770      	bx	lr
 8000fce:	2009      	movs	r0, #9
 8000fd0:	4770      	bx	lr
 8000fd2:	2009      	movs	r0, #9
 8000fd4:	4770      	bx	lr
 8000fd6:	2009      	movs	r0, #9
}
 8000fd8:	4770      	bx	lr

08000fda <OD_read_1003>:
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
    if (stream == NULL || buf == NULL || countRead == NULL
 8000fda:	b380      	cbz	r0, 800103e <OD_read_1003+0x64>
 8000fdc:	4684      	mov	ip, r0
 8000fde:	b381      	cbz	r1, 8001042 <OD_read_1003+0x68>
 8000fe0:	b38b      	cbz	r3, 8001046 <OD_read_1003+0x6c>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8000fe2:	2a03      	cmp	r2, #3
 8000fe4:	d801      	bhi.n	8000fea <OD_read_1003+0x10>
 8000fe6:	7c40      	ldrb	r0, [r0, #17]
 8000fe8:	bb78      	cbnz	r0, 800104a <OD_read_1003+0x70>
 8000fea:	b382      	cbz	r2, 800104e <OD_read_1003+0x74>
{
 8000fec:	b510      	push	{r4, lr}
    ) {
        return ODR_DEV_INCOMPAT;
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000fee:	f8dc 0004 	ldr.w	r0, [ip, #4]

    if (em->fifoSize < 2) {
 8000ff2:	f890 e01c 	ldrb.w	lr, [r0, #28]
 8000ff6:	f1be 0f01 	cmp.w	lr, #1
 8000ffa:	d92a      	bls.n	8001052 <OD_read_1003+0x78>
        return ODR_DEV_INCOMPAT;
    }
    if (stream->subIndex == 0) {
 8000ffc:	f89c 4011 	ldrb.w	r4, [ip, #17]
 8001000:	b194      	cbz	r4, 8001028 <OD_read_1003+0x4e>
        CO_setUint8(buf, em->fifoCount);

        *countRead = sizeof(uint8_t);
        return ODR_OK;
    }
    else if (stream->subIndex <= em->fifoCount) {
 8001002:	f890 2020 	ldrb.w	r2, [r0, #32]
 8001006:	4294      	cmp	r4, r2
 8001008:	d825      	bhi.n	8001056 <OD_read_1003+0x7c>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 800100a:	7f42      	ldrb	r2, [r0, #29]
 800100c:	1b12      	subs	r2, r2, r4
 800100e:	b294      	uxth	r4, r2
        if (index < 0) {
 8001010:	2a00      	cmp	r2, #0
 8001012:	db10      	blt.n	8001036 <OD_read_1003+0x5c>
            index += em->fifoSize;
        }
        else if (index >= (em->fifoSize)) {
 8001014:	4572      	cmp	r2, lr
 8001016:	da20      	bge.n	800105a <OD_read_1003+0x80>
            return ODR_DEV_INCOMPAT;
        }
        CO_setUint32(buf, em->fifo[index].msg);
 8001018:	6980      	ldr	r0, [r0, #24]
 800101a:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
 800101e:	600a      	str	r2, [r1, #0]

        *countRead = sizeof(uint32_t);
 8001020:	2204      	movs	r2, #4
 8001022:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8001024:	2000      	movs	r0, #0
    }
    else {
        return ODR_NO_DATA;
    }
}
 8001026:	bd10      	pop	{r4, pc}
        CO_setUint8(buf, em->fifoCount);
 8001028:	f890 2020 	ldrb.w	r2, [r0, #32]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 800102c:	700a      	strb	r2, [r1, #0]
        *countRead = sizeof(uint8_t);
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8001032:	2000      	movs	r0, #0
 8001034:	e7f7      	b.n	8001026 <OD_read_1003+0x4c>
            index += em->fifoSize;
 8001036:	eb0e 0204 	add.w	r2, lr, r4
 800103a:	b212      	sxth	r2, r2
 800103c:	e7ec      	b.n	8001018 <OD_read_1003+0x3e>
        return ODR_DEV_INCOMPAT;
 800103e:	2009      	movs	r0, #9
 8001040:	4770      	bx	lr
 8001042:	2009      	movs	r0, #9
 8001044:	4770      	bx	lr
 8001046:	2009      	movs	r0, #9
 8001048:	4770      	bx	lr
 800104a:	2009      	movs	r0, #9
 800104c:	4770      	bx	lr
 800104e:	2009      	movs	r0, #9
}
 8001050:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 8001052:	2009      	movs	r0, #9
 8001054:	e7e7      	b.n	8001026 <OD_read_1003+0x4c>
        return ODR_NO_DATA;
 8001056:	2019      	movs	r0, #25
 8001058:	e7e5      	b.n	8001026 <OD_read_1003+0x4c>
            return ODR_DEV_INCOMPAT;
 800105a:	2009      	movs	r0, #9
 800105c:	e7e3      	b.n	8001026 <OD_read_1003+0x4c>

0800105e <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 800105e:	4684      	mov	ip, r0
 8001060:	b170      	cbz	r0, 8001080 <OD_write_1003+0x22>
 8001062:	7c40      	ldrb	r0, [r0, #17]
 8001064:	b970      	cbnz	r0, 8001084 <OD_write_1003+0x26>
 8001066:	b179      	cbz	r1, 8001088 <OD_write_1003+0x2a>
 8001068:	2a01      	cmp	r2, #1
 800106a:	d10f      	bne.n	800108c <OD_write_1003+0x2e>
        || countWritten == NULL)
 800106c:	b183      	cbz	r3, 8001090 <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
    }

    if (CO_getUint8(buf) != 0) {
 800106e:	780a      	ldrb	r2, [r1, #0]
 8001070:	b982      	cbnz	r2, 8001094 <OD_write_1003+0x36>
        return ODR_INVALID_VALUE;
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8001072:	f8dc 2004 	ldr.w	r2, [ip, #4]

    /* clear error history */
    em->fifoCount = 0;
 8001076:	f882 0020 	strb.w	r0, [r2, #32]

    *countWritten = sizeof(uint8_t);
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800107e:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 8001080:	2009      	movs	r0, #9
 8001082:	4770      	bx	lr
 8001084:	2009      	movs	r0, #9
 8001086:	4770      	bx	lr
 8001088:	2009      	movs	r0, #9
 800108a:	4770      	bx	lr
 800108c:	2009      	movs	r0, #9
 800108e:	4770      	bx	lr
 8001090:	2009      	movs	r0, #9
 8001092:	4770      	bx	lr
        return ODR_INVALID_VALUE;
 8001094:	200f      	movs	r0, #15
}
 8001096:	4770      	bx	lr

08001098 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109c:	b085      	sub	sp, #20
 800109e:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80010a2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80010a6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80010aa:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d074      	beq.n	800119c <CO_EM_init+0x104>
 80010b2:	460d      	mov	r5, r1
 80010b4:	4616      	mov	r6, r2
 80010b6:	461f      	mov	r7, r3
 80010b8:	4604      	mov	r4, r0
 80010ba:	2a00      	cmp	r2, #0
 80010bc:	d071      	beq.n	80011a2 <CO_EM_init+0x10a>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d05e      	beq.n	8001180 <CO_EM_init+0xe8>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 80010c2:	f1b9 0f00 	cmp.w	r9, #0
 80010c6:	d06f      	beq.n	80011a8 <CO_EM_init+0x110>
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	d070      	beq.n	80011ae <CO_EM_init+0x116>
        || nodeId < 1 || nodeId > 127
 80010cc:	f1b8 0f00 	cmp.w	r8, #0
 80010d0:	d070      	beq.n	80011b4 <CO_EM_init+0x11c>
 80010d2:	f018 0f80 	tst.w	r8, #128	; 0x80
 80010d6:	d170      	bne.n	80011ba <CO_EM_init+0x122>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 80010d8:	f1ba 0f00 	cmp.w	sl, #0
 80010dc:	d070      	beq.n	80011c0 <CO_EM_init+0x128>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 80010de:	2250      	movs	r2, #80	; 0x50
 80010e0:	2100      	movs	r1, #0
 80010e2:	4620      	mov	r0, r4
 80010e4:	f009 f87e 	bl	800a1e4 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 80010e8:	6165      	str	r5, [r4, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80010ea:	2300      	movs	r3, #0
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	4630      	mov	r0, r6
 80010f2:	f000 fdf0 	bl	8001cd6 <OD_getPtr>
 80010f6:	60e0      	str	r0, [r4, #12]
    if (em->errorRegister == NULL) {
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d047      	beq.n	800118c <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
        return CO_ERROR_OD_PARAMETERS;
    }
    *em->errorRegister = 0;
 80010fc:	2100      	movs	r1, #0
 80010fe:	7001      	strb	r1, [r0, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 8001100:	61a7      	str	r7, [r4, #24]
    em->fifoSize = fifoSize;
 8001102:	f884 b01c 	strb.w	fp, [r4, #28]

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001106:	2301      	movs	r3, #1
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2304      	movs	r3, #4
 800110c:	aa03      	add	r2, sp, #12
 800110e:	4648      	mov	r0, r9
 8001110:	f000 fdae 	bl	8001c70 <OD_get_value>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 8001114:	4602      	mov	r2, r0
 8001116:	b918      	cbnz	r0, 8001120 <CO_EM_init+0x88>
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <CO_EM_init+0x13c>)
 800111a:	9903      	ldr	r1, [sp, #12]
 800111c:	400b      	ands	r3, r1
 800111e:	b13b      	cbz	r3, 8001130 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001122:	b11b      	cbz	r3, 800112c <CO_EM_init+0x94>
    return (entry != NULL) ? entry->index : 0;
 8001124:	f8b9 3000 	ldrh.w	r3, [r9]
 8001128:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800112a:	600b      	str	r3, [r1, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 800112c:	2a00      	cmp	r2, #0
 800112e:	d14a      	bne.n	80011c6 <CO_EM_init+0x12e>
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 8001130:	9b03      	ldr	r3, [sp, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	0fdb      	lsrs	r3, r3, #31
 8001136:	6263      	str	r3, [r4, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8001138:	6324      	str	r4, [r4, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <CO_EM_init+0x140>)
 800113c:	6363      	str	r3, [r4, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <CO_EM_init+0x144>)
 8001140:	63a3      	str	r3, [r4, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8001142:	f104 0330 	add.w	r3, r4, #48	; 0x30
    entry->extension = extension;
 8001146:	f8c9 3008 	str.w	r3, [r9, #8]
        return CO_ERROR_OD_PARAMETERS;
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800114a:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 800114e:	2300      	movs	r3, #0
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	2208      	movs	r2, #8
 8001154:	9200      	str	r2, [sp, #0]
 8001156:	f108 0280 	add.w	r2, r8, #128	; 0x80
 800115a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800115e:	4628      	mov	r0, r5
 8001160:	f004 fc4e 	bl	8005a00 <CO_CANtxBufferInit>
 8001164:	62e0      	str	r0, [r4, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 8001166:	b388      	cbz	r0, 80011cc <CO_EM_init+0x134>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8001168:	6424      	str	r4, [r4, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <CO_EM_init+0x148>)
 800116c:	6463      	str	r3, [r4, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <CO_EM_init+0x14c>)
 8001170:	64a3      	str	r3, [r4, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8001172:	3440      	adds	r4, #64	; 0x40
 8001174:	f8ca 4008 	str.w	r4, [sl, #8]
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8001178:	2000      	movs	r0, #0
}
 800117a:	b005      	add	sp, #20
 800117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        || (fifo == NULL && fifoSize >= 2)
 8001180:	f1bb 0f01 	cmp.w	fp, #1
 8001184:	d99d      	bls.n	80010c2 <CO_EM_init+0x2a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	e7f6      	b.n	800117a <CO_EM_init+0xe2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 800118c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800118e:	b113      	cbz	r3, 8001196 <CO_EM_init+0xfe>
    return (entry != NULL) ? entry->index : 0;
 8001190:	8833      	ldrh	r3, [r6, #0]
 8001192:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001194:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001196:	f06f 000b 	mvn.w	r0, #11
 800119a:	e7ee      	b.n	800117a <CO_EM_init+0xe2>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	e7eb      	b.n	800117a <CO_EM_init+0xe2>
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	e7e8      	b.n	800117a <CO_EM_init+0xe2>
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	e7e5      	b.n	800117a <CO_EM_init+0xe2>
 80011ae:	f04f 30ff 	mov.w	r0, #4294967295
 80011b2:	e7e2      	b.n	800117a <CO_EM_init+0xe2>
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	e7df      	b.n	800117a <CO_EM_init+0xe2>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	e7dc      	b.n	800117a <CO_EM_init+0xe2>
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	e7d9      	b.n	800117a <CO_EM_init+0xe2>
            return CO_ERROR_OD_PARAMETERS;
 80011c6:	f06f 000b 	mvn.w	r0, #11
 80011ca:	e7d6      	b.n	800117a <CO_EM_init+0xe2>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	e7d3      	b.n	800117a <CO_EM_init+0xe2>
 80011d2:	bf00      	nop
 80011d4:	7ffff800 	.word	0x7ffff800
 80011d8:	08000f91 	.word	0x08000f91
 80011dc:	08001a87 	.word	0x08001a87
 80011e0:	08000fdb 	.word	0x08000fdb
 80011e4:	0800105f 	.word	0x0800105f

080011e8 <CO_error>:

/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
    if (em == NULL) return;
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d05d      	beq.n	80012a8 <CO_error+0xc0>
{
 80011ec:	b530      	push	{r4, r5, lr}
 80011ee:	4684      	mov	ip, r0

    uint8_t index = errorBit >> 3;
 80011f0:	08d4      	lsrs	r4, r2, #3
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80011f2:	f002 0507 	and.w	r5, r2, #7
 80011f6:	2001      	movs	r0, #1
 80011f8:	40a8      	lsls	r0, r5
 80011fa:	b2c0      	uxtb	r0, r0

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 80011fc:	2a4f      	cmp	r2, #79	; 0x4f
 80011fe:	d904      	bls.n	800120a <CO_error+0x22>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
        infoCode = errorBit;
 8001200:	9203      	str	r2, [sp, #12]
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8001202:	2001      	movs	r0, #1
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8001204:	2405      	movs	r4, #5
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8001206:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 800120a:	4625      	mov	r5, r4
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 800120c:	f81c e004 	ldrb.w	lr, [ip, r4]
 8001210:	ea0e 0400 	and.w	r4, lr, r0

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8001214:	b3a9      	cbz	r1, 8001282 <CO_error+0x9a>
        if (errorStatusBitMasked != 0) {
 8001216:	2c00      	cmp	r4, #0
 8001218:	d145      	bne.n	80012a6 <CO_error+0xbe>
        errorCode = CO_EMC_NO_ERROR;
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 800121a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 800121e:	f8dc 3014 	ldr.w	r3, [ip, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001222:	f3ef 8410 	mrs	r4, PRIMASK
 8001226:	631c      	str	r4, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
    if (setError) *errorStatusBits |= bitmask;
 800122a:	b369      	cbz	r1, 8001288 <CO_error+0xa0>
 800122c:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8001230:	4318      	orrs	r0, r3
 8001232:	f80c 0005 	strb.w	r0, [ip, r5]
    else          *errorStatusBits &= ~bitmask;

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8001236:	f89c 101c 	ldrb.w	r1, [ip, #28]
 800123a:	2901      	cmp	r1, #1
 800123c:	d92e      	bls.n	800129c <CO_error+0xb4>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 800123e:	f89c 001d 	ldrb.w	r0, [ip, #29]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8001242:	1c43      	adds	r3, r0, #1
 8001244:	b2db      	uxtb	r3, r3
        if (fifoWrPtrNext >= em->fifoSize) {
 8001246:	4299      	cmp	r1, r3
 8001248:	d800      	bhi.n	800124c <CO_error+0x64>
            fifoWrPtrNext = 0;
 800124a:	2300      	movs	r3, #0
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 800124c:	f89c 101e 	ldrb.w	r1, [ip, #30]
 8001250:	4299      	cmp	r1, r3
 8001252:	d020      	beq.n	8001296 <CO_error+0xae>
            em->fifoOverflow = 1;
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8001254:	f8dc 1018 	ldr.w	r1, [ip, #24]
 8001258:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 800125c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001260:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8001264:	9903      	ldr	r1, [sp, #12]
 8001266:	6051      	str	r1, [r2, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8001268:	f88c 301d 	strb.w	r3, [ip, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 800126c:	f89c 2020 	ldrb.w	r2, [ip, #32]
 8001270:	f89c 301c 	ldrb.w	r3, [ip, #28]
 8001274:	3b01      	subs	r3, #1
 8001276:	429a      	cmp	r2, r3
 8001278:	da10      	bge.n	800129c <CO_error+0xb4>
 800127a:	3201      	adds	r2, #1
 800127c:	f88c 2020 	strb.w	r2, [ip, #32]
 8001280:	e00c      	b.n	800129c <CO_error+0xb4>
        if (errorStatusBitMasked == 0) {
 8001282:	b184      	cbz	r4, 80012a6 <CO_error+0xbe>
        errorCode = CO_EMC_NO_ERROR;
 8001284:	2300      	movs	r3, #0
 8001286:	e7c8      	b.n	800121a <CO_error+0x32>
    else          *errorStatusBits &= ~bitmask;
 8001288:	f81c 3005 	ldrb.w	r3, [ip, r5]
 800128c:	ea23 0000 	bic.w	r0, r3, r0
 8001290:	f80c 0005 	strb.w	r0, [ip, r5]
 8001294:	e7cf      	b.n	8001236 <CO_error+0x4e>
            em->fifoOverflow = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	f88c 301f 	strb.w	r3, [ip, #31]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 800129c:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012a2:	f383 8810 	msr	PRIMASK, r3
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 80012a6:	bd30      	pop	{r4, r5, pc}
 80012a8:	4770      	bx	lr

080012aa <CO_EM_process>:
{
 80012aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ac:	b083      	sub	sp, #12
 80012ae:	4604      	mov	r4, r0
 80012b0:	460f      	mov	r7, r1
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80012b2:	6943      	ldr	r3, [r0, #20]
 80012b4:	8a5e      	ldrh	r6, [r3, #18]
    if (CANerrSt != em->CANerrorStatusOld) {
 80012b6:	8a05      	ldrh	r5, [r0, #16]
 80012b8:	42b5      	cmp	r5, r6
 80012ba:	d017      	beq.n	80012ec <CO_EM_process+0x42>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80012bc:	4075      	eors	r5, r6
        em->CANerrorStatusOld = CANerrSt;
 80012be:	8206      	strh	r6, [r0, #16]
        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 80012c0:	f240 1301 	movw	r3, #257	; 0x101
 80012c4:	421d      	tst	r5, r3
 80012c6:	d12c      	bne.n	8001322 <CO_EM_process+0x78>
        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 80012c8:	f015 0f02 	tst.w	r5, #2
 80012cc:	d135      	bne.n	800133a <CO_EM_process+0x90>
        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 80012ce:	f015 0f04 	tst.w	r5, #4
 80012d2:	d13d      	bne.n	8001350 <CO_EM_process+0xa6>
        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 80012d4:	f015 0f08 	tst.w	r5, #8
 80012d8:	d145      	bne.n	8001366 <CO_EM_process+0xbc>
        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 80012da:	f015 0f80 	tst.w	r5, #128	; 0x80
 80012de:	d14d      	bne.n	800137c <CO_EM_process+0xd2>
        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 80012e0:	f415 7f00 	tst.w	r5, #512	; 0x200
 80012e4:	d155      	bne.n	8001392 <CO_EM_process+0xe8>
        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 80012e6:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80012ea:	d15d      	bne.n	80013a8 <CO_EM_process+0xfe>
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 80012ec:	7963      	ldrb	r3, [r4, #5]
 80012ee:	b103      	cbz	r3, 80012f2 <CO_EM_process+0x48>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 80012f0:	2301      	movs	r3, #1
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 80012f2:	8862      	ldrh	r2, [r4, #2]
 80012f4:	b10a      	cbz	r2, 80012fa <CO_EM_process+0x50>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 80012f6:	f043 0310 	orr.w	r3, r3, #16
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 80012fa:	8922      	ldrh	r2, [r4, #8]
 80012fc:	b10a      	cbz	r2, 8001302 <CO_EM_process+0x58>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    *em->errorRegister = errorRegister;
 8001302:	68e2      	ldr	r2, [r4, #12]
 8001304:	7013      	strb	r3, [r2, #0]
    if (!NMTisPreOrOperational) {
 8001306:	b157      	cbz	r7, 800131e <CO_EM_process+0x74>
    if (em->fifoSize >= 2) {
 8001308:	7f22      	ldrb	r2, [r4, #28]
 800130a:	2a01      	cmp	r2, #1
 800130c:	d907      	bls.n	800131e <CO_EM_process+0x74>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 800130e:	7fa5      	ldrb	r5, [r4, #30]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8001310:	7f62      	ldrb	r2, [r4, #29]
 8001312:	42aa      	cmp	r2, r5
 8001314:	d003      	beq.n	800131e <CO_EM_process+0x74>
 8001316:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001318:	6912      	ldr	r2, [r2, #16]
 800131a:	2a00      	cmp	r2, #0
 800131c:	d04e      	beq.n	80013bc <CO_EM_process+0x112>
}
 800131e:	b003      	add	sp, #12
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
            CO_error(em,
 8001322:	421e      	tst	r6, r3
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	f04f 0201 	mov.w	r2, #1
 800132e:	bf14      	ite	ne
 8001330:	4611      	movne	r1, r2
 8001332:	4619      	moveq	r1, r3
 8001334:	f7ff ff58 	bl	80011e8 <CO_error>
 8001338:	e7c6      	b.n	80012c8 <CO_EM_process+0x1e>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	f248 1320 	movw	r3, #33056	; 0x8120
 8001342:	2207      	movs	r2, #7
 8001344:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff ff4d 	bl	80011e8 <CO_error>
 800134e:	e7be      	b.n	80012ce <CO_EM_process+0x24>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	f248 1340 	movw	r3, #33088	; 0x8140
 8001358:	2212      	movs	r2, #18
 800135a:	f3c6 0180 	ubfx	r1, r6, #2, #1
 800135e:	4620      	mov	r0, r4
 8001360:	f7ff ff42 	bl	80011e8 <CO_error>
 8001364:	e7b6      	b.n	80012d4 <CO_EM_process+0x2a>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8001366:	2300      	movs	r3, #0
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	f248 1310 	movw	r3, #33040	; 0x8110
 800136e:	2214      	movs	r2, #20
 8001370:	f3c6 01c0 	ubfx	r1, r6, #3, #1
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ff37 	bl	80011e8 <CO_error>
 800137a:	e7ae      	b.n	80012da <CO_EM_process+0x30>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 800137c:	2300      	movs	r3, #0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001384:	2215      	movs	r2, #21
 8001386:	f3c6 11c0 	ubfx	r1, r6, #7, #1
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff ff2c 	bl	80011e8 <CO_error>
 8001390:	e7a6      	b.n	80012e0 <CO_EM_process+0x36>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	f248 1320 	movw	r3, #33056	; 0x8120
 800139a:	2206      	movs	r2, #6
 800139c:	f3c6 2140 	ubfx	r1, r6, #9, #1
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff ff21 	bl	80011e8 <CO_error>
 80013a6:	e79e      	b.n	80012e6 <CO_EM_process+0x3c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 80013a8:	2300      	movs	r3, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2313      	movs	r3, #19
 80013ae:	461a      	mov	r2, r3
 80013b0:	f3c6 21c0 	ubfx	r1, r6, #11, #1
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff ff17 	bl	80011e8 <CO_error>
 80013ba:	e797      	b.n	80012ec <CO_EM_process+0x42>
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 80013bc:	69a1      	ldr	r1, [r4, #24]
 80013be:	f851 2035 	ldr.w	r2, [r1, r5, lsl #3]
 80013c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80013c6:	f841 3035 	str.w	r3, [r1, r5, lsl #3]
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 80013ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013cc:	69a2      	ldr	r2, [r4, #24]
 80013ce:	eb02 00c5 	add.w	r0, r2, r5, lsl #3
 80013d2:	f852 1035 	ldr.w	r1, [r2, r5, lsl #3]
 80013d6:	6842      	ldr	r2, [r0, #4]
 80013d8:	f8c3 1005 	str.w	r1, [r3, #5]
 80013dc:	f8c3 2009 	str.w	r2, [r3, #9]
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 80013e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80013e2:	6960      	ldr	r0, [r4, #20]
 80013e4:	f004 fb2e 	bl	8005a44 <CO_CANsend>
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 80013e8:	3501      	adds	r5, #1
 80013ea:	b2ed      	uxtb	r5, r5
 80013ec:	7f23      	ldrb	r3, [r4, #28]
 80013ee:	42ab      	cmp	r3, r5
 80013f0:	d800      	bhi.n	80013f4 <CO_EM_process+0x14a>
 80013f2:	2500      	movs	r5, #0
 80013f4:	77a5      	strb	r5, [r4, #30]
            if (em->fifoOverflow == 1) {
 80013f6:	7fe3      	ldrb	r3, [r4, #31]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d00d      	beq.n	8001418 <CO_EM_process+0x16e>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d18e      	bne.n	800131e <CO_EM_process+0x74>
 8001400:	7f63      	ldrb	r3, [r4, #29]
 8001402:	42ab      	cmp	r3, r5
 8001404:	d18b      	bne.n	800131e <CO_EM_process+0x74>
                em->fifoOverflow = 0;
 8001406:	2100      	movs	r1, #0
 8001408:	77e1      	strb	r1, [r4, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 800140a:	9100      	str	r1, [sp, #0]
 800140c:	460b      	mov	r3, r1
 800140e:	2220      	movs	r2, #32
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff fee9 	bl	80011e8 <CO_error>
 8001416:	e782      	b.n	800131e <CO_EM_process+0x74>
                em->fifoOverflow = 2;
 8001418:	2302      	movs	r3, #2
 800141a:	77e3      	strb	r3, [r4, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	2220      	movs	r2, #32
 8001426:	2101      	movs	r1, #1
 8001428:	4620      	mov	r0, r4
 800142a:	f7ff fedd 	bl	80011e8 <CO_error>
 800142e:	e776      	b.n	800131e <CO_EM_process+0x74>

08001430 <CO_HBcons_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
    CO_HBconsNode_t *HBconsNode = object;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001430:	790b      	ldrb	r3, [r1, #4]
    uint8_t *data = CO_CANrxMsg_readData(msg);

    if (DLC == 1) {
 8001432:	2b01      	cmp	r3, #1
 8001434:	d000      	beq.n	8001438 <CO_HBcons_receive+0x8>
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8001436:	4770      	bx	lr
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8001438:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800143c:	7043      	strb	r3, [r0, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 800143e:	2301      	movs	r3, #1
 8001440:	60c3      	str	r3, [r0, #12]
}
 8001442:	e7f8      	b.n	8001436 <CO_HBcons_receive+0x6>

08001444 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8001444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001448:	b089      	sub	sp, #36	; 0x24
    CO_ReturnError_t ret = CO_ERROR_NO;

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 800144a:	2800      	cmp	r0, #0
 800144c:	d059      	beq.n	8001502 <CO_HBconsumer_initEntry+0xbe>
 800144e:	460c      	mov	r4, r1
 8001450:	4616      	mov	r6, r2
 8001452:	461f      	mov	r7, r3
 8001454:	4605      	mov	r5, r0
 8001456:	f890 9008 	ldrb.w	r9, [r0, #8]
 800145a:	4589      	cmp	r9, r1
 800145c:	d954      	bls.n	8001508 <CO_HBconsumer_initEntry+0xc4>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 800145e:	b103      	cbz	r3, 8001462 <CO_HBconsumer_initEntry+0x1e>
 8001460:	bb82      	cbnz	r2, 80014c4 <CO_HBconsumer_initEntry+0x80>

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001462:	686b      	ldr	r3, [r5, #4]
 8001464:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 8001468:	eb03 1004 	add.w	r0, r3, r4, lsl #4
        monitoredNode->nodeId = nodeId;
 800146c:	f803 600c 	strb.w	r6, [r3, ip]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001474:	fb07 f303 	mul.w	r3, r7, r3
 8001478:	6083      	str	r3, [r0, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	7042      	strb	r2, [r0, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800147e:	2200      	movs	r2, #0
 8001480:	60c2      	str	r2, [r0, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001482:	b33e      	cbz	r6, 80014d4 <CO_HBconsumer_initEntry+0x90>
 8001484:	b333      	cbz	r3, 80014d4 <CO_HBconsumer_initEntry+0x90>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001486:	f506 62e0 	add.w	r2, r6, #1792	; 0x700
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800148a:	2301      	movs	r3, #1
 800148c:	7083      	strb	r3, [r0, #2]
 800148e:	e024      	b.n	80014da <CO_HBconsumer_initEntry+0x96>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001490:	f10c 0c01 	add.w	ip, ip, #1
 8001494:	fa5f fc8c 	uxtb.w	ip, ip
 8001498:	45e1      	cmp	r9, ip
 800149a:	d917      	bls.n	80014cc <CO_HBconsumer_initEntry+0x88>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 800149c:	686b      	ldr	r3, [r5, #4]
 800149e:	eb03 1e0c 	add.w	lr, r3, ip, lsl #4
 80014a2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80014a6:	f10d 0e20 	add.w	lr, sp, #32
 80014aa:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 80014ae:	45a4      	cmp	ip, r4
 80014b0:	d0ee      	beq.n	8001490 <CO_HBconsumer_initEntry+0x4c>
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d0ec      	beq.n	8001490 <CO_HBconsumer_initEntry+0x4c>
 80014b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80014ba:	42b3      	cmp	r3, r6
 80014bc:	d1e8      	bne.n	8001490 <CO_HBconsumer_initEntry+0x4c>
                ret = CO_ERROR_OD_PARAMETERS;
 80014be:	f06f 080b 	mvn.w	r8, #11
 80014c2:	e7e5      	b.n	8001490 <CO_HBconsumer_initEntry+0x4c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80014c4:	f04f 0c00 	mov.w	ip, #0
    CO_ReturnError_t ret = CO_ERROR_NO;
 80014c8:	46e0      	mov	r8, ip
 80014ca:	e7e5      	b.n	8001498 <CO_HBconsumer_initEntry+0x54>
    if (ret == CO_ERROR_NO) {
 80014cc:	f1b8 0f00 	cmp.w	r8, #0
 80014d0:	d113      	bne.n	80014fa <CO_HBconsumer_initEntry+0xb6>
 80014d2:	e7c6      	b.n	8001462 <CO_HBconsumer_initEntry+0x1e>
        }
        else {
            COB_ID = 0;
            monitoredNode->time_us = 0;
 80014d4:	2200      	movs	r2, #0
 80014d6:	6082      	str	r2, [r0, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 80014d8:	7082      	strb	r2, [r0, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
                                 HBcons->CANdevRxIdxStart + idx,
 80014da:	8ba9      	ldrh	r1, [r5, #28]
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 80014dc:	686b      	ldr	r3, [r5, #4]
 80014de:	4463      	add	r3, ip
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80014e0:	4421      	add	r1, r4
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <CO_HBconsumer_initEntry+0xcc>)
 80014e4:	9002      	str	r0, [sp, #8]
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	2300      	movs	r3, #0
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014f0:	b289      	uxth	r1, r1
 80014f2:	69a8      	ldr	r0, [r5, #24]
 80014f4:	f004 fa4a 	bl	800598c <CO_CANrxBufferInit>
 80014f8:	4680      	mov	r8, r0
                                 CO_HBcons_receive);
    }
    return ret;
}
 80014fa:	4640      	mov	r0, r8
 80014fc:	b009      	add	sp, #36	; 0x24
 80014fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001502:	f04f 38ff 	mov.w	r8, #4294967295
 8001506:	e7f8      	b.n	80014fa <CO_HBconsumer_initEntry+0xb6>
 8001508:	f04f 38ff 	mov.w	r8, #4294967295
 800150c:	e7f5      	b.n	80014fa <CO_HBconsumer_initEntry+0xb6>
 800150e:	bf00      	nop
 8001510:	08001431 	.word	0x08001431

08001514 <OD_write_1016>:
{
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	4604      	mov	r4, r0
    CO_HBconsumer_t *HBcons = stream->object;
 8001518:	6840      	ldr	r0, [r0, #4]
    if (stream == NULL || buf == NULL
 800151a:	b1dc      	cbz	r4, 8001554 <OD_write_1016+0x40>
 800151c:	460d      	mov	r5, r1
 800151e:	4617      	mov	r7, r2
 8001520:	461e      	mov	r6, r3
 8001522:	b1c9      	cbz	r1, 8001558 <OD_write_1016+0x44>
        || stream->subIndex < 1
 8001524:	7c61      	ldrb	r1, [r4, #17]
 8001526:	b1c9      	cbz	r1, 800155c <OD_write_1016+0x48>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8001528:	7a03      	ldrb	r3, [r0, #8]
 800152a:	4299      	cmp	r1, r3
 800152c:	d818      	bhi.n	8001560 <OD_write_1016+0x4c>
        || count != sizeof(uint32_t) || countWritten == NULL
 800152e:	2a04      	cmp	r2, #4
 8001530:	d118      	bne.n	8001564 <OD_write_1016+0x50>
 8001532:	b1ce      	cbz	r6, 8001568 <OD_write_1016+0x54>
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001534:	682a      	ldr	r2, [r5, #0]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8001536:	3901      	subs	r1, #1
 8001538:	b293      	uxth	r3, r2
 800153a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	f7ff ff80 	bl	8001444 <CO_HBconsumer_initEntry>
    if (ret != CO_ERROR_NO) {
 8001544:	b990      	cbnz	r0, 800156c <OD_write_1016+0x58>
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001546:	4633      	mov	r3, r6
 8001548:	463a      	mov	r2, r7
 800154a:	4629      	mov	r1, r5
 800154c:	4620      	mov	r0, r4
 800154e:	f000 fa9a 	bl	8001a86 <OD_writeOriginal>
 8001552:	e004      	b.n	800155e <OD_write_1016+0x4a>
        return ODR_DEV_INCOMPAT;
 8001554:	2009      	movs	r0, #9
 8001556:	e002      	b.n	800155e <OD_write_1016+0x4a>
 8001558:	2009      	movs	r0, #9
 800155a:	e000      	b.n	800155e <OD_write_1016+0x4a>
 800155c:	2009      	movs	r0, #9
}
 800155e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ODR_DEV_INCOMPAT;
 8001560:	2009      	movs	r0, #9
 8001562:	e7fc      	b.n	800155e <OD_write_1016+0x4a>
 8001564:	2009      	movs	r0, #9
 8001566:	e7fa      	b.n	800155e <OD_write_1016+0x4a>
 8001568:	2009      	movs	r0, #9
 800156a:	e7f8      	b.n	800155e <OD_write_1016+0x4a>
        return ODR_PAR_INCOMPAT;
 800156c:	2008      	movs	r0, #8
 800156e:	e7f6      	b.n	800155e <OD_write_1016+0x4a>

08001570 <CO_HBconsumer_init>:
{
 8001570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001578:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800157c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8001580:	2800      	cmp	r0, #0
 8001582:	d05a      	beq.n	800163a <CO_HBconsumer_init+0xca>
 8001584:	4689      	mov	r9, r1
 8001586:	4615      	mov	r5, r2
 8001588:	461c      	mov	r4, r3
 800158a:	4606      	mov	r6, r0
 800158c:	2900      	cmp	r1, #0
 800158e:	d057      	beq.n	8001640 <CO_HBconsumer_init+0xd0>
 8001590:	2a00      	cmp	r2, #0
 8001592:	d058      	beq.n	8001646 <CO_HBconsumer_init+0xd6>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8001594:	2f00      	cmp	r7, #0
 8001596:	d059      	beq.n	800164c <CO_HBconsumer_init+0xdc>
 8001598:	f1ba 0f00 	cmp.w	sl, #0
 800159c:	d059      	beq.n	8001652 <CO_HBconsumer_init+0xe2>
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 800159e:	2230      	movs	r2, #48	; 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	f008 fe1f 	bl	800a1e4 <memset>
    HBcons->em = em;
 80015a6:	f8c6 9000 	str.w	r9, [r6]
    HBcons->monitoredNodes = monitoredNodes;
 80015aa:	6075      	str	r5, [r6, #4]
    HBcons->CANdevRx = CANdevRx;
 80015ac:	f8c6 a018 	str.w	sl, [r6, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 80015b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80015b4:	83b3      	strh	r3, [r6, #28]
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 80015b6:	78bb      	ldrb	r3, [r7, #2]
    HBcons->numberOfMonitoredNodes =
 80015b8:	42a3      	cmp	r3, r4
 80015ba:	d801      	bhi.n	80015c0 <CO_HBconsumer_init+0x50>
 80015bc:	3b01      	subs	r3, #1
 80015be:	b2dc      	uxtb	r4, r3
 80015c0:	7234      	strb	r4, [r6, #8]
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80015c2:	2500      	movs	r5, #0
 80015c4:	e00c      	b.n	80015e0 <CO_HBconsumer_init+0x70>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 80015c6:	f1b8 0f00 	cmp.w	r8, #0
 80015ca:	d002      	beq.n	80015d2 <CO_HBconsumer_init+0x62>
 80015cc:	883b      	ldrh	r3, [r7, #0]
 80015ce:	f8c8 3000 	str.w	r3, [r8]
            return CO_ERROR_OD_PARAMETERS;
 80015d2:	f06f 030b 	mvn.w	r3, #11
 80015d6:	e02c      	b.n	8001632 <CO_HBconsumer_init+0xc2>
            if (ret != CO_ERROR_OD_PARAMETERS)
 80015d8:	f113 0f0c 	cmn.w	r3, #12
 80015dc:	d129      	bne.n	8001632 <CO_HBconsumer_init+0xc2>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80015de:	4625      	mov	r5, r4
 80015e0:	7a33      	ldrb	r3, [r6, #8]
 80015e2:	42ab      	cmp	r3, r5
 80015e4:	d91d      	bls.n	8001622 <CO_HBconsumer_init+0xb2>
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 80015e6:	1c6c      	adds	r4, r5, #1
 80015e8:	b2e4      	uxtb	r4, r4
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80015ea:	2301      	movs	r3, #1
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2304      	movs	r3, #4
 80015f0:	aa03      	add	r2, sp, #12
 80015f2:	4621      	mov	r1, r4
 80015f4:	4638      	mov	r0, r7
 80015f6:	f000 fb3b 	bl	8001c70 <OD_get_value>
        if (odRet != ODR_OK) {
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d1e3      	bne.n	80015c6 <CO_HBconsumer_init+0x56>
        uint8_t nodeId = (val >> 16) & 0xFF;
 80015fe:	9a03      	ldr	r2, [sp, #12]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8001600:	b293      	uxth	r3, r2
 8001602:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001606:	4629      	mov	r1, r5
 8001608:	4630      	mov	r0, r6
 800160a:	f7ff ff1b 	bl	8001444 <CO_HBconsumer_initEntry>
        if (ret != CO_ERROR_NO) {
 800160e:	4603      	mov	r3, r0
 8001610:	2800      	cmp	r0, #0
 8001612:	d0e4      	beq.n	80015de <CO_HBconsumer_init+0x6e>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001614:	f1b8 0f00 	cmp.w	r8, #0
 8001618:	d0de      	beq.n	80015d8 <CO_HBconsumer_init+0x68>
    return (entry != NULL) ? entry->index : 0;
 800161a:	883a      	ldrh	r2, [r7, #0]
 800161c:	f8c8 2000 	str.w	r2, [r8]
 8001620:	e7da      	b.n	80015d8 <CO_HBconsumer_init+0x68>
    HBcons->OD_1016_extension.object = HBcons;
 8001622:	6236      	str	r6, [r6, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <CO_HBconsumer_init+0xe8>)
 8001626:	6273      	str	r3, [r6, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <CO_HBconsumer_init+0xec>)
 800162a:	62b3      	str	r3, [r6, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 800162c:	3620      	adds	r6, #32
    entry->extension = extension;
 800162e:	60be      	str	r6, [r7, #8]
    return CO_ERROR_NO;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	b004      	add	sp, #16
 8001636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e7f8      	b.n	8001632 <CO_HBconsumer_init+0xc2>
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	e7f5      	b.n	8001632 <CO_HBconsumer_init+0xc2>
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e7f2      	b.n	8001632 <CO_HBconsumer_init+0xc2>
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	e7ef      	b.n	8001632 <CO_HBconsumer_init+0xc2>
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	e7ec      	b.n	8001632 <CO_HBconsumer_init+0xc2>
 8001658:	08001a29 	.word	0x08001a29
 800165c:	08001515 	.word	0x08001515

08001660 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8001660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001664:	b083      	sub	sp, #12
 8001666:	4604      	mov	r4, r0
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
    bool_t allMonitoredOperationalCurrent = true;

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001668:	460f      	mov	r7, r1
 800166a:	b119      	cbz	r1, 8001674 <CO_HBconsumer_process+0x14>
 800166c:	4691      	mov	r9, r2
 800166e:	6943      	ldr	r3, [r0, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d152      	bne.n	800171a <CO_HBconsumer_process+0xba>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001674:	2f00      	cmp	r7, #0
 8001676:	d167      	bne.n	8001748 <CO_HBconsumer_process+0xe8>
 8001678:	6963      	ldr	r3, [r4, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d166      	bne.n	800174c <CO_HBconsumer_process+0xec>
    bool_t allMonitoredOperationalCurrent = true;
 800167e:	f04f 0801 	mov.w	r8, #1
    bool_t allMonitoredActiveCurrent = true;
 8001682:	46c2      	mov	sl, r8
 8001684:	e067      	b.n	8001756 <CO_HBconsumer_process+0xf6>
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001686:	2301      	movs	r3, #1
 8001688:	70ab      	strb	r3, [r5, #2]
            uint32_t timeDifference_us_copy = timeDifference_us;
 800168a:	464b      	mov	r3, r9
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800168c:	2200      	movs	r2, #0
 800168e:	60ea      	str	r2, [r5, #12]
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001690:	78aa      	ldrb	r2, [r5, #2]
 8001692:	2a02      	cmp	r2, #2
 8001694:	d02d      	beq.n	80016f2 <CO_HBconsumer_process+0x92>
            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001696:	78ab      	ldrb	r3, [r5, #2]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d001      	beq.n	80016a0 <CO_HBconsumer_process+0x40>
                allMonitoredActiveCurrent = false;
 800169c:	f04f 0a00 	mov.w	sl, #0
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 80016a0:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d001      	beq.n	80016ac <CO_HBconsumer_process+0x4c>
                allMonitoredOperationalCurrent = false;
 80016a8:	f04f 0800 	mov.w	r8, #0
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80016ac:	3601      	adds	r6, #1
 80016ae:	b2f6      	uxtb	r6, r6
 80016b0:	7a23      	ldrb	r3, [r4, #8]
 80016b2:	42b3      	cmp	r3, r6
 80016b4:	d94f      	bls.n	8001756 <CO_HBconsumer_process+0xf6>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80016b6:	6865      	ldr	r5, [r4, #4]
 80016b8:	46b3      	mov	fp, r6
 80016ba:	eb05 1506 	add.w	r5, r5, r6, lsl #4
            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 80016be:	78ab      	ldrb	r3, [r5, #2]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f3      	beq.n	80016ac <CO_HBconsumer_process+0x4c>
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 80016c4:	68ea      	ldr	r2, [r5, #12]
 80016c6:	b192      	cbz	r2, 80016ee <CO_HBconsumer_process+0x8e>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80016c8:	f995 2001 	ldrsb.w	r2, [r5, #1]
 80016cc:	b952      	cbnz	r2, 80016e4 <CO_HBconsumer_process+0x84>
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d1d9      	bne.n	8001686 <CO_HBconsumer_process+0x26>
                        CO_errorReport(HBcons->em,
 80016d2:	9600      	str	r6, [sp, #0]
 80016d4:	f248 1330 	movw	r3, #33072	; 0x8130
 80016d8:	221c      	movs	r2, #28
 80016da:	2101      	movs	r1, #1
 80016dc:	6820      	ldr	r0, [r4, #0]
 80016de:	f7ff fd83 	bl	80011e8 <CO_error>
 80016e2:	e7d0      	b.n	8001686 <CO_HBconsumer_process+0x26>
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 80016e4:	2302      	movs	r3, #2
 80016e6:	70ab      	strb	r3, [r5, #2]
                    monitoredNode->timeoutTimer = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	606b      	str	r3, [r5, #4]
                    timeDifference_us_copy = 0;
 80016ec:	e7ce      	b.n	800168c <CO_HBconsumer_process+0x2c>
            uint32_t timeDifference_us_copy = timeDifference_us;
 80016ee:	464b      	mov	r3, r9
 80016f0:	e7ce      	b.n	8001690 <CO_HBconsumer_process+0x30>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80016f2:	686a      	ldr	r2, [r5, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	606b      	str	r3, [r5, #4]
                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 80016f8:	68aa      	ldr	r2, [r5, #8]
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d3cb      	bcc.n	8001696 <CO_HBconsumer_process+0x36>
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 80016fe:	f8cd b000 	str.w	fp, [sp]
 8001702:	f248 1330 	movw	r3, #33072	; 0x8130
 8001706:	221b      	movs	r2, #27
 8001708:	2101      	movs	r1, #1
 800170a:	6820      	ldr	r0, [r4, #0]
 800170c:	f7ff fd6c 	bl	80011e8 <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001710:	23ff      	movs	r3, #255	; 0xff
 8001712:	706b      	strb	r3, [r5, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	70ab      	strb	r3, [r5, #2]
 8001718:	e7bd      	b.n	8001696 <CO_HBconsumer_process+0x36>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800171a:	2600      	movs	r6, #0
    bool_t allMonitoredOperationalCurrent = true;
 800171c:	f04f 0801 	mov.w	r8, #1
    bool_t allMonitoredActiveCurrent = true;
 8001720:	46c2      	mov	sl, r8
 8001722:	e7c5      	b.n	80016b0 <CO_HBconsumer_process+0x50>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001724:	3201      	adds	r2, #1
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	7a23      	ldrb	r3, [r4, #8]
 800172a:	4293      	cmp	r3, r2
 800172c:	d910      	bls.n	8001750 <CO_HBconsumer_process+0xf0>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800172e:	6863      	ldr	r3, [r4, #4]
 8001730:	eb03 1302 	add.w	r3, r3, r2, lsl #4
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001734:	21ff      	movs	r1, #255	; 0xff
 8001736:	7059      	strb	r1, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001738:	2100      	movs	r1, #0
 800173a:	60d9      	str	r1, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 800173c:	7899      	ldrb	r1, [r3, #2]
 800173e:	2900      	cmp	r1, #0
 8001740:	d0f0      	beq.n	8001724 <CO_HBconsumer_process+0xc4>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001742:	2101      	movs	r1, #1
 8001744:	7099      	strb	r1, [r3, #2]
 8001746:	e7ed      	b.n	8001724 <CO_HBconsumer_process+0xc4>
 8001748:	2200      	movs	r2, #0
 800174a:	e7ed      	b.n	8001728 <CO_HBconsumer_process+0xc8>
 800174c:	2200      	movs	r2, #0
 800174e:	e7eb      	b.n	8001728 <CO_HBconsumer_process+0xc8>
            }
        }
        allMonitoredActiveCurrent = false;
        allMonitoredOperationalCurrent = false;
 8001750:	f04f 0800 	mov.w	r8, #0
        allMonitoredActiveCurrent = false;
 8001754:	46c2      	mov	sl, r8
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001756:	68e3      	ldr	r3, [r4, #12]
 8001758:	b913      	cbnz	r3, 8001760 <CO_HBconsumer_process+0x100>
 800175a:	f1ba 0f00 	cmp.w	sl, #0
 800175e:	d107      	bne.n	8001770 <CO_HBconsumer_process+0x110>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001760:	f8c4 a00c 	str.w	sl, [r4, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001764:	f8c4 8010 	str.w	r8, [r4, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001768:	6167      	str	r7, [r4, #20]
}
 800176a:	b003      	add	sp, #12
 800176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001770:	2500      	movs	r5, #0
 8001772:	9500      	str	r5, [sp, #0]
 8001774:	462b      	mov	r3, r5
 8001776:	221b      	movs	r2, #27
 8001778:	4629      	mov	r1, r5
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	f7ff fd34 	bl	80011e8 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001780:	9500      	str	r5, [sp, #0]
 8001782:	462b      	mov	r3, r5
 8001784:	221c      	movs	r2, #28
 8001786:	4629      	mov	r1, r5
 8001788:	6820      	ldr	r0, [r4, #0]
 800178a:	f7ff fd2d 	bl	80011e8 <CO_error>
 800178e:	e7e7      	b.n	8001760 <CO_HBconsumer_process+0x100>

08001790 <CO_NMT_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001790:	790b      	ldrb	r3, [r1, #4]
    uint8_t *data = CO_CANrxMsg_readData(msg);
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001792:	f891 c005 	ldrb.w	ip, [r1, #5]
    uint8_t nodeId = data[1];
 8001796:	798a      	ldrb	r2, [r1, #6]

    CO_NMT_t *NMT = (CO_NMT_t*)object;

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001798:	2b02      	cmp	r3, #2
 800179a:	d000      	beq.n	800179e <CO_NMT_receive+0xe>
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 800179c:	4770      	bx	lr
    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 800179e:	b112      	cbz	r2, 80017a6 <CO_NMT_receive+0x16>
 80017a0:	78c3      	ldrb	r3, [r0, #3]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d1fa      	bne.n	800179c <CO_NMT_receive+0xc>
        NMT->internalCommand = command;
 80017a6:	f880 c002 	strb.w	ip, [r0, #2]
}
 80017aa:	e7f7      	b.n	800179c <CO_NMT_receive+0xc>

080017ac <OD_write_1017>:
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80017ac:	b1a8      	cbz	r0, 80017da <OD_write_1017+0x2e>
 80017ae:	4684      	mov	ip, r0
 80017b0:	7c40      	ldrb	r0, [r0, #17]
 80017b2:	b9a0      	cbnz	r0, 80017de <OD_write_1017+0x32>
 80017b4:	b1a9      	cbz	r1, 80017e2 <OD_write_1017+0x36>
        || count != sizeof(uint16_t) || countWritten == NULL
 80017b6:	2a02      	cmp	r2, #2
 80017b8:	d115      	bne.n	80017e6 <OD_write_1017+0x3a>
 80017ba:	b1b3      	cbz	r3, 80017ea <OD_write_1017+0x3e>
{
 80017bc:	b510      	push	{r4, lr}
    ) {
        return ODR_DEV_INCOMPAT;
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 80017be:	f8dc 4004 	ldr.w	r4, [ip, #4]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 80017c2:	8808      	ldrh	r0, [r1, #0]
 80017c4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 80017c8:	fb0e f000 	mul.w	r0, lr, r0
 80017cc:	60a0      	str	r0, [r4, #8]
    NMT->HBproducerTimer = 0;
 80017ce:	2000      	movs	r0, #0
 80017d0:	60e0      	str	r0, [r4, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80017d2:	4660      	mov	r0, ip
 80017d4:	f000 f957 	bl	8001a86 <OD_writeOriginal>
}
 80017d8:	bd10      	pop	{r4, pc}
        return ODR_DEV_INCOMPAT;
 80017da:	2009      	movs	r0, #9
 80017dc:	4770      	bx	lr
 80017de:	2009      	movs	r0, #9
 80017e0:	4770      	bx	lr
 80017e2:	2009      	movs	r0, #9
 80017e4:	4770      	bx	lr
 80017e6:	2009      	movs	r0, #9
 80017e8:	4770      	bx	lr
 80017ea:	2009      	movs	r0, #9
}
 80017ec:	4770      	bx	lr
	...

080017f0 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 80017f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017f4:	b087      	sub	sp, #28
 80017f6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80017fa:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    CO_ReturnError_t ret = CO_ERROR_NO;

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 80017fe:	2800      	cmp	r0, #0
 8001800:	d06a      	beq.n	80018d8 <CO_NMT_init+0xe8>
 8001802:	460d      	mov	r5, r1
 8001804:	4616      	mov	r6, r2
 8001806:	461f      	mov	r7, r3
 8001808:	4604      	mov	r4, r0
 800180a:	2900      	cmp	r1, #0
 800180c:	d067      	beq.n	80018de <CO_NMT_init+0xee>
 800180e:	2a00      	cmp	r2, #0
 8001810:	d068      	beq.n	80018e4 <CO_NMT_init+0xf4>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001812:	f1b8 0f00 	cmp.w	r8, #0
 8001816:	d068      	beq.n	80018ea <CO_NMT_init+0xfa>
 8001818:	f1b9 0f00 	cmp.w	r9, #0
 800181c:	d068      	beq.n	80018f0 <CO_NMT_init+0x100>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 800181e:	222c      	movs	r2, #44	; 0x2c
 8001820:	2100      	movs	r1, #0
 8001822:	f008 fcdf 	bl	800a1e4 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
    NMT->nodeId = nodeId;
 8001826:	70e7      	strb	r7, [r4, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001828:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800182c:	80a3      	strh	r3, [r4, #4]
    NMT->em = em;
 800182e:	6226      	str	r6, [r4, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001830:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	60e3      	str	r3, [r4, #12]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800183e:	2301      	movs	r3, #1
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2302      	movs	r3, #2
 8001844:	f10d 0216 	add.w	r2, sp, #22
 8001848:	2100      	movs	r1, #0
 800184a:	4628      	mov	r0, r5
 800184c:	f000 fa10 	bl	8001c70 <OD_get_value>

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
    if (odRet != ODR_OK) {
 8001850:	bb38      	cbnz	r0, 80018a2 <CO_NMT_init+0xb2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
        return CO_ERROR_OD_PARAMETERS;
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8001852:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	60a3      	str	r3, [r4, #8]

    NMT->OD_1017_extension.object = NMT;
 8001860:	6124      	str	r4, [r4, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <CO_NMT_init+0x108>)
 8001864:	6163      	str	r3, [r4, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <CO_NMT_init+0x10c>)
 8001868:	61a3      	str	r3, [r4, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 800186a:	f104 0310 	add.w	r3, r4, #16
    entry->extension = extension;
 800186e:	60ab      	str	r3, [r5, #8]
    if (odRet != ODR_OK) {
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
        return CO_ERROR_OD_PARAMETERS;
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001870:	68e2      	ldr	r2, [r4, #12]
 8001872:	68a3      	ldr	r3, [r4, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	d900      	bls.n	800187a <CO_NMT_init+0x8a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001878:	60e3      	str	r3, [r4, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <CO_NMT_init+0x110>)
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	9401      	str	r4, [sp, #4]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001888:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800188c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8001890:	4640      	mov	r0, r8
 8001892:	f004 f87b 	bl	800598c <CO_CANrxBufferInit>
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001896:	4605      	mov	r5, r0
 8001898:	b158      	cbz	r0, 80018b2 <CO_NMT_init+0xc2>
    if (NMT->HB_TXbuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    return ret;
}
 800189a:	4628      	mov	r0, r5
 800189c:	b007      	add	sp, #28
 800189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80018a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018a4:	b113      	cbz	r3, 80018ac <CO_NMT_init+0xbc>
    return (entry != NULL) ? entry->index : 0;
 80018a6:	882b      	ldrh	r3, [r5, #0]
 80018a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80018aa:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 80018ac:	f06f 050b 	mvn.w	r5, #11
 80018b0:	e7f3      	b.n	800189a <CO_NMT_init+0xaa>
    NMT->HB_CANdevTx = HB_CANdevTx;
 80018b2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 80018b6:	2300      	movs	r3, #0
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	9200      	str	r2, [sp, #0]
 80018be:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80018c2:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 80018c6:	4648      	mov	r0, r9
 80018c8:	f004 f89a 	bl	8005a00 <CO_CANtxBufferInit>
 80018cc:	62a0      	str	r0, [r4, #40]	; 0x28
    if (NMT->HB_TXbuff == NULL) {
 80018ce:	2800      	cmp	r0, #0
 80018d0:	d1e3      	bne.n	800189a <CO_NMT_init+0xaa>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80018d2:	f04f 35ff 	mov.w	r5, #4294967295
 80018d6:	e7e0      	b.n	800189a <CO_NMT_init+0xaa>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80018d8:	f04f 35ff 	mov.w	r5, #4294967295
 80018dc:	e7dd      	b.n	800189a <CO_NMT_init+0xaa>
 80018de:	f04f 35ff 	mov.w	r5, #4294967295
 80018e2:	e7da      	b.n	800189a <CO_NMT_init+0xaa>
 80018e4:	f04f 35ff 	mov.w	r5, #4294967295
 80018e8:	e7d7      	b.n	800189a <CO_NMT_init+0xaa>
 80018ea:	f04f 35ff 	mov.w	r5, #4294967295
 80018ee:	e7d4      	b.n	800189a <CO_NMT_init+0xaa>
 80018f0:	f04f 35ff 	mov.w	r5, #4294967295
 80018f4:	e7d1      	b.n	800189a <CO_NMT_init+0xaa>
 80018f6:	bf00      	nop
 80018f8:	08001a29 	.word	0x08001a29
 80018fc:	080017ad 	.word	0x080017ad
 8001900:	08001791 	.word	0x08001791

08001904 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	4604      	mov	r4, r0
 8001908:	460e      	mov	r6, r1
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800190a:	f990 5000 	ldrsb.w	r5, [r0]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 800190e:	68c3      	ldr	r3, [r0, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <CO_NMT_process+0x14>
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	e000      	b.n	800191a <CO_NMT_process+0x16>
 8001918:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 800191a:	60e3      	str	r3, [r4, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 800191c:	b135      	cbz	r5, 800192c <CO_NMT_process+0x28>
 800191e:	68a2      	ldr	r2, [r4, #8]
 8001920:	b19a      	cbz	r2, 800194a <CO_NMT_process+0x46>
                    && (NMT->HBproducerTimer == 0
 8001922:	b11b      	cbz	r3, 800192c <CO_NMT_process+0x28>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8001924:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8001928:	42ab      	cmp	r3, r5
 800192a:	d00e      	beq.n	800194a <CO_NMT_process+0x46>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 800192c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800192e:	715d      	strb	r5, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001930:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001934:	f004 f886 	bl	8005a44 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001938:	b92d      	cbnz	r5, 8001946 <CO_NMT_process+0x42>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800193a:	88a3      	ldrh	r3, [r4, #4]
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 800193c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001940:	d00f      	beq.n	8001962 <CO_NMT_process+0x5e>
 8001942:	2505      	movs	r5, #5
 8001944:	e001      	b.n	800194a <CO_NMT_process+0x46>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001946:	68a3      	ldr	r3, [r4, #8]
 8001948:	60e3      	str	r3, [r4, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 800194a:	7065      	strb	r5, [r4, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 800194c:	78a0      	ldrb	r0, [r4, #2]
 800194e:	b190      	cbz	r0, 8001976 <CO_NMT_process+0x72>
        switch (NMT->internalCommand) {
 8001950:	2880      	cmp	r0, #128	; 0x80
 8001952:	d023      	beq.n	800199c <CO_NMT_process+0x98>
 8001954:	d907      	bls.n	8001966 <CO_NMT_process+0x62>
 8001956:	2881      	cmp	r0, #129	; 0x81
 8001958:	d028      	beq.n	80019ac <CO_NMT_process+0xa8>
 800195a:	2882      	cmp	r0, #130	; 0x82
 800195c:	d128      	bne.n	80019b0 <CO_NMT_process+0xac>
                break;
            case CO_NMT_RESET_NODE:
                resetCommand = CO_RESET_APP;
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
 800195e:	2001      	movs	r0, #1
 8001960:	e007      	b.n	8001972 <CO_NMT_process+0x6e>
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001962:	257f      	movs	r5, #127	; 0x7f
 8001964:	e7f1      	b.n	800194a <CO_NMT_process+0x46>
        switch (NMT->internalCommand) {
 8001966:	2801      	cmp	r0, #1
 8001968:	d01b      	beq.n	80019a2 <CO_NMT_process+0x9e>
 800196a:	2802      	cmp	r0, #2
 800196c:	d11c      	bne.n	80019a8 <CO_NMT_process+0xa4>
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 800196e:	2000      	movs	r0, #0
                NMTstateCpy = CO_NMT_STOPPED;
 8001970:	2504      	movs	r5, #4
                break;
            default:
                break;
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001972:	2300      	movs	r3, #0
 8001974:	70a3      	strb	r3, [r4, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001976:	88a3      	ldrh	r3, [r4, #4]
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001978:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800197c:	d01a      	beq.n	80019b4 <CO_NMT_process+0xb0>
 800197e:	6a22      	ldr	r2, [r4, #32]
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
    uint8_t index = errorBit >> 3;
    uint8_t bitmask = 1 << (errorBit & 0x7);

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001980:	b332      	cbz	r2, 80019d0 <CO_NMT_process+0xcc>
 8001982:	7891      	ldrb	r1, [r2, #2]
 8001984:	f011 0f04 	tst.w	r1, #4
 8001988:	d124      	bne.n	80019d4 <CO_NMT_process+0xd0>
 800198a:	78d2      	ldrb	r2, [r2, #3]
 800198c:	f012 0f08 	tst.w	r2, #8
 8001990:	d122      	bne.n	80019d8 <CO_NMT_process+0xd4>
 8001992:	f012 0f10 	tst.w	r2, #16
 8001996:	d121      	bne.n	80019dc <CO_NMT_process+0xd8>
 8001998:	2200      	movs	r2, #0
 800199a:	e00c      	b.n	80019b6 <CO_NMT_process+0xb2>
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 800199c:	2000      	movs	r0, #0
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 800199e:	257f      	movs	r5, #127	; 0x7f
 80019a0:	e7e7      	b.n	8001972 <CO_NMT_process+0x6e>
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80019a2:	2000      	movs	r0, #0
                NMTstateCpy = CO_NMT_OPERATIONAL;
 80019a4:	2505      	movs	r5, #5
 80019a6:	e7e4      	b.n	8001972 <CO_NMT_process+0x6e>
        switch (NMT->internalCommand) {
 80019a8:	2000      	movs	r0, #0
 80019aa:	e7e2      	b.n	8001972 <CO_NMT_process+0x6e>
                resetCommand = CO_RESET_APP;
 80019ac:	2002      	movs	r0, #2
 80019ae:	e7e0      	b.n	8001972 <CO_NMT_process+0x6e>
        switch (NMT->internalCommand) {
 80019b0:	2000      	movs	r0, #0
 80019b2:	e7de      	b.n	8001972 <CO_NMT_process+0x6e>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80019b4:	2200      	movs	r2, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80019b6:	4611      	mov	r1, r2
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 80019b8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80019bc:	d014      	beq.n	80019e8 <CO_NMT_process+0xe4>
 80019be:	6a22      	ldr	r2, [r4, #32]
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80019c0:	b172      	cbz	r2, 80019e0 <CO_NMT_process+0xdc>
 80019c2:	68d2      	ldr	r2, [r2, #12]
 80019c4:	b172      	cbz	r2, 80019e4 <CO_NMT_process+0xe0>
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	401a      	ands	r2, r3
 80019ca:	d00e      	beq.n	80019ea <CO_NMT_process+0xe6>
 80019cc:	2201      	movs	r2, #1
 80019ce:	e00c      	b.n	80019ea <CO_NMT_process+0xe6>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80019d0:	2201      	movs	r2, #1
 80019d2:	e7f0      	b.n	80019b6 <CO_NMT_process+0xb2>
 80019d4:	2201      	movs	r2, #1
 80019d6:	e7ee      	b.n	80019b6 <CO_NMT_process+0xb2>
 80019d8:	2201      	movs	r2, #1
 80019da:	e7ec      	b.n	80019b6 <CO_NMT_process+0xb2>
 80019dc:	2201      	movs	r2, #1
 80019de:	e7ea      	b.n	80019b6 <CO_NMT_process+0xb2>
 80019e0:	2200      	movs	r2, #0
 80019e2:	e7f1      	b.n	80019c8 <CO_NMT_process+0xc4>
 80019e4:	2200      	movs	r2, #0
 80019e6:	e7ef      	b.n	80019c8 <CO_NMT_process+0xc4>
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 80019e8:	2200      	movs	r2, #0

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 80019ea:	2d05      	cmp	r5, #5
 80019ec:	d006      	beq.n	80019fc <CO_NMT_process+0xf8>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 80019ee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80019f2:	d10b      	bne.n	8001a0c <CO_NMT_process+0x108>
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 80019f4:	7025      	strb	r5, [r4, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 80019f6:	b106      	cbz	r6, 80019fa <CO_NMT_process+0xf6>
 80019f8:	7035      	strb	r5, [r6, #0]

    return resetCommand;
}
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 80019fc:	b909      	cbnz	r1, 8001a02 <CO_NMT_process+0xfe>
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	d0f5      	beq.n	80019ee <CO_NMT_process+0xea>
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001a02:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001a06:	d009      	beq.n	8001a1c <CO_NMT_process+0x118>
 8001a08:	2504      	movs	r5, #4
 8001a0a:	e7f3      	b.n	80019f4 <CO_NMT_process+0xf0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8001a0c:	2d7f      	cmp	r5, #127	; 0x7f
 8001a0e:	d1f1      	bne.n	80019f4 <CO_NMT_process+0xf0>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d1ef      	bne.n	80019f4 <CO_NMT_process+0xf0>
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	d1ed      	bne.n	80019f4 <CO_NMT_process+0xf0>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001a18:	2505      	movs	r5, #5
 8001a1a:	e7eb      	b.n	80019f4 <CO_NMT_process+0xf0>
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001a1c:	257f      	movs	r5, #127	; 0x7f
 8001a1e:	e7e9      	b.n	80019f4 <CO_NMT_process+0xf0>

08001a20 <OD_readDisabled>:
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
}
 8001a20:	2002      	movs	r0, #2
 8001a22:	4770      	bx	lr

08001a24 <OD_writeDisabled>:
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
}
 8001a24:	2002      	movs	r0, #2
 8001a26:	4770      	bx	lr

08001a28 <OD_readOriginal>:
{
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream == NULL || buf == NULL || countRead == NULL) {
 8001a2a:	b310      	cbz	r0, 8001a72 <OD_readOriginal+0x4a>
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	461d      	mov	r5, r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	b301      	cbz	r1, 8001a76 <OD_readOriginal+0x4e>
 8001a34:	b30d      	cbz	r5, 8001a7a <OD_readOriginal+0x52>
    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001a36:	6886      	ldr	r6, [r0, #8]
    const uint8_t *dataOrig = stream->dataOrig;
 8001a38:	6801      	ldr	r1, [r0, #0]
    if (dataOrig == NULL) {
 8001a3a:	b301      	cbz	r1, 8001a7e <OD_readOriginal+0x56>
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001a3c:	68c0      	ldr	r0, [r0, #12]
 8001a3e:	b908      	cbnz	r0, 8001a44 <OD_readOriginal+0x1c>
 8001a40:	4296      	cmp	r6, r2
 8001a42:	d914      	bls.n	8001a6e <OD_readOriginal+0x46>
        if (stream->dataOffset >= dataLenToCopy) {
 8001a44:	42b0      	cmp	r0, r6
 8001a46:	d21c      	bcs.n	8001a82 <OD_readOriginal+0x5a>
        dataLenToCopy -= stream->dataOffset;
 8001a48:	1a36      	subs	r6, r6, r0
        dataOrig += stream->dataOffset;
 8001a4a:	4401      	add	r1, r0
        if (dataLenToCopy > count) {
 8001a4c:	42b2      	cmp	r2, r6
 8001a4e:	d20b      	bcs.n	8001a68 <OD_readOriginal+0x40>
            stream->dataOffset += dataLenToCopy;
 8001a50:	4410      	add	r0, r2
 8001a52:	60d8      	str	r0, [r3, #12]
            dataLenToCopy = count;
 8001a54:	4616      	mov	r6, r2
            returnCode = ODR_PARTIAL;
 8001a56:	f04f 37ff 	mov.w	r7, #4294967295
    memcpy(buf, dataOrig, dataLenToCopy);
 8001a5a:	4632      	mov	r2, r6
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f008 fb99 	bl	800a194 <memcpy>
    *countRead = dataLenToCopy;
 8001a62:	602e      	str	r6, [r5, #0]
}
 8001a64:	4638      	mov	r0, r7
 8001a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001a68:	2700      	movs	r7, #0
 8001a6a:	60df      	str	r7, [r3, #12]
 8001a6c:	e7f5      	b.n	8001a5a <OD_readOriginal+0x32>
    ODR_t returnCode = ODR_OK;
 8001a6e:	2700      	movs	r7, #0
 8001a70:	e7f3      	b.n	8001a5a <OD_readOriginal+0x32>
        return ODR_DEV_INCOMPAT;
 8001a72:	2709      	movs	r7, #9
 8001a74:	e7f6      	b.n	8001a64 <OD_readOriginal+0x3c>
 8001a76:	2709      	movs	r7, #9
 8001a78:	e7f4      	b.n	8001a64 <OD_readOriginal+0x3c>
 8001a7a:	2709      	movs	r7, #9
 8001a7c:	e7f2      	b.n	8001a64 <OD_readOriginal+0x3c>
        return ODR_SUB_NOT_EXIST;
 8001a7e:	270e      	movs	r7, #14
 8001a80:	e7f0      	b.n	8001a64 <OD_readOriginal+0x3c>
            return ODR_DEV_INCOMPAT;
 8001a82:	2709      	movs	r7, #9
 8001a84:	e7ee      	b.n	8001a64 <OD_readOriginal+0x3c>

08001a86 <OD_writeOriginal>:
{
 8001a86:	b570      	push	{r4, r5, r6, lr}
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8001a88:	b310      	cbz	r0, 8001ad0 <OD_writeOriginal+0x4a>
 8001a8a:	461c      	mov	r4, r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b309      	cbz	r1, 8001ad4 <OD_writeOriginal+0x4e>
 8001a90:	b314      	cbz	r4, 8001ad8 <OD_writeOriginal+0x52>
    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001a92:	6885      	ldr	r5, [r0, #8]
    uint8_t *dataOrig = stream->dataOrig;
 8001a94:	6800      	ldr	r0, [r0, #0]
    if (dataOrig == NULL) {
 8001a96:	b308      	cbz	r0, 8001adc <OD_writeOriginal+0x56>
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001a98:	68de      	ldr	r6, [r3, #12]
 8001a9a:	b90e      	cbnz	r6, 8001aa0 <OD_writeOriginal+0x1a>
 8001a9c:	4295      	cmp	r5, r2
 8001a9e:	d915      	bls.n	8001acc <OD_writeOriginal+0x46>
        if (stream->dataOffset >= dataLenToCopy) {
 8001aa0:	42ae      	cmp	r6, r5
 8001aa2:	d21d      	bcs.n	8001ae0 <OD_writeOriginal+0x5a>
        dataLenToCopy -= stream->dataOffset;
 8001aa4:	1bad      	subs	r5, r5, r6
        dataOrig += stream->dataOffset;
 8001aa6:	4430      	add	r0, r6
        if (dataLenToCopy > count) {
 8001aa8:	42aa      	cmp	r2, r5
 8001aaa:	d20c      	bcs.n	8001ac6 <OD_writeOriginal+0x40>
            stream->dataOffset += dataLenToCopy;
 8001aac:	4416      	add	r6, r2
 8001aae:	60de      	str	r6, [r3, #12]
            dataLenToCopy = count;
 8001ab0:	4615      	mov	r5, r2
            returnCode = ODR_PARTIAL;
 8001ab2:	f04f 36ff 	mov.w	r6, #4294967295
    if (dataLenToCopy < count) {
 8001ab6:	4295      	cmp	r5, r2
 8001ab8:	d314      	bcc.n	8001ae4 <OD_writeOriginal+0x5e>
    memcpy(dataOrig, buf, dataLenToCopy);
 8001aba:	462a      	mov	r2, r5
 8001abc:	f008 fb6a 	bl	800a194 <memcpy>
    *countWritten = dataLenToCopy;
 8001ac0:	6025      	str	r5, [r4, #0]
}
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001ac6:	2600      	movs	r6, #0
 8001ac8:	60de      	str	r6, [r3, #12]
 8001aca:	e7f4      	b.n	8001ab6 <OD_writeOriginal+0x30>
    ODR_t returnCode = ODR_OK;
 8001acc:	2600      	movs	r6, #0
 8001ace:	e7f2      	b.n	8001ab6 <OD_writeOriginal+0x30>
        return ODR_DEV_INCOMPAT;
 8001ad0:	2609      	movs	r6, #9
 8001ad2:	e7f6      	b.n	8001ac2 <OD_writeOriginal+0x3c>
 8001ad4:	2609      	movs	r6, #9
 8001ad6:	e7f4      	b.n	8001ac2 <OD_writeOriginal+0x3c>
 8001ad8:	2609      	movs	r6, #9
 8001ada:	e7f2      	b.n	8001ac2 <OD_writeOriginal+0x3c>
        return ODR_SUB_NOT_EXIST;
 8001adc:	260e      	movs	r6, #14
 8001ade:	e7f0      	b.n	8001ac2 <OD_writeOriginal+0x3c>
            return ODR_DEV_INCOMPAT;
 8001ae0:	2609      	movs	r6, #9
 8001ae2:	e7ee      	b.n	8001ac2 <OD_writeOriginal+0x3c>
        return ODR_DATA_LONG;
 8001ae4:	260c      	movs	r6, #12
 8001ae6:	e7ec      	b.n	8001ac2 <OD_writeOriginal+0x3c>

08001ae8 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001ae8:	b530      	push	{r4, r5, lr}
    if (od == NULL || od->size == 0) {
 8001aea:	4605      	mov	r5, r0
 8001aec:	b370      	cbz	r0, 8001b4c <OD_find+0x64>
 8001aee:	8803      	ldrh	r3, [r0, #0]
 8001af0:	b34b      	cbz	r3, 8001b46 <OD_find+0x5e>
        return NULL;
    }

    uint16_t min = 0;
    uint16_t max = od->size - 1;
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
    uint16_t min = 0;
 8001af6:	f04f 0e00 	mov.w	lr, #0

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001afa:	e002      	b.n	8001b02 <OD_find+0x1a>

        if (index < entry->index) {
            max = (cur > 0) ? (cur - 1) : cur;
        }
        else {
            min = cur + 1;
 8001afc:	3301      	adds	r3, #1
 8001afe:	fa1f fe83 	uxth.w	lr, r3
    while (min < max) {
 8001b02:	4596      	cmp	lr, r2
 8001b04:	d213      	bcs.n	8001b2e <OD_find+0x46>
        uint16_t cur = (min + max) >> 1;
 8001b06:	eb0e 0302 	add.w	r3, lr, r2
 8001b0a:	f3c3 034f 	ubfx	r3, r3, #1, #16
        OD_entry_t* entry = &od->list[cur];
 8001b0e:	686c      	ldr	r4, [r5, #4]
 8001b10:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8001b14:	eb04 008c 	add.w	r0, r4, ip, lsl #2
        if (index == entry->index) {
 8001b18:	f834 402c 	ldrh.w	r4, [r4, ip, lsl #2]
 8001b1c:	428c      	cmp	r4, r1
 8001b1e:	d015      	beq.n	8001b4c <OD_find+0x64>
        if (index < entry->index) {
 8001b20:	d9ec      	bls.n	8001afc <OD_find+0x14>
            max = (cur > 0) ? (cur - 1) : cur;
 8001b22:	b113      	cbz	r3, 8001b2a <OD_find+0x42>
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	e7eb      	b.n	8001b02 <OD_find+0x1a>
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	e7e9      	b.n	8001b02 <OD_find+0x1a>
        }
    }

    if (min == max) {
 8001b2e:	d10c      	bne.n	8001b4a <OD_find+0x62>
        OD_entry_t* entry = &od->list[min];
 8001b30:	686a      	ldr	r2, [r5, #4]
 8001b32:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8001b36:	eb02 0083 	add.w	r0, r2, r3, lsl #2
        if (index == entry->index) {
 8001b3a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001b3e:	428b      	cmp	r3, r1
 8001b40:	d004      	beq.n	8001b4c <OD_find+0x64>
            return entry;
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001b42:	2000      	movs	r0, #0
 8001b44:	e002      	b.n	8001b4c <OD_find+0x64>
        return NULL;
 8001b46:	2000      	movs	r0, #0
 8001b48:	e000      	b.n	8001b4c <OD_find+0x64>
    return NULL;  /* entry does not exist in OD */
 8001b4a:	2000      	movs	r0, #0
}
 8001b4c:	bd30      	pop	{r4, r5, pc}
	...

08001b50 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d06b      	beq.n	8001c2c <OD_getSub+0xdc>
{
 8001b54:	b530      	push	{r4, r5, lr}
 8001b56:	4684      	mov	ip, r0
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001b58:	6845      	ldr	r5, [r0, #4]
 8001b5a:	2d00      	cmp	r5, #0
 8001b5c:	d068      	beq.n	8001c30 <OD_getSub+0xe0>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d068      	beq.n	8001c34 <OD_getSub+0xe4>

    OD_stream_t *stream = &io->stream;

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001b62:	78c0      	ldrb	r0, [r0, #3]
 8001b64:	f000 000f 	and.w	r0, r0, #15
 8001b68:	2802      	cmp	r0, #2
 8001b6a:	d00e      	beq.n	8001b8a <OD_getSub+0x3a>
 8001b6c:	2803      	cmp	r0, #3
 8001b6e:	d025      	beq.n	8001bbc <OD_getSub+0x6c>
 8001b70:	2801      	cmp	r0, #1
 8001b72:	d001      	beq.n	8001b78 <OD_getSub+0x28>
 8001b74:	2009      	movs	r0, #9
    /* Reset stream data offset */
    stream->dataOffset = 0;
    stream->subIndex = subIndex;

    return ODR_OK;
}
 8001b76:	bd30      	pop	{r4, r5, pc}
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8001b78:	2900      	cmp	r1, #0
 8001b7a:	d15d      	bne.n	8001c38 <OD_getSub+0xe8>
        stream->attribute = odo->attribute;
 8001b7c:	7928      	ldrb	r0, [r5, #4]
 8001b7e:	7410      	strb	r0, [r2, #16]
        stream->dataOrig = odo->dataOrig;
 8001b80:	6828      	ldr	r0, [r5, #0]
 8001b82:	6010      	str	r0, [r2, #0]
        stream->dataLength = odo->dataLength;
 8001b84:	68a8      	ldr	r0, [r5, #8]
 8001b86:	6090      	str	r0, [r2, #8]
        break;
 8001b88:	e031      	b.n	8001bee <OD_getSub+0x9e>
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001b8a:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8001b8e:	4288      	cmp	r0, r1
 8001b90:	d954      	bls.n	8001c3c <OD_getSub+0xec>
        if (subIndex == 0) {
 8001b92:	b931      	cbnz	r1, 8001ba2 <OD_getSub+0x52>
            stream->attribute = odo->attribute0;
 8001b94:	7a28      	ldrb	r0, [r5, #8]
 8001b96:	7410      	strb	r0, [r2, #16]
            stream->dataOrig = odo->dataOrig0;
 8001b98:	6828      	ldr	r0, [r5, #0]
 8001b9a:	6010      	str	r0, [r2, #0]
            stream->dataLength = 1;
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	6090      	str	r0, [r2, #8]
 8001ba0:	e025      	b.n	8001bee <OD_getSub+0x9e>
            stream->attribute = odo->attribute;
 8001ba2:	7a68      	ldrb	r0, [r5, #9]
 8001ba4:	7410      	strb	r0, [r2, #16]
            uint8_t *ptr = odo->dataOrig;
 8001ba6:	6868      	ldr	r0, [r5, #4]
            stream->dataOrig = ptr == NULL ? ptr
 8001ba8:	b120      	cbz	r0, 8001bb4 <OD_getSub+0x64>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001baa:	692c      	ldr	r4, [r5, #16]
 8001bac:	f101 3eff 	add.w	lr, r1, #4294967295
            stream->dataOrig = ptr == NULL ? ptr
 8001bb0:	fb0e 0004 	mla	r0, lr, r4, r0
 8001bb4:	6010      	str	r0, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001bb6:	68e8      	ldr	r0, [r5, #12]
 8001bb8:	6090      	str	r0, [r2, #8]
 8001bba:	e018      	b.n	8001bee <OD_getSub+0x9e>
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001bbc:	2000      	movs	r0, #0
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bbe:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8001bc2:	4284      	cmp	r4, r0
 8001bc4:	d90a      	bls.n	8001bdc <OD_getSub+0x8c>
            if (odoArr[i].subIndex == subIndex) {
 8001bc6:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8001bca:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8001bce:	f894 e004 	ldrb.w	lr, [r4, #4]
 8001bd2:	458e      	cmp	lr, r1
 8001bd4:	d003      	beq.n	8001bde <OD_getSub+0x8e>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	b2c0      	uxtb	r0, r0
 8001bda:	e7f0      	b.n	8001bbe <OD_getSub+0x6e>
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001bdc:	2400      	movs	r4, #0
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001bde:	2c00      	cmp	r4, #0
 8001be0:	d02e      	beq.n	8001c40 <OD_getSub+0xf0>
        stream->attribute = odo->attribute;
 8001be2:	7960      	ldrb	r0, [r4, #5]
 8001be4:	7410      	strb	r0, [r2, #16]
        stream->dataOrig = odo->dataOrig;
 8001be6:	6820      	ldr	r0, [r4, #0]
 8001be8:	6010      	str	r0, [r2, #0]
        stream->dataLength = odo->dataLength;
 8001bea:	68a0      	ldr	r0, [r4, #8]
 8001bec:	6090      	str	r0, [r2, #8]
    if (entry->extension == NULL || odOrig) {
 8001bee:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001bf2:	b100      	cbz	r0, 8001bf6 <OD_getSub+0xa6>
 8001bf4:	b14b      	cbz	r3, 8001c0a <OD_getSub+0xba>
        io->read = OD_readOriginal;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <OD_getSub+0xf4>)
 8001bf8:	6153      	str	r3, [r2, #20]
        io->write = OD_writeOriginal;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <OD_getSub+0xf8>)
 8001bfc:	6193      	str	r3, [r2, #24]
        stream->object = NULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	6053      	str	r3, [r2, #4]
    stream->dataOffset = 0;
 8001c02:	2000      	movs	r0, #0
 8001c04:	60d0      	str	r0, [r2, #12]
    stream->subIndex = subIndex;
 8001c06:	7451      	strb	r1, [r2, #17]
    return ODR_OK;
 8001c08:	e7b5      	b.n	8001b76 <OD_getSub+0x26>
        io->read = entry->extension->read != NULL ?
 8001c0a:	6843      	ldr	r3, [r0, #4]
                   entry->extension->read : OD_readDisabled;
 8001c0c:	b153      	cbz	r3, 8001c24 <OD_getSub+0xd4>
        io->read = entry->extension->read != NULL ?
 8001c0e:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001c10:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001c14:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001c16:	b13b      	cbz	r3, 8001c28 <OD_getSub+0xd8>
        io->write = entry->extension->write != NULL ?
 8001c18:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8001c1a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6053      	str	r3, [r2, #4]
 8001c22:	e7ee      	b.n	8001c02 <OD_getSub+0xb2>
                   entry->extension->read : OD_readDisabled;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <OD_getSub+0xfc>)
 8001c26:	e7f2      	b.n	8001c0e <OD_getSub+0xbe>
                    entry->extension->write : OD_writeDisabled;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <OD_getSub+0x100>)
 8001c2a:	e7f5      	b.n	8001c18 <OD_getSub+0xc8>
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001c2c:	2005      	movs	r0, #5
}
 8001c2e:	4770      	bx	lr
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001c30:	2005      	movs	r0, #5
 8001c32:	e7a0      	b.n	8001b76 <OD_getSub+0x26>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001c34:	2009      	movs	r0, #9
 8001c36:	e79e      	b.n	8001b76 <OD_getSub+0x26>
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8001c38:	200e      	movs	r0, #14
 8001c3a:	e79c      	b.n	8001b76 <OD_getSub+0x26>
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001c3c:	200e      	movs	r0, #14
 8001c3e:	e79a      	b.n	8001b76 <OD_getSub+0x26>
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001c40:	200e      	movs	r0, #14
 8001c42:	e798      	b.n	8001b76 <OD_getSub+0x26>
 8001c44:	08001a29 	.word	0x08001a29
 8001c48:	08001a87 	.word	0x08001a87
 8001c4c:	08001a21 	.word	0x08001a21
 8001c50:	08001a25 	.word	0x08001a25

08001c54 <OD_getSDOabCode>:
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001c54:	b2c3      	uxtb	r3, r0
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001c56:	2b19      	cmp	r3, #25
 8001c58:	d803      	bhi.n	8001c62 <OD_getSDOabCode+0xe>
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <OD_getSDOabCode+0x14>)
 8001c5c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c60:	4770      	bx	lr
 8001c62:	4802      	ldr	r0, [pc, #8]	; (8001c6c <OD_getSDOabCode+0x18>)
}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	0800aee4 	.word	0x0800aee4
 8001c6c:	06040047 	.word	0x06040047

08001c70 <OD_get_value>:

/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001c70:	b1aa      	cbz	r2, 8001c9e <OD_get_value+0x2e>
{
 8001c72:	b530      	push	{r4, r5, lr}
 8001c74:	b089      	sub	sp, #36	; 0x24
 8001c76:	461c      	mov	r4, r3
 8001c78:	4615      	mov	r5, r2

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
    OD_size_t countRd = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9300      	str	r3, [sp, #0]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c80:	aa01      	add	r2, sp, #4
 8001c82:	f7ff ff65 	bl	8001b50 <OD_getSub>

    if (ret != ODR_OK) return ret;
 8001c86:	b940      	cbnz	r0, 8001c9a <OD_get_value+0x2a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001c88:	9b03      	ldr	r3, [sp, #12]
 8001c8a:	42a3      	cmp	r3, r4
 8001c8c:	d109      	bne.n	8001ca2 <OD_get_value+0x32>

    return io.read(stream, val, len, &countRd);
 8001c8e:	466b      	mov	r3, sp
 8001c90:	4622      	mov	r2, r4
 8001c92:	4629      	mov	r1, r5
 8001c94:	a801      	add	r0, sp, #4
 8001c96:	9c06      	ldr	r4, [sp, #24]
 8001c98:	47a0      	blx	r4
}
 8001c9a:	b009      	add	sp, #36	; 0x24
 8001c9c:	bd30      	pop	{r4, r5, pc}
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001c9e:	2009      	movs	r0, #9
}
 8001ca0:	4770      	bx	lr
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001ca2:	200b      	movs	r0, #11
 8001ca4:	e7f9      	b.n	8001c9a <OD_get_value+0x2a>

08001ca6 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001ca6:	b530      	push	{r4, r5, lr}
 8001ca8:	b089      	sub	sp, #36	; 0x24
 8001caa:	4615      	mov	r5, r2
 8001cac:	461c      	mov	r4, r3
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
    OD_size_t countWritten = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	9300      	str	r3, [sp, #0]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cb4:	aa01      	add	r2, sp, #4
 8001cb6:	f7ff ff4b 	bl	8001b50 <OD_getSub>

    if (ret != ODR_OK) return ret;
 8001cba:	b940      	cbnz	r0, 8001cce <OD_set_value+0x28>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001cbc:	9b03      	ldr	r3, [sp, #12]
 8001cbe:	42a3      	cmp	r3, r4
 8001cc0:	d107      	bne.n	8001cd2 <OD_set_value+0x2c>

    return io.write(stream, val, len, &countWritten);
 8001cc2:	466b      	mov	r3, sp
 8001cc4:	4622      	mov	r2, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	a801      	add	r0, sp, #4
 8001cca:	9c07      	ldr	r4, [sp, #28]
 8001ccc:	47a0      	blx	r4
}
 8001cce:	b009      	add	sp, #36	; 0x24
 8001cd0:	bd30      	pop	{r4, r5, pc}
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001cd2:	200b      	movs	r0, #11
 8001cd4:	e7fb      	b.n	8001cce <OD_set_value+0x28>

08001cd6 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001cd6:	b530      	push	{r4, r5, lr}
 8001cd8:	b089      	sub	sp, #36	; 0x24
 8001cda:	4615      	mov	r5, r2
 8001cdc:	461c      	mov	r4, r3
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001cde:	2301      	movs	r3, #1
 8001ce0:	aa01      	add	r2, sp, #4
 8001ce2:	f7ff ff35 	bl	8001b50 <OD_getSub>

    if (errCopy == ODR_OK) {
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b958      	cbnz	r0, 8001d02 <OD_getPtr+0x2c>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001cea:	9a01      	ldr	r2, [sp, #4]
 8001cec:	b132      	cbz	r2, 8001cfc <OD_getPtr+0x26>
 8001cee:	9a03      	ldr	r2, [sp, #12]
 8001cf0:	b132      	cbz	r2, 8001d00 <OD_getPtr+0x2a>
            errCopy = ODR_DEV_INCOMPAT;
        }
        else if (len != 0 && len != stream->dataLength) {
 8001cf2:	b135      	cbz	r5, 8001d02 <OD_getPtr+0x2c>
 8001cf4:	42aa      	cmp	r2, r5
 8001cf6:	d004      	beq.n	8001d02 <OD_getPtr+0x2c>
            errCopy = ODR_TYPE_MISMATCH;
 8001cf8:	230b      	movs	r3, #11
 8001cfa:	e002      	b.n	8001d02 <OD_getPtr+0x2c>
            errCopy = ODR_DEV_INCOMPAT;
 8001cfc:	2309      	movs	r3, #9
 8001cfe:	e000      	b.n	8001d02 <OD_getPtr+0x2c>
 8001d00:	2309      	movs	r3, #9
        }
    }

    if (err != NULL) *err = errCopy;
 8001d02:	b104      	cbz	r4, 8001d06 <OD_getPtr+0x30>
 8001d04:	7023      	strb	r3, [r4, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001d06:	b913      	cbnz	r3, 8001d0e <OD_getPtr+0x38>
 8001d08:	9801      	ldr	r0, [sp, #4]
}
 8001d0a:	b009      	add	sp, #36	; 0x24
 8001d0c:	bd30      	pop	{r4, r5, pc}
    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e7fb      	b.n	8001d0a <OD_getPtr+0x34>

08001d12 <OD_write_dummy>:
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8001d12:	b103      	cbz	r3, 8001d16 <OD_write_dummy+0x4>
 8001d14:	601a      	str	r2, [r3, #0]
    return ODR_OK;
}
 8001d16:	2000      	movs	r0, #0
 8001d18:	4770      	bx	lr

08001d1a <OD_read_dummy>:
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001d1a:	b181      	cbz	r1, 8001d3e <OD_read_dummy+0x24>
{
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	4604      	mov	r4, r0
 8001d20:	461d      	mov	r5, r3
 8001d22:	4608      	mov	r0, r1
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001d24:	b16c      	cbz	r4, 8001d42 <OD_read_dummy+0x28>
 8001d26:	b173      	cbz	r3, 8001d46 <OD_read_dummy+0x2c>
        return ODR_DEV_INCOMPAT;
    }

    if (count > stream->dataLength) {
 8001d28:	68a4      	ldr	r4, [r4, #8]
 8001d2a:	4294      	cmp	r4, r2
 8001d2c:	d300      	bcc.n	8001d30 <OD_read_dummy+0x16>
 8001d2e:	4614      	mov	r4, r2
        count = stream->dataLength;
    }

    memset(buf, 0, count);
 8001d30:	4622      	mov	r2, r4
 8001d32:	2100      	movs	r1, #0
 8001d34:	f008 fa56 	bl	800a1e4 <memset>

    *countRead = count;
 8001d38:	602c      	str	r4, [r5, #0]
    return ODR_OK;
 8001d3a:	2000      	movs	r0, #0
}
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}
        return ODR_DEV_INCOMPAT;
 8001d3e:	2009      	movs	r0, #9
}
 8001d40:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 8001d42:	2009      	movs	r0, #9
 8001d44:	e7fa      	b.n	8001d3c <OD_read_dummy+0x22>
 8001d46:	2009      	movs	r0, #9
 8001d48:	e7f8      	b.n	8001d3c <OD_read_dummy+0x22>

08001d4a <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8001d4a:	b570      	push	{r4, r5, r6, lr}
 8001d4c:	4606      	mov	r6, r0
 8001d4e:	460d      	mov	r5, r1
 8001d50:	461c      	mov	r4, r3
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8001d52:	f7ff fe69 	bl	8001a28 <OD_readOriginal>

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8001d56:	b910      	cbnz	r0, 8001d5e <OD_read_PDO_commParam+0x14>
 8001d58:	7c73      	ldrb	r3, [r6, #17]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d000      	beq.n	8001d60 <OD_read_PDO_commParam+0x16>

        CO_setUint32(buf, COB_ID);
    }

    return returnCode;
}
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d1fb      	bne.n	8001d5e <OD_read_PDO_commParam+0x14>
        CO_PDO_common_t *PDO = stream->object;
 8001d66:	6872      	ldr	r2, [r6, #4]
 8001d68:	682b      	ldr	r3, [r5, #0]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8001d6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8001d6e:	b131      	cbz	r1, 8001d7e <OD_read_PDO_commParam+0x34>
 8001d70:	f8b2 6122 	ldrh.w	r6, [r2, #290]	; 0x122
 8001d74:	f026 047f 	bic.w	r4, r6, #127	; 0x7f
 8001d78:	b2a4      	uxth	r4, r4
 8001d7a:	42a1      	cmp	r1, r4
 8001d7c:	d005      	beq.n	8001d8a <OD_read_PDO_commParam+0x40>
        if (!PDO->valid) COB_ID |= 0x80000000;
 8001d7e:	6892      	ldr	r2, [r2, #8]
 8001d80:	b90a      	cbnz	r2, 8001d86 <OD_read_PDO_commParam+0x3c>
 8001d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001d86:	602b      	str	r3, [r5, #0]
 8001d88:	e7e9      	b.n	8001d5e <OD_read_PDO_commParam+0x14>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8001d8a:	f366 030f 	bfi	r3, r6, #0, #16
 8001d8e:	e7f6      	b.n	8001d7e <OD_read_PDO_commParam+0x34>

08001d90 <PDOconfigMap>:
{
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d94:	b08b      	sub	sp, #44	; 0x2c
 8001d96:	460c      	mov	r4, r1
    uint8_t subIndex = (uint8_t) (map >> 8);
 8001d98:	f3c1 2907 	ubfx	r9, r1, #8, #8
    uint8_t mappedLength = mappedLengthBits >> 3;
 8001d9c:	f3c1 08c4 	ubfx	r8, r1, #3, #5
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8001da0:	f1b8 0f08 	cmp.w	r8, #8
 8001da4:	d875      	bhi.n	8001e92 <PDOconfigMap+0x102>
 8001da6:	4606      	mov	r6, r0
 8001da8:	4615      	mov	r5, r2
 8001daa:	461f      	mov	r7, r3
 8001dac:	0c09      	lsrs	r1, r1, #16
 8001dae:	ea4f 2a14 	mov.w	sl, r4, lsr #8
    if (index < 0x20 && subIndex == 0) {
 8001db2:	291f      	cmp	r1, #31
 8001db4:	d802      	bhi.n	8001dbc <PDOconfigMap+0x2c>
 8001db6:	f1b9 0f00 	cmp.w	r9, #0
 8001dba:	d044      	beq.n	8001e46 <PDOconfigMap+0xb6>
    OD_entry_t *entry = OD_find(OD, index);
 8001dbc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001dbe:	f7ff fe93 	bl	8001ae8 <OD_find>
 8001dc2:	9001      	str	r0, [sp, #4]
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	aa03      	add	r2, sp, #12
 8001dc8:	4649      	mov	r1, r9
 8001dca:	f7ff fec1 	bl	8001b50 <OD_getSub>
    if (odRet != ODR_OK) {
 8001dce:	4684      	mov	ip, r0
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d160      	bne.n	8001e96 <PDOconfigMap+0x106>
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8001dd4:	2f00      	cmp	r7, #0
 8001dd6:	d055      	beq.n	8001e84 <PDOconfigMap+0xf4>
 8001dd8:	2308      	movs	r3, #8
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8001dda:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8001dde:	421a      	tst	r2, r3
 8001de0:	d05d      	beq.n	8001e9e <PDOconfigMap+0x10e>
        || (mappedLengthBits & 0x07) != 0
 8001de2:	f014 0f07 	tst.w	r4, #7
 8001de6:	d15d      	bne.n	8001ea4 <PDOconfigMap+0x114>
        || OD_IOcopy.stream.dataLength < mappedLength
 8001de8:	9b05      	ldr	r3, [sp, #20]
 8001dea:	4543      	cmp	r3, r8
 8001dec:	d35d      	bcc.n	8001eaa <PDOconfigMap+0x11a>
    *OD_IO = OD_IOcopy;
 8001dee:	ebc5 0bc5 	rsb	fp, r5, r5, lsl #3
 8001df2:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
 8001df6:	f10b 0410 	add.w	r4, fp, #16
 8001dfa:	f10d 0e0c 	add.w	lr, sp, #12
 8001dfe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e04:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001e08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8001e0c:	f8cb 801c 	str.w	r8, [fp, #28]
    if (!isRPDO) {
 8001e10:	2f00      	cmp	r7, #0
 8001e12:	d140      	bne.n	8001e96 <PDOconfigMap+0x106>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8001e14:	f1b9 0f1f 	cmp.w	r9, #31
 8001e18:	d836      	bhi.n	8001e88 <PDOconfigMap+0xf8>
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	b39b      	cbz	r3, 8001e88 <PDOconfigMap+0xf8>
                    &entry->extension->flagsPDO[subIndex >> 3];
 8001e20:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8001e24:	f109 0908 	add.w	r9, r9, #8
 8001e28:	444b      	add	r3, r9
 8001e2a:	3304      	adds	r3, #4
            PDO->flagPDObyte[mapIndex] =
 8001e2c:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8001e30:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 8001e34:	f00a 0a07 	and.w	sl, sl, #7
 8001e38:	2301      	movs	r3, #1
 8001e3a:	fa03 fa0a 	lsl.w	sl, r3, sl
 8001e3e:	4435      	add	r5, r6
 8001e40:	f885 a110 	strb.w	sl, [r5, #272]	; 0x110
 8001e44:	e027      	b.n	8001e96 <PDOconfigMap+0x106>
        OD_stream_t *stream = &OD_IO->stream;
 8001e46:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	3310      	adds	r3, #16
 8001e4e:	18c2      	adds	r2, r0, r3
        memset(stream, 0, sizeof(OD_stream_t));
 8001e50:	f04f 0c00 	mov.w	ip, #0
 8001e54:	f840 c003 	str.w	ip, [r0, r3]
 8001e58:	f8c2 c004 	str.w	ip, [r2, #4]
 8001e5c:	f8c2 c008 	str.w	ip, [r2, #8]
 8001e60:	f8c2 c00c 	str.w	ip, [r2, #12]
 8001e64:	f8c2 c010 	str.w	ip, [r2, #16]
        stream->dataLength = stream->dataOffset = mappedLength;
 8001e68:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001e6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001e70:	f8c3 801c 	str.w	r8, [r3, #28]
 8001e74:	f8c3 8018 	str.w	r8, [r3, #24]
        OD_IO->read = OD_read_dummy;
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <PDOconfigMap+0x120>)
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
        OD_IO->write = OD_write_dummy;
 8001e7c:	461e      	mov	r6, r3
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <PDOconfigMap+0x124>)
 8001e80:	62b3      	str	r3, [r6, #40]	; 0x28
        return ODR_OK;
 8001e82:	e008      	b.n	8001e96 <PDOconfigMap+0x106>
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8001e84:	2304      	movs	r3, #4
 8001e86:	e7a8      	b.n	8001dda <PDOconfigMap+0x4a>
            PDO->flagPDObyte[mapIndex] = NULL;
 8001e88:	353c      	adds	r5, #60	; 0x3c
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
 8001e90:	e001      	b.n	8001e96 <PDOconfigMap+0x106>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8001e92:	f04f 0c07 	mov.w	ip, #7
}
 8001e96:	4660      	mov	r0, ip
 8001e98:	b00b      	add	sp, #44	; 0x2c
 8001e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8001e9e:	f04f 0c06 	mov.w	ip, #6
 8001ea2:	e7f8      	b.n	8001e96 <PDOconfigMap+0x106>
 8001ea4:	f04f 0c06 	mov.w	ip, #6
 8001ea8:	e7f5      	b.n	8001e96 <PDOconfigMap+0x106>
 8001eaa:	f04f 0c06 	mov.w	ip, #6
 8001eae:	e7f2      	b.n	8001e96 <PDOconfigMap+0x106>
 8001eb0:	08001d1b 	.word	0x08001d1b
 8001eb4:	08001d13 	.word	0x08001d13

08001eb8 <OD_write_PDO_mapping>:
    if (stream == NULL || buf == NULL || countWritten == NULL
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d047      	beq.n	8001f4c <OD_write_PDO_mapping+0x94>
{
 8001ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	460d      	mov	r5, r1
 8001ec4:	4617      	mov	r7, r2
 8001ec6:	461e      	mov	r6, r3
 8001ec8:	4680      	mov	r8, r0
    if (stream == NULL || buf == NULL || countWritten == NULL
 8001eca:	2900      	cmp	r1, #0
 8001ecc:	d040      	beq.n	8001f50 <OD_write_PDO_mapping+0x98>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d040      	beq.n	8001f54 <OD_write_PDO_mapping+0x9c>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8001ed2:	7c44      	ldrb	r4, [r0, #17]
 8001ed4:	2c08      	cmp	r4, #8
 8001ed6:	d83f      	bhi.n	8001f58 <OD_write_PDO_mapping+0xa0>
    CO_PDO_common_t *PDO = stream->object;
 8001ed8:	6840      	ldr	r0, [r0, #4]
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8001eda:	6881      	ldr	r1, [r0, #8]
 8001edc:	2900      	cmp	r1, #0
 8001ede:	d13d      	bne.n	8001f5c <OD_write_PDO_mapping+0xa4>
 8001ee0:	7b43      	ldrb	r3, [r0, #13]
 8001ee2:	b10b      	cbz	r3, 8001ee8 <OD_write_PDO_mapping+0x30>
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d13b      	bne.n	8001f60 <OD_write_PDO_mapping+0xa8>
    if (stream->subIndex == 0) {
 8001ee8:	b9e4      	cbnz	r4, 8001f24 <OD_write_PDO_mapping+0x6c>
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001eea:	f895 e000 	ldrb.w	lr, [r5]
        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8001eee:	f1be 0f08 	cmp.w	lr, #8
 8001ef2:	d837      	bhi.n	8001f64 <OD_write_PDO_mapping+0xac>
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001ef4:	4574      	cmp	r4, lr
 8001ef6:	d20b      	bcs.n	8001f10 <OD_write_PDO_mapping+0x58>
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8001ef8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001efc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001f00:	699a      	ldr	r2, [r3, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8001f02:	69db      	ldr	r3, [r3, #28]
            if (mappedLength > dataLength) {
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d32f      	bcc.n	8001f68 <OD_write_PDO_mapping+0xb0>
            pdoDataLength += mappedLength;
 8001f08:	4419      	add	r1, r3
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8001f0a:	3401      	adds	r4, #1
 8001f0c:	b2e4      	uxtb	r4, r4
 8001f0e:	e7f1      	b.n	8001ef4 <OD_write_PDO_mapping+0x3c>
        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8001f10:	2908      	cmp	r1, #8
 8001f12:	d82b      	bhi.n	8001f6c <OD_write_PDO_mapping+0xb4>
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 8001f14:	b911      	cbnz	r1, 8001f1c <OD_write_PDO_mapping+0x64>
 8001f16:	f1be 0f00 	cmp.w	lr, #0
 8001f1a:	d129      	bne.n	8001f70 <OD_write_PDO_mapping+0xb8>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001f1c:	7301      	strb	r1, [r0, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001f1e:	f880 e00d 	strb.w	lr, [r0, #13]
 8001f22:	e00a      	b.n	8001f3a <OD_write_PDO_mapping+0x82>
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 8001f24:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8001f28:	3c01      	subs	r4, #1
 8001f2a:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
 8001f2e:	9200      	str	r2, [sp, #0]
 8001f30:	b2e2      	uxtb	r2, r4
 8001f32:	6829      	ldr	r1, [r5, #0]
 8001f34:	f7ff ff2c 	bl	8001d90 <PDOconfigMap>
        if (odRet != ODR_OK) {
 8001f38:	b928      	cbnz	r0, 8001f46 <OD_write_PDO_mapping+0x8e>
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001f3a:	4633      	mov	r3, r6
 8001f3c:	463a      	mov	r2, r7
 8001f3e:	4629      	mov	r1, r5
 8001f40:	4640      	mov	r0, r8
 8001f42:	f7ff fda0 	bl	8001a86 <OD_writeOriginal>
}
 8001f46:	b002      	add	sp, #8
 8001f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ODR_DEV_INCOMPAT;
 8001f4c:	2009      	movs	r0, #9
}
 8001f4e:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 8001f50:	2009      	movs	r0, #9
 8001f52:	e7f8      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
 8001f54:	2009      	movs	r0, #9
 8001f56:	e7f6      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
 8001f58:	2009      	movs	r0, #9
 8001f5a:	e7f4      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
        return ODR_UNSUPP_ACCESS;
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	e7f2      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
 8001f60:	2002      	movs	r0, #2
 8001f62:	e7f0      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
            return ODR_MAP_LEN;
 8001f64:	2007      	movs	r0, #7
 8001f66:	e7ee      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
                return ODR_NO_MAP;
 8001f68:	2006      	movs	r0, #6
 8001f6a:	e7ec      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
            return ODR_MAP_LEN;
 8001f6c:	2007      	movs	r0, #7
 8001f6e:	e7ea      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>
            return ODR_INVALID_VALUE;
 8001f70:	200f      	movs	r0, #15
 8001f72:	e7e8      	b.n	8001f46 <OD_write_PDO_mapping+0x8e>

08001f74 <OD_write_14xx>:
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8001f74:	2800      	cmp	r0, #0
 8001f76:	f000 80b6 	beq.w	80020e6 <OD_write_14xx+0x172>
{
 8001f7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	460c      	mov	r4, r1
 8001f82:	4615      	mov	r5, r2
 8001f84:	461e      	mov	r6, r3
 8001f86:	4607      	mov	r7, r0
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	f000 80ae 	beq.w	80020ea <OD_write_14xx+0x176>
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80ad 	beq.w	80020ee <OD_write_14xx+0x17a>
 8001f94:	2a04      	cmp	r2, #4
 8001f96:	f200 80ac 	bhi.w	80020f2 <OD_write_14xx+0x17e>
        return ODR_DEV_INCOMPAT;
    }

    CO_RPDO_t *RPDO = stream->object;
 8001f9a:	f8d0 8004 	ldr.w	r8, [r0, #4]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8001f9e:	a805      	add	r0, sp, #20
 8001fa0:	f008 f8f8 	bl	800a194 <memcpy>

    switch (stream->subIndex) {
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d07e      	beq.n	80020a8 <OD_write_14xx+0x134>
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	f000 8090 	beq.w	80020d0 <OD_write_14xx+0x15c>
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d008      	beq.n	8001fc6 <OD_write_14xx+0x52>
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8001fb4:	4633      	mov	r3, r6
 8001fb6:	462a      	mov	r2, r5
 8001fb8:	a905      	add	r1, sp, #20
 8001fba:	4638      	mov	r0, r7
 8001fbc:	f7ff fd63 	bl	8001a86 <OD_writeOriginal>
}
 8001fc0:	b007      	add	sp, #28
 8001fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001fc6:	6824      	ldr	r4, [r4, #0]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8001fc8:	b2a2      	uxth	r2, r4
 8001fca:	f3c4 090a 	ubfx	r9, r4, #0, #11
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8001fce:	43e1      	mvns	r1, r4
 8001fd0:	0fc9      	lsrs	r1, r1, #31
        if ((COB_ID & 0x3FFFF800) != 0
 8001fd2:	4b53      	ldr	r3, [pc, #332]	; (8002120 <OD_write_14xx+0x1ac>)
 8001fd4:	4023      	ands	r3, r4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 808d 	bne.w	80020f6 <OD_write_14xx+0x182>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8001fdc:	2c00      	cmp	r4, #0
 8001fde:	db07      	blt.n	8001ff0 <OD_write_14xx+0x7c>
 8001fe0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001fe4:	b123      	cbz	r3, 8001ff0 <OD_write_14xx+0x7c>
 8001fe6:	f8b8 3124 	ldrh.w	r3, [r8, #292]	; 0x124
 8001fea:	454b      	cmp	r3, r9
 8001fec:	f040 8085 	bne.w	80020fa <OD_write_14xx+0x186>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	db1a      	blt.n	800202a <OD_write_14xx+0xb6>
 8001ff4:	f412 6ff0 	tst.w	r2, #1920	; 0x780
 8001ff8:	f000 8081 	beq.w	80020fe <OD_write_14xx+0x18a>
 8001ffc:	f2a9 1301 	subw	r3, r9, #257	; 0x101
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b7f      	cmp	r3, #127	; 0x7f
 8002004:	d97d      	bls.n	8002102 <OD_write_14xx+0x18e>
 8002006:	f2a9 5381 	subw	r3, r9, #1409	; 0x581
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b7e      	cmp	r3, #126	; 0x7e
 800200e:	d97a      	bls.n	8002106 <OD_write_14xx+0x192>
 8002010:	f2a9 6301 	subw	r3, r9, #1537	; 0x601
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b7e      	cmp	r3, #126	; 0x7e
 8002018:	d977      	bls.n	800210a <OD_write_14xx+0x196>
 800201a:	f5a9 63dc 	sub.w	r3, r9, #1760	; 0x6e0
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b1f      	cmp	r3, #31
 8002022:	d974      	bls.n	800210e <OD_write_14xx+0x19a>
 8002024:	f5b9 6fe0 	cmp.w	r9, #1792	; 0x700
 8002028:	d873      	bhi.n	8002112 <OD_write_14xx+0x19e>
            || (valid && PDO->mappedObjectsCount == 0)
 800202a:	2c00      	cmp	r4, #0
 800202c:	db03      	blt.n	8002036 <OD_write_14xx+0xc2>
 800202e:	f898 300d 	ldrb.w	r3, [r8, #13]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d06f      	beq.n	8002116 <OD_write_14xx+0x1a2>
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800203a:	428b      	cmp	r3, r1
 800203c:	d01d      	beq.n	800207a <OD_write_14xx+0x106>
            if (CAN_ID == PDO->preDefinedCanId) {
 800203e:	f8b8 3122 	ldrh.w	r3, [r8, #290]	; 0x122
 8002042:	454b      	cmp	r3, r9
 8002044:	d01e      	beq.n	8002084 <OD_write_14xx+0x110>
            if (!valid) {
 8002046:	2c00      	cmp	r4, #0
 8002048:	db20      	blt.n	800208c <OD_write_14xx+0x118>
            CO_ReturnError_t ret = CO_CANrxBufferInit(
 800204a:	f8b8 1120 	ldrh.w	r1, [r8, #288]	; 0x120
 800204e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <OD_write_14xx+0x1b0>)
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	f8cd 8004 	str.w	r8, [sp, #4]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002062:	464a      	mov	r2, r9
 8002064:	f003 fc92 	bl	800598c <CO_CANrxBufferInit>
            if (valid && ret == CO_ERROR_NO) {
 8002068:	2c00      	cmp	r4, #0
 800206a:	db12      	blt.n	8002092 <OD_write_14xx+0x11e>
 800206c:	b988      	cbnz	r0, 8002092 <OD_write_14xx+0x11e>
                PDO->valid = true;
 800206e:	2301      	movs	r3, #1
 8002070:	f8c8 3008 	str.w	r3, [r8, #8]
                PDO->configuredCanId = CAN_ID;
 8002074:	f8a8 9124 	strh.w	r9, [r8, #292]	; 0x124
 8002078:	e79c      	b.n	8001fb4 <OD_write_14xx+0x40>
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 800207a:	f8b8 3124 	ldrh.w	r3, [r8, #292]	; 0x124
 800207e:	454b      	cmp	r3, r9
 8002080:	d1dd      	bne.n	800203e <OD_write_14xx+0xca>
 8002082:	e797      	b.n	8001fb4 <OD_write_14xx+0x40>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002084:	f024 037f 	bic.w	r3, r4, #127	; 0x7f
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8002088:	9305      	str	r3, [sp, #20]
 800208a:	e7dc      	b.n	8002046 <OD_write_14xx+0xd2>
                CAN_ID = 0;
 800208c:	f04f 0900 	mov.w	r9, #0
 8002090:	e7db      	b.n	800204a <OD_write_14xx+0xd6>
                PDO->valid = false;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c8 3008 	str.w	r3, [r8, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002098:	f8c8 3148 	str.w	r3, [r8, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800209c:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d087      	beq.n	8001fb4 <OD_write_14xx+0x40>
                    return ODR_DEV_INCOMPAT;
 80020a4:	2009      	movs	r0, #9
 80020a6:	e78b      	b.n	8001fc0 <OD_write_14xx+0x4c>
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80020a8:	7823      	ldrb	r3, [r4, #0]
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80020aa:	f103 020f 	add.w	r2, r3, #15
 80020ae:	b2d2      	uxtb	r2, r2
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80020b0:	2a0c      	cmp	r2, #12
 80020b2:	d932      	bls.n	800211a <OD_write_14xx+0x1a6>
        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80020b4:	2bf0      	cmp	r3, #240	; 0xf0
 80020b6:	bf8c      	ite	hi
 80020b8:	2300      	movhi	r3, #0
 80020ba:	2301      	movls	r3, #1
        if (RPDO->synchronous != synchronous) {
 80020bc:	f8d8 2168 	ldr.w	r2, [r8, #360]	; 0x168
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d002      	beq.n	80020ca <OD_write_14xx+0x156>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80020c4:	2200      	movs	r2, #0
 80020c6:	f8c8 214c 	str.w	r2, [r8, #332]	; 0x14c
        RPDO->synchronous = synchronous;
 80020ca:	f8c8 3168 	str.w	r3, [r8, #360]	; 0x168
        break;
 80020ce:	e771      	b.n	8001fb4 <OD_write_14xx+0x40>
        uint32_t eventTime = CO_getUint16(buf);
 80020d0:	8823      	ldrh	r3, [r4, #0]
        RPDO->timeoutTime_us = eventTime * 1000;
 80020d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	f8c8 316c 	str.w	r3, [r8, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c8 3170 	str.w	r3, [r8, #368]	; 0x170
        break;
 80020e4:	e766      	b.n	8001fb4 <OD_write_14xx+0x40>
        return ODR_DEV_INCOMPAT;
 80020e6:	2009      	movs	r0, #9
}
 80020e8:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 80020ea:	2009      	movs	r0, #9
 80020ec:	e768      	b.n	8001fc0 <OD_write_14xx+0x4c>
 80020ee:	2009      	movs	r0, #9
 80020f0:	e766      	b.n	8001fc0 <OD_write_14xx+0x4c>
 80020f2:	2009      	movs	r0, #9
 80020f4:	e764      	b.n	8001fc0 <OD_write_14xx+0x4c>
            return ODR_INVALID_VALUE;
 80020f6:	200f      	movs	r0, #15
 80020f8:	e762      	b.n	8001fc0 <OD_write_14xx+0x4c>
 80020fa:	200f      	movs	r0, #15
 80020fc:	e760      	b.n	8001fc0 <OD_write_14xx+0x4c>
 80020fe:	200f      	movs	r0, #15
 8002100:	e75e      	b.n	8001fc0 <OD_write_14xx+0x4c>
 8002102:	200f      	movs	r0, #15
 8002104:	e75c      	b.n	8001fc0 <OD_write_14xx+0x4c>
 8002106:	200f      	movs	r0, #15
 8002108:	e75a      	b.n	8001fc0 <OD_write_14xx+0x4c>
 800210a:	200f      	movs	r0, #15
 800210c:	e758      	b.n	8001fc0 <OD_write_14xx+0x4c>
 800210e:	200f      	movs	r0, #15
 8002110:	e756      	b.n	8001fc0 <OD_write_14xx+0x4c>
 8002112:	200f      	movs	r0, #15
 8002114:	e754      	b.n	8001fc0 <OD_write_14xx+0x4c>
 8002116:	200f      	movs	r0, #15
 8002118:	e752      	b.n	8001fc0 <OD_write_14xx+0x4c>
            return ODR_INVALID_VALUE;
 800211a:	200f      	movs	r0, #15
 800211c:	e750      	b.n	8001fc0 <OD_write_14xx+0x4c>
 800211e:	bf00      	nop
 8002120:	3ffff800 	.word	0x3ffff800
 8002124:	08002129 	.word	0x08002129

08002128 <CO_PDO_receive>:
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002128:	f891 c004 	ldrb.w	ip, [r1, #4]
    uint8_t err = RPDO->receiveError;
 800212c:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
    if (PDO->valid) {
 8002130:	6882      	ldr	r2, [r0, #8]
 8002132:	b382      	cbz	r2, 8002196 <CO_PDO_receive+0x6e>
static void CO_PDO_receive(void *object, void *msg) {
 8002134:	b530      	push	{r4, r5, lr}
 8002136:	f101 0e05 	add.w	lr, r1, #5
        if (DLC >= PDO->dataLength) {
 800213a:	7b02      	ldrb	r2, [r0, #12]
 800213c:	4562      	cmp	r2, ip
 800213e:	d826      	bhi.n	800218e <CO_PDO_receive+0x66>
            if (DLC == PDO->dataLength) {
 8002140:	d00a      	beq.n	8002158 <CO_PDO_receive+0x30>
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002142:	b16b      	cbz	r3, 8002160 <CO_PDO_receive+0x38>
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002144:	f8d0 2168 	ldr.w	r2, [r0, #360]	; 0x168
 8002148:	b162      	cbz	r2, 8002164 <CO_PDO_receive+0x3c>
 800214a:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800214e:	b1e2      	cbz	r2, 800218a <CO_PDO_receive+0x62>
                && RPDO->SYNC->CANrxToggle
 8002150:	68d2      	ldr	r2, [r2, #12]
 8002152:	b142      	cbz	r2, 8002166 <CO_PDO_receive+0x3e>
                bufNo = 1;
 8002154:	2201      	movs	r2, #1
 8002156:	e006      	b.n	8002166 <CO_PDO_receive+0x3e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 8002158:	2b01      	cmp	r3, #1
 800215a:	d1f3      	bne.n	8002144 <CO_PDO_receive+0x1c>
 800215c:	230b      	movs	r3, #11
 800215e:	e7f1      	b.n	8002144 <CO_PDO_receive+0x1c>
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002160:	230d      	movs	r3, #13
 8002162:	e7ef      	b.n	8002144 <CO_PDO_receive+0x1c>
            uint8_t bufNo = 0;
 8002164:	2200      	movs	r2, #0
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 8002166:	f102 0c2a 	add.w	ip, r2, #42	; 0x2a
 800216a:	eb00 04cc 	add.w	r4, r0, ip, lsl #3
 800216e:	f8d1 5005 	ldr.w	r5, [r1, #5]
 8002172:	f8de 1004 	ldr.w	r1, [lr, #4]
 8002176:	f840 503c 	str.w	r5, [r0, ip, lsl #3]
 800217a:	6061      	str	r1, [r4, #4]
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 800217c:	3252      	adds	r2, #82	; 0x52
 800217e:	2101      	movs	r1, #1
 8002180:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    RPDO->receiveError = err;
 8002184:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
}
 8002188:	bd30      	pop	{r4, r5, pc}
            uint8_t bufNo = 0;
 800218a:	2200      	movs	r2, #0
 800218c:	e7eb      	b.n	8002166 <CO_PDO_receive+0x3e>
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f8      	bne.n	8002184 <CO_PDO_receive+0x5c>
            err = CO_RPDO_RX_SHORT;
 8002192:	230c      	movs	r3, #12
 8002194:	e7f6      	b.n	8002184 <CO_PDO_receive+0x5c>
    RPDO->receiveError = err;
 8002196:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
 800219a:	4770      	bx	lr

0800219c <PDO_initMapping>:
{
 800219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a0:	b087      	sub	sp, #28
 80021a2:	4607      	mov	r7, r0
 80021a4:	4689      	mov	r9, r1
 80021a6:	4690      	mov	r8, r2
 80021a8:	9302      	str	r3, [sp, #8]
 80021aa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    uint8_t mappedObjectsCount = 0;
 80021ae:	2100      	movs	r1, #0
 80021b0:	f88d 1017 	strb.w	r1, [sp, #23]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80021b4:	2301      	movs	r3, #1
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f10d 0217 	add.w	r2, sp, #23
 80021bc:	4640      	mov	r0, r8
 80021be:	f7ff fd57 	bl	8001c70 <OD_get_value>
    if (odRet != ODR_OK) {
 80021c2:	9003      	str	r0, [sp, #12]
 80021c4:	b910      	cbnz	r0, 80021cc <PDO_initMapping+0x30>
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80021c6:	2400      	movs	r4, #0
    size_t pdoDataLength = 0;
 80021c8:	46a2      	mov	sl, r4
 80021ca:	e02b      	b.n	8002224 <PDO_initMapping+0x88>
        if (errInfo != NULL) {
 80021cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80021ce:	b13b      	cbz	r3, 80021e0 <PDO_initMapping+0x44>
    return (entry != NULL) ? entry->index : 0;
 80021d0:	f1b8 0f00 	cmp.w	r8, #0
 80021d4:	d008      	beq.n	80021e8 <PDO_initMapping+0x4c>
 80021d6:	f8b8 3000 	ldrh.w	r3, [r8]
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80021de:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 80021e0:	f06f 030b 	mvn.w	r3, #11
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	e061      	b.n	80022ac <PDO_initMapping+0x110>
 80021e8:	2300      	movs	r3, #0
 80021ea:	e7f6      	b.n	80021da <PDO_initMapping+0x3e>
            if (errInfo != NULL) {
 80021ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80021ee:	b143      	cbz	r3, 8002202 <PDO_initMapping+0x66>
 80021f0:	f1b8 0f00 	cmp.w	r8, #0
 80021f4:	d009      	beq.n	800220a <PDO_initMapping+0x6e>
 80021f6:	f8b8 3000 	ldrh.w	r3, [r8]
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 80021fa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80021fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002200:	601c      	str	r4, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8002202:	f06f 030b 	mvn.w	r3, #11
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	e050      	b.n	80022ac <PDO_initMapping+0x110>
 800220a:	2300      	movs	r3, #0
 800220c:	e7f5      	b.n	80021fa <PDO_initMapping+0x5e>
        if (i < mappedObjectsCount) {
 800220e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002212:	42a3      	cmp	r3, r4
 8002214:	d905      	bls.n	8002222 <PDO_initMapping+0x86>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002216:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800221a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 800221e:	69f3      	ldr	r3, [r6, #28]
 8002220:	449a      	add	sl, r3
 8002222:	462c      	mov	r4, r5
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002224:	2c07      	cmp	r4, #7
 8002226:	d82a      	bhi.n	800227e <PDO_initMapping+0xe2>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002228:	4626      	mov	r6, r4
        uint32_t map = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	9304      	str	r3, [sp, #16]
        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 800222e:	1c65      	adds	r5, r4, #1
 8002230:	b2ed      	uxtb	r5, r5
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002232:	2301      	movs	r3, #1
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2304      	movs	r3, #4
 8002238:	aa04      	add	r2, sp, #16
 800223a:	4629      	mov	r1, r5
 800223c:	4640      	mov	r0, r8
 800223e:	f7ff fd17 	bl	8001c70 <OD_get_value>
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002242:	280e      	cmp	r0, #14
 8002244:	d0ed      	beq.n	8002222 <PDO_initMapping+0x86>
        if (odRet != ODR_OK) {
 8002246:	2800      	cmp	r0, #0
 8002248:	d1d0      	bne.n	80021ec <PDO_initMapping+0x50>
        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800224a:	f8cd 9000 	str.w	r9, [sp]
 800224e:	9b02      	ldr	r3, [sp, #8]
 8002250:	4622      	mov	r2, r4
 8002252:	9904      	ldr	r1, [sp, #16]
 8002254:	4638      	mov	r0, r7
 8002256:	f7ff fd9b 	bl	8001d90 <PDOconfigMap>
        if (odRet != ODR_OK) {
 800225a:	2800      	cmp	r0, #0
 800225c:	d0d7      	beq.n	800220e <PDO_initMapping+0x72>
            OD_IO->stream.dataLength = 0;
 800225e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002262:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
            OD_IO->stream.dataOffset = 0xFF;
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	61da      	str	r2, [r3, #28]
            if (*erroneousMap == 0) *erroneousMap = map;
 800226e:	f8db 3000 	ldr.w	r3, [fp]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1cb      	bne.n	800220e <PDO_initMapping+0x72>
 8002276:	9b04      	ldr	r3, [sp, #16]
 8002278:	f8cb 3000 	str.w	r3, [fp]
 800227c:	e7c7      	b.n	800220e <PDO_initMapping+0x72>
    if (pdoDataLength > CO_PDO_MAX_SIZE
 800227e:	f1ba 0f08 	cmp.w	sl, #8
 8002282:	d805      	bhi.n	8002290 <PDO_initMapping+0xf4>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002284:	f1ba 0f00 	cmp.w	sl, #0
 8002288:	d108      	bne.n	800229c <PDO_initMapping+0x100>
 800228a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800228e:	b12b      	cbz	r3, 800229c <PDO_initMapping+0x100>
        if (*erroneousMap == 0) *erroneousMap = 1;
 8002290:	f8db 3000 	ldr.w	r3, [fp]
 8002294:	b913      	cbnz	r3, 800229c <PDO_initMapping+0x100>
 8002296:	2301      	movs	r3, #1
 8002298:	f8cb 3000 	str.w	r3, [fp]
    if (*erroneousMap == 0) {
 800229c:	f8db 3000 	ldr.w	r3, [fp]
 80022a0:	b923      	cbnz	r3, 80022ac <PDO_initMapping+0x110>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80022a2:	f887 a00c 	strb.w	sl, [r7, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80022a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80022aa:	737b      	strb	r3, [r7, #13]
}
 80022ac:	9803      	ldr	r0, [sp, #12]
 80022ae:	b007      	add	sp, #28
 80022b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022b4 <OD_write_18xx>:
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80022b4:	2800      	cmp	r0, #0
 80022b6:	f000 80d4 	beq.w	8002462 <OD_write_18xx+0x1ae>
{
 80022ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022be:	b085      	sub	sp, #20
 80022c0:	460c      	mov	r4, r1
 80022c2:	4615      	mov	r5, r2
 80022c4:	461e      	mov	r6, r3
 80022c6:	4607      	mov	r7, r0
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80022c8:	2900      	cmp	r1, #0
 80022ca:	f000 80cc 	beq.w	8002466 <OD_write_18xx+0x1b2>
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80cb 	beq.w	800246a <OD_write_18xx+0x1b6>
 80022d4:	2a04      	cmp	r2, #4
 80022d6:	f200 80ca 	bhi.w	800246e <OD_write_18xx+0x1ba>
        return ODR_DEV_INCOMPAT;
    }

    CO_TPDO_t *TPDO = stream->object;
 80022da:	f8d0 8004 	ldr.w	r8, [r0, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 80022de:	a803      	add	r0, sp, #12
 80022e0:	f007 ff58 	bl	800a194 <memcpy>

    switch (stream->subIndex) {
 80022e4:	7c7b      	ldrb	r3, [r7, #17]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	f200 80a8 	bhi.w	800243e <OD_write_18xx+0x18a>
 80022ee:	e8df f003 	tbb	[pc, r3]
 80022f2:	7303      	.short	0x7303
 80022f4:	af9ca68e 	.word	0xaf9ca68e
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80022f8:	6823      	ldr	r3, [r4, #0]
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80022fa:	b299      	uxth	r1, r3
 80022fc:	f3c3 040a 	ubfx	r4, r3, #0, #11
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002300:	ea6f 0903 	mvn.w	r9, r3
 8002304:	ea4f 79d9 	mov.w	r9, r9, lsr #31

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002308:	4a68      	ldr	r2, [pc, #416]	; (80024ac <OD_write_18xx+0x1f8>)
 800230a:	401a      	ands	r2, r3
 800230c:	2a00      	cmp	r2, #0
 800230e:	f040 80b0 	bne.w	8002472 <OD_write_18xx+0x1be>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002312:	2b00      	cmp	r3, #0
 8002314:	db07      	blt.n	8002326 <OD_write_18xx+0x72>
 8002316:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800231a:	b122      	cbz	r2, 8002326 <OD_write_18xx+0x72>
 800231c:	f8b8 2124 	ldrh.w	r2, [r8, #292]	; 0x124
 8002320:	42a2      	cmp	r2, r4
 8002322:	f040 80a8 	bne.w	8002476 <OD_write_18xx+0x1c2>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002326:	2b00      	cmp	r3, #0
 8002328:	db1f      	blt.n	800236a <OD_write_18xx+0xb6>
 800232a:	f411 6ff0 	tst.w	r1, #1920	; 0x780
 800232e:	f000 80a4 	beq.w	800247a <OD_write_18xx+0x1c6>
 8002332:	f2a4 1201 	subw	r2, r4, #257	; 0x101
 8002336:	b292      	uxth	r2, r2
 8002338:	2a7f      	cmp	r2, #127	; 0x7f
 800233a:	f240 80a0 	bls.w	800247e <OD_write_18xx+0x1ca>
 800233e:	f2a4 5281 	subw	r2, r4, #1409	; 0x581
 8002342:	b292      	uxth	r2, r2
 8002344:	2a7e      	cmp	r2, #126	; 0x7e
 8002346:	f240 809c 	bls.w	8002482 <OD_write_18xx+0x1ce>
 800234a:	f2a4 6201 	subw	r2, r4, #1537	; 0x601
 800234e:	b292      	uxth	r2, r2
 8002350:	2a7e      	cmp	r2, #126	; 0x7e
 8002352:	f240 8098 	bls.w	8002486 <OD_write_18xx+0x1d2>
 8002356:	f5a4 62dc 	sub.w	r2, r4, #1760	; 0x6e0
 800235a:	b292      	uxth	r2, r2
 800235c:	2a1f      	cmp	r2, #31
 800235e:	f240 8094 	bls.w	800248a <OD_write_18xx+0x1d6>
 8002362:	f5b4 6fe0 	cmp.w	r4, #1792	; 0x700
 8002366:	f200 8092 	bhi.w	800248e <OD_write_18xx+0x1da>
            || (valid && PDO->mappedObjectsCount == 0)
 800236a:	2b00      	cmp	r3, #0
 800236c:	db04      	blt.n	8002378 <OD_write_18xx+0xc4>
 800236e:	f898 200d 	ldrb.w	r2, [r8, #13]
 8002372:	2a00      	cmp	r2, #0
 8002374:	f000 808d 	beq.w	8002492 <OD_write_18xx+0x1de>
        ) {
            return ODR_INVALID_VALUE;
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002378:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800237c:	454a      	cmp	r2, r9
 800237e:	d020      	beq.n	80023c2 <OD_write_18xx+0x10e>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002380:	f8b8 2122 	ldrh.w	r2, [r8, #290]	; 0x122
 8002384:	42a2      	cmp	r2, r4
 8002386:	d021      	beq.n	80023cc <OD_write_18xx+0x118>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
            }
            if (!valid) {
 8002388:	2b00      	cmp	r3, #0
 800238a:	db23      	blt.n	80023d4 <OD_write_18xx+0x120>
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 800238c:	f898 314c 	ldrb.w	r3, [r8, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002390:	f8b8 1120 	ldrh.w	r1, [r8, #288]	; 0x120
 8002394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002398:	2bf0      	cmp	r3, #240	; 0xf0
 800239a:	bf8c      	ite	hi
 800239c:	2300      	movhi	r3, #0
 800239e:	2301      	movls	r3, #1
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	f898 300c 	ldrb.w	r3, [r8, #12]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2300      	movs	r3, #0
 80023aa:	4622      	mov	r2, r4
 80023ac:	f003 fb28 	bl	8005a00 <CO_CANtxBufferInit>
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d070      	beq.n	8002496 <OD_write_18xx+0x1e2>
                return ODR_DEV_INCOMPAT;
            }

            TPDO->CANtxBuff = CANtxBuff;
 80023b4:	f8c8 0148 	str.w	r0, [r8, #328]	; 0x148
            PDO->valid = valid;
 80023b8:	f8c8 9008 	str.w	r9, [r8, #8]
            PDO->configuredCanId = CAN_ID;
 80023bc:	f8a8 4124 	strh.w	r4, [r8, #292]	; 0x124
 80023c0:	e03d      	b.n	800243e <OD_write_18xx+0x18a>
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80023c2:	f8b8 2124 	ldrh.w	r2, [r8, #292]	; 0x124
 80023c6:	42a2      	cmp	r2, r4
 80023c8:	d1da      	bne.n	8002380 <OD_write_18xx+0xcc>
 80023ca:	e038      	b.n	800243e <OD_write_18xx+0x18a>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 80023cc:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80023d0:	9203      	str	r2, [sp, #12]
 80023d2:	e7d9      	b.n	8002388 <OD_write_18xx+0xd4>
                CAN_ID = 0;
 80023d4:	2400      	movs	r4, #0
 80023d6:	e7d9      	b.n	800238c <OD_write_18xx+0xd8>
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80023d8:	7822      	ldrb	r2, [r4, #0]

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80023da:	f102 030f 	add.w	r3, r2, #15
 80023de:	b2db      	uxtb	r3, r3
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80023e0:	2b0c      	cmp	r3, #12
 80023e2:	d95a      	bls.n	800249a <OD_write_18xx+0x1e6>
        ) {
            return ODR_INVALID_VALUE;
        }
        TPDO->CANtxBuff->syncFlag =
 80023e4:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80023e8:	2af0      	cmp	r2, #240	; 0xf0
 80023ea:	bf8c      	ite	hi
 80023ec:	2100      	movhi	r1, #0
 80023ee:	2101      	movls	r1, #1
        TPDO->CANtxBuff->syncFlag =
 80023f0:	6159      	str	r1, [r3, #20]
        TPDO->syncCounter = 255;
 80023f2:	23ff      	movs	r3, #255	; 0xff
 80023f4:	f888 3159 	strb.w	r3, [r8, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 80023f8:	f888 214c 	strb.w	r2, [r8, #332]	; 0x14c
        TPDO->sendRequest = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c8 3168 	str.w	r3, [r8, #360]	; 0x168
 8002408:	f8c8 3164 	str.w	r3, [r8, #356]	; 0x164
#endif
        break;
 800240c:	e017      	b.n	800243e <OD_write_18xx+0x18a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 800240e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d143      	bne.n	800249e <OD_write_18xx+0x1ea>
            return ODR_INVALID_VALUE;
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002416:	8823      	ldrh	r3, [r4, #0]
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002418:	2264      	movs	r2, #100	; 0x64
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	f8c8 315c 	str.w	r3, [r8, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	f8c8 3164 	str.w	r3, [r8, #356]	; 0x164
        break;
 8002428:	e009      	b.n	800243e <OD_write_18xx+0x18a>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 800242a:	8823      	ldrh	r3, [r4, #0]
        TPDO->eventTime_us = eventTime * 1000;
 800242c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	f8c8 3160 	str.w	r3, [r8, #352]	; 0x160
        TPDO->eventTimer = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c8 3168 	str.w	r3, [r8, #360]	; 0x168
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 800243e:	4633      	mov	r3, r6
 8002440:	462a      	mov	r2, r5
 8002442:	a903      	add	r1, sp, #12
 8002444:	4638      	mov	r0, r7
 8002446:	f7ff fb1e 	bl	8001a86 <OD_writeOriginal>
}
 800244a:	b005      	add	sp, #20
 800244c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002450:	7823      	ldrb	r3, [r4, #0]
        if (PDO->valid || syncStartValue > 240) {
 8002452:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002456:	bb22      	cbnz	r2, 80024a2 <OD_write_18xx+0x1ee>
 8002458:	2bf0      	cmp	r3, #240	; 0xf0
 800245a:	d824      	bhi.n	80024a6 <OD_write_18xx+0x1f2>
        TPDO->syncStartValue = syncStartValue;
 800245c:	f888 3158 	strb.w	r3, [r8, #344]	; 0x158
        break;
 8002460:	e7ed      	b.n	800243e <OD_write_18xx+0x18a>
        return ODR_DEV_INCOMPAT;
 8002462:	2009      	movs	r0, #9
}
 8002464:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 8002466:	2009      	movs	r0, #9
 8002468:	e7ef      	b.n	800244a <OD_write_18xx+0x196>
 800246a:	2009      	movs	r0, #9
 800246c:	e7ed      	b.n	800244a <OD_write_18xx+0x196>
 800246e:	2009      	movs	r0, #9
 8002470:	e7eb      	b.n	800244a <OD_write_18xx+0x196>
            return ODR_INVALID_VALUE;
 8002472:	200f      	movs	r0, #15
 8002474:	e7e9      	b.n	800244a <OD_write_18xx+0x196>
 8002476:	200f      	movs	r0, #15
 8002478:	e7e7      	b.n	800244a <OD_write_18xx+0x196>
 800247a:	200f      	movs	r0, #15
 800247c:	e7e5      	b.n	800244a <OD_write_18xx+0x196>
 800247e:	200f      	movs	r0, #15
 8002480:	e7e3      	b.n	800244a <OD_write_18xx+0x196>
 8002482:	200f      	movs	r0, #15
 8002484:	e7e1      	b.n	800244a <OD_write_18xx+0x196>
 8002486:	200f      	movs	r0, #15
 8002488:	e7df      	b.n	800244a <OD_write_18xx+0x196>
 800248a:	200f      	movs	r0, #15
 800248c:	e7dd      	b.n	800244a <OD_write_18xx+0x196>
 800248e:	200f      	movs	r0, #15
 8002490:	e7db      	b.n	800244a <OD_write_18xx+0x196>
 8002492:	200f      	movs	r0, #15
 8002494:	e7d9      	b.n	800244a <OD_write_18xx+0x196>
                return ODR_DEV_INCOMPAT;
 8002496:	2009      	movs	r0, #9
 8002498:	e7d7      	b.n	800244a <OD_write_18xx+0x196>
            return ODR_INVALID_VALUE;
 800249a:	200f      	movs	r0, #15
 800249c:	e7d5      	b.n	800244a <OD_write_18xx+0x196>
            return ODR_INVALID_VALUE;
 800249e:	200f      	movs	r0, #15
 80024a0:	e7d3      	b.n	800244a <OD_write_18xx+0x196>
            return ODR_INVALID_VALUE;
 80024a2:	200f      	movs	r0, #15
 80024a4:	e7d1      	b.n	800244a <OD_write_18xx+0x196>
 80024a6:	200f      	movs	r0, #15
 80024a8:	e7cf      	b.n	800244a <OD_write_18xx+0x196>
 80024aa:	bf00      	nop
 80024ac:	3ffff800 	.word	0x3ffff800

080024b0 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b4:	b085      	sub	sp, #20
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 80024b6:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80024ba:	f103 0a05 	add.w	sl, r3, #5
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 80024be:	f890 b14c 	ldrb.w	fp, [r0, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80024c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80024c6:	fa5f fb8b 	uxtb.w	fp, fp
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80024ca:	2400      	movs	r4, #0
 80024cc:	4680      	mov	r8, r0
 80024ce:	e00d      	b.n	80024ec <CO_TPDOsend+0x3c>

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
            memset(buf, 0, sizeof(buf));
 80024d0:	2300      	movs	r3, #0
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	9303      	str	r3, [sp, #12]
            dataTPDOCopy = buf;
 80024d6:	a902      	add	r1, sp, #8
 80024d8:	e01f      	b.n	800251a <CO_TPDOsend+0x6a>
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
            memcpy(dataTPDO, buf, mappedLength);
 80024da:	462a      	mov	r2, r5
 80024dc:	a902      	add	r1, sp, #8
 80024de:	4650      	mov	r0, sl
 80024e0:	f007 fe58 	bl	800a194 <memcpy>
 80024e4:	e027      	b.n	8002536 <CO_TPDOsend+0x86>
        if (flagPDObyte != NULL && eventDriven) {
           *flagPDObyte |= PDO->flagPDObitmask[i];
        }
 #endif

        dataTPDO += mappedLength;
 80024e6:	44aa      	add	sl, r5
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80024e8:	3401      	adds	r4, #1
 80024ea:	b2e4      	uxtb	r4, r4
 80024ec:	f898 300d 	ldrb.w	r3, [r8, #13]
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	d930      	bls.n	8002556 <CO_TPDOsend+0xa6>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80024f4:	46a1      	mov	r9, r4
        OD_stream_t *stream = &OD_IO->stream;
 80024f6:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80024fa:	0080      	lsls	r0, r0, #2
 80024fc:	3010      	adds	r0, #16
 80024fe:	4440      	add	r0, r8
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 8002500:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002504:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8002508:	69dd      	ldr	r5, [r3, #28]
        OD_size_t ODdataLength = stream->dataLength;
 800250a:	699e      	ldr	r6, [r3, #24]
        if (ODdataLength > CO_PDO_MAX_SIZE)
 800250c:	2e08      	cmp	r6, #8
 800250e:	d900      	bls.n	8002512 <CO_TPDOsend+0x62>
            ODdataLength = CO_PDO_MAX_SIZE;
 8002510:	2608      	movs	r6, #8
        if (ODdataLength > mappedLength) {
 8002512:	b2ed      	uxtb	r5, r5
 8002514:	42ae      	cmp	r6, r5
 8002516:	d8db      	bhi.n	80024d0 <CO_TPDOsend+0x20>
            dataTPDOCopy = dataTPDO;
 8002518:	4651      	mov	r1, sl
        stream->dataOffset= 0;
 800251a:	ebc9 07c9 	rsb	r7, r9, r9, lsl #3
 800251e:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8002526:	ab01      	add	r3, sp, #4
 8002528:	4632      	mov	r2, r6
 800252a:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
 800252e:	47e0      	blx	ip
        stream->dataOffset = mappedLength;
 8002530:	61fd      	str	r5, [r7, #28]
        if (ODdataLength > mappedLength) {
 8002532:	42ae      	cmp	r6, r5
 8002534:	d8d1      	bhi.n	80024da <CO_TPDOsend+0x2a>
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8002536:	f109 033c 	add.w	r3, r9, #60	; 0x3c
 800253a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
        if (flagPDObyte != NULL && eventDriven) {
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0d1      	beq.n	80024e6 <CO_TPDOsend+0x36>
 8002542:	f1bb 0ffc 	cmp.w	fp, #252	; 0xfc
 8002546:	d9ce      	bls.n	80024e6 <CO_TPDOsend+0x36>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8002548:	44c1      	add	r9, r8
 800254a:	f899 2110 	ldrb.w	r2, [r9, #272]	; 0x110
 800254e:	7819      	ldrb	r1, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e7c7      	b.n	80024e6 <CO_TPDOsend+0x36>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 800255c:	f8d8 3160 	ldr.w	r3, [r8, #352]	; 0x160
 8002560:	f8c8 3168 	str.w	r3, [r8, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8002564:	f8d8 315c 	ldr.w	r3, [r8, #348]	; 0x15c
 8002568:	f8c8 3164 	str.w	r3, [r8, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 800256c:	f8d8 1148 	ldr.w	r1, [r8, #328]	; 0x148
 8002570:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002574:	f003 fa66 	bl	8005a44 <CO_CANsend>
}
 8002578:	b005      	add	sp, #20
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002580 <CO_RPDO_init>:
{
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	b08b      	sub	sp, #44	; 0x2c
 8002586:	9305      	str	r3, [sp, #20]
 8002588:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
 800258c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800258e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 8002592:	2800      	cmp	r0, #0
 8002594:	f000 80e3 	beq.w	800275e <CO_RPDO_init+0x1de>
 8002598:	460d      	mov	r5, r1
 800259a:	4617      	mov	r7, r2
 800259c:	4604      	mov	r4, r0
 800259e:	2900      	cmp	r1, #0
 80025a0:	f000 80e0 	beq.w	8002764 <CO_RPDO_init+0x1e4>
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	f000 80e0 	beq.w	800276a <CO_RPDO_init+0x1ea>
 80025aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80df 	beq.w	8002770 <CO_RPDO_init+0x1f0>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 80025b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80de 	beq.w	8002776 <CO_RPDO_init+0x1f6>
 80025ba:	2e00      	cmp	r6, #0
 80025bc:	f000 80de 	beq.w	800277c <CO_RPDO_init+0x1fc>
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 80025c0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80025c4:	2100      	movs	r1, #0
 80025c6:	f007 fe0d 	bl	800a1e4 <memset>
    PDO->em = em;
 80025ca:	6027      	str	r7, [r4, #0]
    PDO->CANdev = CANdevRx;
 80025cc:	6066      	str	r6, [r4, #4]
    uint32_t erroneousMap = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	9309      	str	r3, [sp, #36]	; 0x24
    ret = PDO_initMapping(PDO,
 80025d2:	ab09      	add	r3, sp, #36	; 0x24
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2301      	movs	r3, #1
 80025dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80025de:	4629      	mov	r1, r5
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff fddb 	bl	800219c <PDO_initMapping>
    if (ret != CO_ERROR_NO) {
 80025e6:	4607      	mov	r7, r0
 80025e8:	b118      	cbz	r0, 80025f2 <CO_RPDO_init+0x72>
}
 80025ea:	4638      	mov	r0, r7
 80025ec:	b00b      	add	sp, #44	; 0x2c
 80025ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t COB_ID = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	9308      	str	r3, [sp, #32]
 80025f6:	2101      	movs	r1, #1
 80025f8:	9100      	str	r1, [sp, #0]
 80025fa:	2304      	movs	r3, #4
 80025fc:	aa08      	add	r2, sp, #32
 80025fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8002600:	f7ff fb36 	bl	8001c70 <OD_get_value>
    if (odRet != ODR_OK) {
 8002604:	b9a8      	cbnz	r0, 8002632 <CO_RPDO_init+0xb2>
    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002606:	9b08      	ldr	r3, [sp, #32]
 8002608:	ea6f 0a03 	mvn.w	sl, r3
 800260c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002610:	f3c3 080a 	ubfx	r8, r3, #0, #11
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002614:	2b00      	cmp	r3, #0
 8002616:	db1a      	blt.n	800264e <CO_RPDO_init+0xce>
 8002618:	7b62      	ldrb	r2, [r4, #13]
 800261a:	b112      	cbz	r2, 8002622 <CO_RPDO_init+0xa2>
 800261c:	f1b8 0f00 	cmp.w	r8, #0
 8002620:	d115      	bne.n	800264e <CO_RPDO_init+0xce>
        if (erroneousMap == 0) erroneousMap = 1;
 8002622:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8002626:	f1ba 0f00 	cmp.w	sl, #0
 800262a:	d10e      	bne.n	800264a <CO_RPDO_init+0xca>
 800262c:	2201      	movs	r2, #1
 800262e:	9209      	str	r2, [sp, #36]	; 0x24
 8002630:	e00d      	b.n	800264e <CO_RPDO_init+0xce>
        if (errInfo != NULL) {
 8002632:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002634:	b133      	cbz	r3, 8002644 <CO_RPDO_init+0xc4>
    return (entry != NULL) ? entry->index : 0;
 8002636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002638:	881b      	ldrh	r3, [r3, #0]
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002642:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8002644:	f06f 070b 	mvn.w	r7, #11
 8002648:	e7cf      	b.n	80025ea <CO_RPDO_init+0x6a>
        valid = false;
 800264a:	f04f 0a00 	mov.w	sl, #0
    if (erroneousMap != 0) {
 800264e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002650:	b152      	cbz	r2, 8002668 <CO_RPDO_init+0xe8>
        CO_errorReport(PDO->em,
 8002652:	6820      	ldr	r0, [r4, #0]
 8002654:	2a01      	cmp	r2, #1
 8002656:	d000      	beq.n	800265a <CO_RPDO_init+0xda>
 8002658:	4613      	mov	r3, r2
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002660:	221a      	movs	r2, #26
 8002662:	2101      	movs	r1, #1
 8002664:	f7fe fdc0 	bl	80011e8 <CO_error>
    if (!valid) {
 8002668:	f1ba 0f00 	cmp.w	sl, #0
 800266c:	d009      	beq.n	8002682 <CO_RPDO_init+0x102>
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 800266e:	f1b8 0f00 	cmp.w	r8, #0
 8002672:	d008      	beq.n	8002686 <CO_RPDO_init+0x106>
 8002674:	f02b 037f 	bic.w	r3, fp, #127	; 0x7f
 8002678:	b29b      	uxth	r3, r3
 800267a:	4598      	cmp	r8, r3
 800267c:	d103      	bne.n	8002686 <CO_RPDO_init+0x106>
        CAN_ID = preDefinedCanId;
 800267e:	46d8      	mov	r8, fp
 8002680:	e001      	b.n	8002686 <CO_RPDO_init+0x106>
        CAN_ID = 0;
 8002682:	f04f 0800 	mov.w	r8, #0
    ret = CO_CANrxBufferInit(
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <CO_RPDO_init+0x204>)
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	9401      	str	r4, [sp, #4]
 800268c:	2300      	movs	r3, #0
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002694:	4642      	mov	r2, r8
 8002696:	4649      	mov	r1, r9
 8002698:	4630      	mov	r0, r6
 800269a:	f003 f977 	bl	800598c <CO_CANrxBufferInit>
    if (ret != CO_ERROR_NO) {
 800269e:	4607      	mov	r7, r0
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d1a2      	bne.n	80025ea <CO_RPDO_init+0x6a>
    PDO->valid = valid;
 80026a4:	f8c4 a008 	str.w	sl, [r4, #8]
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80026a8:	23fe      	movs	r3, #254	; 0xfe
 80026aa:	f88d 301f 	strb.w	r3, [sp, #31]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80026ae:	2301      	movs	r3, #1
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f10d 021f 	add.w	r2, sp, #31
 80026b6:	2102      	movs	r1, #2
 80026b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80026ba:	f7ff fad9 	bl	8001c70 <OD_get_value>
    if (odRet != ODR_OK) {
 80026be:	4607      	mov	r7, r0
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d140      	bne.n	8002746 <CO_RPDO_init+0x1c6>
    RPDO->SYNC = SYNC;
 80026c4:	9b05      	ldr	r3, [sp, #20]
 80026c6:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80026ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80026ce:	2bf0      	cmp	r3, #240	; 0xf0
 80026d0:	bf8c      	ite	hi
 80026d2:	2300      	movhi	r3, #0
 80026d4:	2301      	movls	r3, #1
 80026d6:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
    uint16_t eventTime = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8ad 301c 	strh.w	r3, [sp, #28]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80026e0:	2601      	movs	r6, #1
 80026e2:	9600      	str	r6, [sp, #0]
 80026e4:	2302      	movs	r3, #2
 80026e6:	aa07      	add	r2, sp, #28
 80026e8:	2105      	movs	r1, #5
 80026ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80026ec:	f7ff fac0 	bl	8001c70 <OD_get_value>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 80026f0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80026f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    PDO->isRPDO = true;
 8002700:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
    PDO->OD = OD;
 8002704:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 8002708:	f8a4 9120 	strh.w	r9, [r4, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 800270c:	f8a4 b122 	strh.w	fp, [r4, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8002710:	f8a4 8124 	strh.w	r8, [r4, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 8002714:	f8c4 4128 	str.w	r4, [r4, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <CO_RPDO_init+0x208>)
 800271a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <CO_RPDO_init+0x20c>)
 8002720:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 8002724:	f8c4 4138 	str.w	r4, [r4, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <CO_RPDO_init+0x210>)
 800272a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <CO_RPDO_init+0x214>)
 8002730:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002734:	f504 7394 	add.w	r3, r4, #296	; 0x128
    entry->extension = extension;
 8002738:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800273a:	6093      	str	r3, [r2, #8]
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 800273c:	f504 749c 	add.w	r4, r4, #312	; 0x138
 8002740:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002742:	609c      	str	r4, [r3, #8]
    return CO_ERROR_NO;
 8002744:	e751      	b.n	80025ea <CO_RPDO_init+0x6a>
        if (errInfo != NULL) {
 8002746:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002748:	b133      	cbz	r3, 8002758 <CO_RPDO_init+0x1d8>
    return (entry != NULL) ? entry->index : 0;
 800274a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800274c:	881b      	ldrh	r3, [r3, #0]
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002756:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8002758:	f06f 070b 	mvn.w	r7, #11
 800275c:	e745      	b.n	80025ea <CO_RPDO_init+0x6a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800275e:	f04f 37ff 	mov.w	r7, #4294967295
 8002762:	e742      	b.n	80025ea <CO_RPDO_init+0x6a>
 8002764:	f04f 37ff 	mov.w	r7, #4294967295
 8002768:	e73f      	b.n	80025ea <CO_RPDO_init+0x6a>
 800276a:	f04f 37ff 	mov.w	r7, #4294967295
 800276e:	e73c      	b.n	80025ea <CO_RPDO_init+0x6a>
 8002770:	f04f 37ff 	mov.w	r7, #4294967295
 8002774:	e739      	b.n	80025ea <CO_RPDO_init+0x6a>
 8002776:	f04f 37ff 	mov.w	r7, #4294967295
 800277a:	e736      	b.n	80025ea <CO_RPDO_init+0x6a>
 800277c:	f04f 37ff 	mov.w	r7, #4294967295
 8002780:	e733      	b.n	80025ea <CO_RPDO_init+0x6a>
 8002782:	bf00      	nop
 8002784:	08002129 	.word	0x08002129
 8002788:	08001d4b 	.word	0x08001d4b
 800278c:	08001f75 	.word	0x08001f75
 8002790:	08001a29 	.word	0x08001a29
 8002794:	08001eb9 	.word	0x08001eb9

08002798 <CO_RPDO_process>:
{
 8002798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279c:	b089      	sub	sp, #36	; 0x24
 800279e:	4607      	mov	r7, r0
 80027a0:	9103      	str	r1, [sp, #12]
    if (PDO->valid && NMTisOperational
 80027a2:	6882      	ldr	r2, [r0, #8]
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	f000 80a9 	beq.w	80028fc <CO_RPDO_process+0x164>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80a6 	beq.w	80028fc <CO_RPDO_process+0x164>
        && (syncWas || !RPDO->synchronous)
 80027b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80027b2:	b921      	cbnz	r1, 80027be <CO_RPDO_process+0x26>
 80027b4:	f8d0 1168 	ldr.w	r1, [r0, #360]	; 0x168
 80027b8:	2900      	cmp	r1, #0
 80027ba:	f040 809f 	bne.w	80028fc <CO_RPDO_process+0x164>
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 80027be:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 80027c2:	2b0a      	cmp	r3, #10
 80027c4:	d910      	bls.n	80027e8 <CO_RPDO_process+0x50>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 80027c6:	f1b3 040b 	subs.w	r4, r3, #11
 80027ca:	bf18      	it	ne
 80027cc:	2401      	movne	r4, #1
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d015      	beq.n	80027fe <CO_RPDO_process+0x66>
 80027d2:	f248 2320 	movw	r3, #33312	; 0x8220
                     code, PDO->dataLength);
 80027d6:	7b3a      	ldrb	r2, [r7, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 80027d8:	9200      	str	r2, [sp, #0]
 80027da:	2204      	movs	r2, #4
 80027dc:	4621      	mov	r1, r4
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f7fe fd02 	bl	80011e8 <CO_error>
            RPDO->receiveError = setError
 80027e4:	f887 4160 	strb.w	r4, [r7, #352]	; 0x160
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 80027e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80027ec:	b153      	cbz	r3, 8002804 <CO_RPDO_process+0x6c>
 80027ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80027f2:	b1d3      	cbz	r3, 800282a <CO_RPDO_process+0x92>
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	b1db      	cbz	r3, 8002830 <CO_RPDO_process+0x98>
        uint8_t bufNo = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	e004      	b.n	8002808 <CO_RPDO_process+0x70>
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 80027fe:	f248 2310 	movw	r3, #33296	; 0x8210
 8002802:	e7e8      	b.n	80027d6 <CO_RPDO_process+0x3e>
        uint8_t bufNo = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	9302      	str	r3, [sp, #8]
        bool_t rpdoReceived = false;
 8002808:	2200      	movs	r2, #0
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 800280a:	9b02      	ldr	r3, [sp, #8]
 800280c:	3352      	adds	r3, #82	; 0x52
 800280e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04a      	beq.n	80028ac <CO_RPDO_process+0x114>
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8002816:	9b02      	ldr	r3, [sp, #8]
 8002818:	f103 0a2a 	add.w	sl, r3, #42	; 0x2a
 800281c:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002820:	3352      	adds	r3, #82	; 0x52
 8002822:	2400      	movs	r4, #0
 8002824:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002828:	e024      	b.n	8002874 <CO_RPDO_process+0xdc>
        uint8_t bufNo = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	e7eb      	b.n	8002808 <CO_RPDO_process+0x70>
            bufNo = 1;
 8002830:	2301      	movs	r3, #1
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	e7e8      	b.n	8002808 <CO_RPDO_process+0x70>
                if (ODdataLength > mappedLength) {
 8002836:	b2f6      	uxtb	r6, r6
 8002838:	45b1      	cmp	r9, r6
 800283a:	d82d      	bhi.n	8002898 <CO_RPDO_process+0x100>
                    dataOD = dataRPDO;
 800283c:	4651      	mov	r1, sl
                *dataOffset = 0;
 800283e:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8002842:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8002846:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
                OD_IO->write(&OD_IO->stream, dataOD,
 800284e:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 8002852:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8002856:	0080      	lsls	r0, r0, #2
 8002858:	3010      	adds	r0, #16
 800285a:	ab05      	add	r3, sp, #20
 800285c:	464a      	mov	r2, r9
 800285e:	4438      	add	r0, r7
 8002860:	47d8      	blx	fp
                *dataOffset = mappedLength;
 8002862:	eba8 0805 	sub.w	r8, r8, r5
 8002866:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 800286a:	f8c8 601c 	str.w	r6, [r8, #28]
                dataRPDO += mappedLength;
 800286e:	44b2      	add	sl, r6
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002870:	3401      	adds	r4, #1
 8002872:	b2e4      	uxtb	r4, r4
 8002874:	7b7b      	ldrb	r3, [r7, #13]
            rpdoReceived = true;
 8002876:	2201      	movs	r2, #1
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002878:	42a3      	cmp	r3, r4
 800287a:	d9c6      	bls.n	800280a <CO_RPDO_process+0x72>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800287c:	4625      	mov	r5, r4
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 800287e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002882:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002886:	69de      	ldr	r6, [r3, #28]
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002888:	f8d3 9018 	ldr.w	r9, [r3, #24]
                if (ODdataLength > CO_PDO_MAX_SIZE)
 800288c:	f1b9 0f08 	cmp.w	r9, #8
 8002890:	d9d1      	bls.n	8002836 <CO_RPDO_process+0x9e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002892:	f04f 0908 	mov.w	r9, #8
 8002896:	e7ce      	b.n	8002836 <CO_RPDO_process+0x9e>
                    memset(buf, 0, sizeof(buf));
 8002898:	2300      	movs	r3, #0
 800289a:	9306      	str	r3, [sp, #24]
 800289c:	9307      	str	r3, [sp, #28]
                    memcpy(buf, dataRPDO, mappedLength);
 800289e:	4632      	mov	r2, r6
 80028a0:	4651      	mov	r1, sl
 80028a2:	a806      	add	r0, sp, #24
 80028a4:	f007 fc76 	bl	800a194 <memcpy>
                    dataOD = buf;
 80028a8:	a906      	add	r1, sp, #24
 80028aa:	e7c8      	b.n	800283e <CO_RPDO_process+0xa6>
        if (RPDO->timeoutTime_us > 0) {
 80028ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80028b0:	b36b      	cbz	r3, 800290e <CO_RPDO_process+0x176>
            if (rpdoReceived) {
 80028b2:	b17a      	cbz	r2, 80028d4 <CO_RPDO_process+0x13c>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 80028b4:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d303      	bcc.n	80028c4 <CO_RPDO_process+0x12c>
                RPDO->timeoutTimer = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80028c2:	e024      	b.n	800290e <CO_RPDO_process+0x176>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 80028c4:	9200      	str	r2, [sp, #0]
 80028c6:	2300      	movs	r3, #0
 80028c8:	2217      	movs	r2, #23
 80028ca:	4619      	mov	r1, r3
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f7fe fc8b 	bl	80011e8 <CO_error>
 80028d2:	e7f3      	b.n	80028bc <CO_RPDO_process+0x124>
            else if (RPDO->timeoutTimer > 0
 80028d4:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80028d8:	b1ca      	cbz	r2, 800290e <CO_RPDO_process+0x176>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 80028da:	4293      	cmp	r3, r2
 80028dc:	d917      	bls.n	800290e <CO_RPDO_process+0x176>
                RPDO->timeoutTimer += timeDifference_us;
 80028de:	9903      	ldr	r1, [sp, #12]
 80028e0:	440a      	add	r2, r1
 80028e2:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d211      	bcs.n	800290e <CO_RPDO_process+0x176>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 80028ea:	9200      	str	r2, [sp, #0]
 80028ec:	f248 2350 	movw	r3, #33360	; 0x8250
 80028f0:	2217      	movs	r2, #23
 80028f2:	2101      	movs	r1, #1
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f7fe fc77 	bl	80011e8 <CO_error>
 80028fa:	e008      	b.n	800290e <CO_RPDO_process+0x176>
        if (!PDO->valid || !NMTisOperational) {
 80028fc:	b102      	cbz	r2, 8002900 <CO_RPDO_process+0x168>
 80028fe:	b933      	cbnz	r3, 800290e <CO_RPDO_process+0x176>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002906:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            RPDO->timeoutTimer = 0;
 800290a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
}
 800290e:	b009      	add	sp, #36	; 0x24
 8002910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002914 <CO_TPDO_init>:
{
 8002914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002918:	b089      	sub	sp, #36	; 0x24
 800291a:	9303      	str	r3, [sp, #12]
 800291c:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8002920:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002922:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8002924:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8002928:	2800      	cmp	r0, #0
 800292a:	f000 810f 	beq.w	8002b4c <CO_TPDO_init+0x238>
 800292e:	460d      	mov	r5, r1
 8002930:	4690      	mov	r8, r2
 8002932:	4604      	mov	r4, r0
 8002934:	2900      	cmp	r1, #0
 8002936:	f000 810d 	beq.w	8002b54 <CO_TPDO_init+0x240>
 800293a:	2a00      	cmp	r2, #0
 800293c:	f000 810e 	beq.w	8002b5c <CO_TPDO_init+0x248>
 8002940:	2e00      	cmp	r6, #0
 8002942:	f000 810f 	beq.w	8002b64 <CO_TPDO_init+0x250>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8002946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 810f 	beq.w	8002b6c <CO_TPDO_init+0x258>
 800294e:	2f00      	cmp	r7, #0
 8002950:	f000 8110 	beq.w	8002b74 <CO_TPDO_init+0x260>
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002954:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8002958:	2100      	movs	r1, #0
 800295a:	f007 fc43 	bl	800a1e4 <memset>
    PDO->em = em;
 800295e:	f8c4 8000 	str.w	r8, [r4]
    PDO->CANdev = CANdevTx;
 8002962:	6067      	str	r7, [r4, #4]
    uint32_t erroneousMap = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	9307      	str	r3, [sp, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8002968:	aa07      	add	r2, sp, #28
 800296a:	9201      	str	r2, [sp, #4]
 800296c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800296e:	9200      	str	r2, [sp, #0]
 8002970:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002972:	4629      	mov	r1, r5
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff fc11 	bl	800219c <PDO_initMapping>
    if (ret != CO_ERROR_NO) {
 800297a:	9002      	str	r0, [sp, #8]
 800297c:	b118      	cbz	r0, 8002986 <CO_TPDO_init+0x72>
}
 800297e:	9802      	ldr	r0, [sp, #8]
 8002980:	b009      	add	sp, #36	; 0x24
 8002982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002986:	23fe      	movs	r3, #254	; 0xfe
 8002988:	f88d 301b 	strb.w	r3, [sp, #27]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800298c:	2301      	movs	r3, #1
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	f10d 021b 	add.w	r2, sp, #27
 8002994:	2102      	movs	r1, #2
 8002996:	4630      	mov	r0, r6
 8002998:	f7ff f96a 	bl	8001c70 <OD_get_value>
    if (odRet != ODR_OK) {
 800299c:	2800      	cmp	r0, #0
 800299e:	d149      	bne.n	8002a34 <CO_TPDO_init+0x120>
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80029a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80029a4:	330f      	adds	r3, #15
 80029a6:	b2db      	uxtb	r3, r3
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d802      	bhi.n	80029b2 <CO_TPDO_init+0x9e>
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80029ac:	23fe      	movs	r3, #254	; 0xfe
 80029ae:	f88d 301b 	strb.w	r3, [sp, #27]
    TPDO->transmissionType = transmissionType;
 80029b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80029b6:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
    TPDO->sendRequest = true;
 80029ba:	2101      	movs	r1, #1
 80029bc:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    uint32_t COB_ID = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	9305      	str	r3, [sp, #20]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80029c4:	9100      	str	r1, [sp, #0]
 80029c6:	2304      	movs	r3, #4
 80029c8:	aa05      	add	r2, sp, #20
 80029ca:	4630      	mov	r0, r6
 80029cc:	f7ff f950 	bl	8001c70 <OD_get_value>
    if (odRet != ODR_OK) {
 80029d0:	9002      	str	r0, [sp, #8]
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d13a      	bne.n	8002a4c <CO_TPDO_init+0x138>
    bool_t valid = (COB_ID & 0x80000000) == 0;
 80029d6:	9b05      	ldr	r3, [sp, #20]
 80029d8:	ea6f 0b03 	mvn.w	fp, r3
 80029dc:	ea4f 7bdb 	mov.w	fp, fp, lsr #31
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80029e0:	f3c3 080a 	ubfx	r8, r3, #0, #11
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0b      	blt.n	8002a00 <CO_TPDO_init+0xec>
 80029e8:	7b62      	ldrb	r2, [r4, #13]
 80029ea:	b112      	cbz	r2, 80029f2 <CO_TPDO_init+0xde>
 80029ec:	f1b8 0f00 	cmp.w	r8, #0
 80029f0:	d106      	bne.n	8002a00 <CO_TPDO_init+0xec>
        if (erroneousMap == 0) erroneousMap = 1;
 80029f2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80029f6:	f1bb 0f00 	cmp.w	fp, #0
 80029fa:	d133      	bne.n	8002a64 <CO_TPDO_init+0x150>
 80029fc:	2201      	movs	r2, #1
 80029fe:	9207      	str	r2, [sp, #28]
     if (erroneousMap != 0) {
 8002a00:	9a07      	ldr	r2, [sp, #28]
 8002a02:	b152      	cbz	r2, 8002a1a <CO_TPDO_init+0x106>
        CO_errorReport(PDO->em,
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	2a01      	cmp	r2, #1
 8002a08:	d000      	beq.n	8002a0c <CO_TPDO_init+0xf8>
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002a12:	221a      	movs	r2, #26
 8002a14:	2101      	movs	r1, #1
 8002a16:	f7fe fbe7 	bl	80011e8 <CO_error>
    if (!valid) {
 8002a1a:	f1bb 0f00 	cmp.w	fp, #0
 8002a1e:	d024      	beq.n	8002a6a <CO_TPDO_init+0x156>
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002a20:	f1b8 0f00 	cmp.w	r8, #0
 8002a24:	d023      	beq.n	8002a6e <CO_TPDO_init+0x15a>
 8002a26:	f02a 037f 	bic.w	r3, sl, #127	; 0x7f
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4598      	cmp	r8, r3
 8002a2e:	d11e      	bne.n	8002a6e <CO_TPDO_init+0x15a>
        CAN_ID = preDefinedCanId;
 8002a30:	46d0      	mov	r8, sl
 8002a32:	e01c      	b.n	8002a6e <CO_TPDO_init+0x15a>
        if (errInfo != NULL) {
 8002a34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002a36:	b12b      	cbz	r3, 8002a44 <CO_TPDO_init+0x130>
    return (entry != NULL) ? entry->index : 0;
 8002a38:	8833      	ldrh	r3, [r6, #0]
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002a42:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8002a44:	f06f 030b 	mvn.w	r3, #11
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	e798      	b.n	800297e <CO_TPDO_init+0x6a>
        if (errInfo != NULL) {
 8002a4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002a4e:	b12b      	cbz	r3, 8002a5c <CO_TPDO_init+0x148>
 8002a50:	8833      	ldrh	r3, [r6, #0]
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002a5a:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8002a5c:	f06f 030b 	mvn.w	r3, #11
 8002a60:	9302      	str	r3, [sp, #8]
 8002a62:	e78c      	b.n	800297e <CO_TPDO_init+0x6a>
        valid = false;
 8002a64:	f04f 0b00 	mov.w	fp, #0
 8002a68:	e7ca      	b.n	8002a00 <CO_TPDO_init+0xec>
        CAN_ID = 0;
 8002a6a:	f04f 0800 	mov.w	r8, #0
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002a6e:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8002a72:	2bf0      	cmp	r3, #240	; 0xf0
 8002a74:	bf8c      	ite	hi
 8002a76:	2300      	movhi	r3, #0
 8002a78:	2301      	movls	r3, #1
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	7b23      	ldrb	r3, [r4, #12]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2300      	movs	r3, #0
 8002a82:	4642      	mov	r2, r8
 8002a84:	4649      	mov	r1, r9
 8002a86:	4638      	mov	r0, r7
 8002a88:	f002 ffba 	bl	8005a00 <CO_CANtxBufferInit>
 8002a8c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    if (TPDO->CANtxBuff == NULL) {
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d073      	beq.n	8002b7c <CO_TPDO_init+0x268>
    PDO->valid = valid;
 8002a94:	f8c4 b008 	str.w	fp, [r4, #8]
    uint16_t inhibitTime = 0;
 8002a98:	2700      	movs	r7, #0
 8002a9a:	f8ad 7012 	strh.w	r7, [sp, #18]
    uint16_t eventTime = 0;
 8002a9e:	f8ad 7010 	strh.w	r7, [sp, #16]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002aa2:	f04f 0b01 	mov.w	fp, #1
 8002aa6:	f8cd b000 	str.w	fp, [sp]
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f10d 0212 	add.w	r2, sp, #18
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	f7ff f8dc 	bl	8001c70 <OD_get_value>
 8002ab8:	f8cd b000 	str.w	fp, [sp]
 8002abc:	2302      	movs	r3, #2
 8002abe:	aa04      	add	r2, sp, #16
 8002ac0:	2105      	movs	r1, #5
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f7ff f8d4 	bl	8001c70 <OD_get_value>
    TPDO->inhibitTime_us = inhibitTime * 100;
 8002ac8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8002acc:	2264      	movs	r2, #100	; 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 8002ad6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    TPDO->syncStartValue = 0;
 8002ae6:	f884 7158 	strb.w	r7, [r4, #344]	; 0x158
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002aea:	f8cd b000 	str.w	fp, [sp]
 8002aee:	465b      	mov	r3, fp
 8002af0:	f504 72ac 	add.w	r2, r4, #344	; 0x158
 8002af4:	2106      	movs	r1, #6
 8002af6:	4630      	mov	r0, r6
 8002af8:	f7ff f8ba 	bl	8001c70 <OD_get_value>
    TPDO->SYNC = SYNC;
 8002afc:	9b03      	ldr	r3, [sp, #12]
 8002afe:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
    TPDO->syncCounter = 255;
 8002b02:	23ff      	movs	r3, #255	; 0xff
 8002b04:	f884 3159 	strb.w	r3, [r4, #345]	; 0x159
    PDO->isRPDO = false;
 8002b08:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
    PDO->OD = OD;
 8002b0c:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8002b10:	f8a4 9120 	strh.w	r9, [r4, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8002b14:	f8a4 a122 	strh.w	sl, [r4, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8002b18:	f8a4 8124 	strh.w	r8, [r4, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 8002b1c:	f8c4 4128 	str.w	r4, [r4, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <CO_TPDO_init+0x270>)
 8002b22:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <CO_TPDO_init+0x274>)
 8002b28:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 8002b2c:	f8c4 4138 	str.w	r4, [r4, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <CO_TPDO_init+0x278>)
 8002b32:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <CO_TPDO_init+0x27c>)
 8002b38:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8002b3c:	f504 7394 	add.w	r3, r4, #296	; 0x128
    entry->extension = extension;
 8002b40:	60b3      	str	r3, [r6, #8]
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8002b42:	f504 749c 	add.w	r4, r4, #312	; 0x138
 8002b46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b48:	609c      	str	r4, [r3, #8]
    return CO_ERROR_NO;
 8002b4a:	e718      	b.n	800297e <CO_TPDO_init+0x6a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	9302      	str	r3, [sp, #8]
 8002b52:	e714      	b.n	800297e <CO_TPDO_init+0x6a>
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	9302      	str	r3, [sp, #8]
 8002b5a:	e710      	b.n	800297e <CO_TPDO_init+0x6a>
 8002b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b60:	9302      	str	r3, [sp, #8]
 8002b62:	e70c      	b.n	800297e <CO_TPDO_init+0x6a>
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	9302      	str	r3, [sp, #8]
 8002b6a:	e708      	b.n	800297e <CO_TPDO_init+0x6a>
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	9302      	str	r3, [sp, #8]
 8002b72:	e704      	b.n	800297e <CO_TPDO_init+0x6a>
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
 8002b78:	9302      	str	r3, [sp, #8]
 8002b7a:	e700      	b.n	800297e <CO_TPDO_init+0x6a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	9302      	str	r3, [sp, #8]
 8002b82:	e6fc      	b.n	800297e <CO_TPDO_init+0x6a>
 8002b84:	08001d4b 	.word	0x08001d4b
 8002b88:	080022b5 	.word	0x080022b5
 8002b8c:	08001a29 	.word	0x08001a29
 8002b90:	08001eb9 	.word	0x08001eb9

08002b94 <CO_TPDO_process>:
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 8002b94:	6882      	ldr	r2, [r0, #8]
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	f000 8082 	beq.w	8002ca0 <CO_TPDO_process+0x10c>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d07f      	beq.n	8002ca0 <CO_TPDO_process+0x10c>
{
 8002ba0:	b510      	push	{r4, lr}

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8002ba2:	f890 414c 	ldrb.w	r4, [r0, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002ba6:	1e63      	subs	r3, r4, #1
 8002ba8:	b2db      	uxtb	r3, r3
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8002baa:	2bfc      	cmp	r3, #252	; 0xfc
 8002bac:	d910      	bls.n	8002bd0 <CO_TPDO_process+0x3c>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8002bae:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8002bb2:	b153      	cbz	r3, 8002bca <CO_TPDO_process+0x36>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8002bb4:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d917      	bls.n	8002bec <CO_TPDO_process+0x58>
 8002bbc:	1a5b      	subs	r3, r3, r1
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8002bbe:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 8002bc2:	b913      	cbnz	r3, 8002bca <CO_TPDO_process+0x36>
                    TPDO->sendRequest = true;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8002bca:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8002bce:	b333      	cbz	r3, 8002c1e <CO_TPDO_process+0x8a>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8002bd0:	2cfd      	cmp	r4, #253	; 0xfd
 8002bd2:	d92b      	bls.n	8002c2c <CO_TPDO_process+0x98>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8002bd4:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8002bd8:	428b      	cmp	r3, r1
 8002bda:	d922      	bls.n	8002c22 <CO_TPDO_process+0x8e>
 8002bdc:	1a59      	subs	r1, r3, r1
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8002bde:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8002be2:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8002be6:	b103      	cbz	r3, 8002bea <CO_TPDO_process+0x56>
 8002be8:	b1e9      	cbz	r1, 8002c26 <CO_TPDO_process+0x92>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
#endif
    }
}
 8002bea:	bd10      	pop	{r4, pc}
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e7e6      	b.n	8002bbe <CO_TPDO_process+0x2a>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	7b42      	ldrb	r2, [r0, #13]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d9ea      	bls.n	8002bd0 <CO_TPDO_process+0x3c>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8002bfa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002bfe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                    if (flagPDObyte != NULL) {
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d0f4      	beq.n	8002bf0 <CO_TPDO_process+0x5c>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8002c06:	f892 c000 	ldrb.w	ip, [r2]
 8002c0a:	18c2      	adds	r2, r0, r3
 8002c0c:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8002c10:	ea1c 0f02 	tst.w	ip, r2
 8002c14:	d1ec      	bne.n	8002bf0 <CO_TPDO_process+0x5c>
                            TPDO->sendRequest = true;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
                            break;
 8002c1c:	e7d8      	b.n	8002bd0 <CO_TPDO_process+0x3c>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e7e8      	b.n	8002bf4 <CO_TPDO_process+0x60>
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8002c22:	2100      	movs	r1, #0
 8002c24:	e7db      	b.n	8002bde <CO_TPDO_process+0x4a>
                CO_TPDOsend(TPDO);
 8002c26:	f7ff fc43 	bl	80024b0 <CO_TPDOsend>
 8002c2a:	e7de      	b.n	8002bea <CO_TPDO_process+0x56>
        else if (TPDO->SYNC != NULL && syncWas) {
 8002c2c:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0da      	beq.n	8002bea <CO_TPDO_process+0x56>
 8002c34:	9a02      	ldr	r2, [sp, #8]
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d0d7      	beq.n	8002bea <CO_TPDO_process+0x56>
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8002c3a:	b934      	cbnz	r4, 8002c4a <CO_TPDO_process+0xb6>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8002c3c:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0d2      	beq.n	8002bea <CO_TPDO_process+0x56>
 8002c44:	f7ff fc34 	bl	80024b0 <CO_TPDOsend>
 8002c48:	e7cf      	b.n	8002bea <CO_TPDO_process+0x56>
                if (TPDO->syncCounter == 255) {
 8002c4a:	f890 2159 	ldrb.w	r2, [r0, #345]	; 0x159
 8002c4e:	2aff      	cmp	r2, #255	; 0xff
 8002c50:	d00e      	beq.n	8002c70 <CO_TPDO_process+0xdc>
                if (TPDO->syncCounter == 254) {
 8002c52:	f890 2159 	ldrb.w	r2, [r0, #345]	; 0x159
 8002c56:	2afe      	cmp	r2, #254	; 0xfe
 8002c58:	d018      	beq.n	8002c8c <CO_TPDO_process+0xf8>
                else if (--TPDO->syncCounter == 0) {
 8002c5a:	1e53      	subs	r3, r2, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f880 3159 	strb.w	r3, [r0, #345]	; 0x159
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1c1      	bne.n	8002bea <CO_TPDO_process+0x56>
                    TPDO->syncCounter = TPDO->transmissionType;
 8002c66:	f880 4159 	strb.w	r4, [r0, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 8002c6a:	f7ff fc21 	bl	80024b0 <CO_TPDOsend>
 8002c6e:	e7bc      	b.n	8002bea <CO_TPDO_process+0x56>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8002c70:	7c5a      	ldrb	r2, [r3, #17]
 8002c72:	b132      	cbz	r2, 8002c82 <CO_TPDO_process+0xee>
                        && TPDO->syncStartValue != 0
 8002c74:	f890 2158 	ldrb.w	r2, [r0, #344]	; 0x158
 8002c78:	b11a      	cbz	r2, 8002c82 <CO_TPDO_process+0xee>
                        TPDO->syncCounter = 254;
 8002c7a:	22fe      	movs	r2, #254	; 0xfe
 8002c7c:	f880 2159 	strb.w	r2, [r0, #345]	; 0x159
 8002c80:	e7e7      	b.n	8002c52 <CO_TPDO_process+0xbe>
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8002c82:	0862      	lsrs	r2, r4, #1
 8002c84:	3201      	adds	r2, #1
 8002c86:	f880 2159 	strb.w	r2, [r0, #345]	; 0x159
 8002c8a:	e7e2      	b.n	8002c52 <CO_TPDO_process+0xbe>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8002c8c:	7c9a      	ldrb	r2, [r3, #18]
 8002c8e:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d1a9      	bne.n	8002bea <CO_TPDO_process+0x56>
                        TPDO->syncCounter = TPDO->transmissionType;
 8002c96:	f880 4159 	strb.w	r4, [r0, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 8002c9a:	f7ff fc09 	bl	80024b0 <CO_TPDOsend>
 8002c9e:	e7a4      	b.n	8002bea <CO_TPDO_process+0x56>
        TPDO->sendRequest = true;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
 8002cac:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
        TPDO->syncCounter = 255;
 8002cb0:	23ff      	movs	r3, #255	; 0xff
 8002cb2:	f880 3159 	strb.w	r3, [r0, #345]	; 0x159
 8002cb6:	4770      	bx	lr

08002cb8 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8002cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461f      	mov	r7, r3
 8002cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cc8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8002cca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00c      	beq.n	8002cea <CO_SDOserver_init_canRxTx+0x32>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
    ) {
        return CO_ERROR_NO;
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8002cd0:	64ea      	str	r2, [r5, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8002cd2:	652e      	str	r6, [r5, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	db0d      	blt.n	8002cf4 <CO_SDOserver_init_canRxTx+0x3c>
 8002cd8:	b292      	uxth	r2, r2
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8002cda:	2e00      	cmp	r6, #0
 8002cdc:	db0c      	blt.n	8002cf8 <CO_SDOserver_init_canRxTx+0x40>
 8002cde:	b2b6      	uxth	r6, r6
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8002ce0:	b162      	cbz	r2, 8002cfc <CO_SDOserver_init_canRxTx+0x44>
 8002ce2:	b15e      	cbz	r6, 8002cfc <CO_SDOserver_init_canRxTx+0x44>
        SDO->valid = true;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	612b      	str	r3, [r5, #16]
 8002ce8:	e00b      	b.n	8002d02 <CO_SDOserver_init_canRxTx+0x4a>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8002cea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8002cec:	42b3      	cmp	r3, r6
 8002cee:	d1ef      	bne.n	8002cd0 <CO_SDOserver_init_canRxTx+0x18>
        return CO_ERROR_NO;
 8002cf0:	2400      	movs	r4, #0
 8002cf2:	e01e      	b.n	8002d32 <CO_SDOserver_init_canRxTx+0x7a>
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	e7f0      	b.n	8002cda <CO_SDOserver_init_canRxTx+0x22>
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	e7f1      	b.n	8002ce0 <CO_SDOserver_init_canRxTx+0x28>
    }
    else {
        idC2S = 0;
        idS2C = 0;
        SDO->valid = false;
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	612a      	str	r2, [r5, #16]
        idS2C = 0;
 8002d00:	4616      	mov	r6, r2
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <CO_SDOserver_init_canRxTx+0x8c>)
 8002d04:	9302      	str	r3, [sp, #8]
 8002d06:	9501      	str	r5, [sp, #4]
 8002d08:	f04f 0800 	mov.w	r8, #0
 8002d0c:	f8cd 8000 	str.w	r8, [sp]
 8002d10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002d14:	f002 fe3a 	bl	800598c <CO_CANrxBufferInit>
 8002d18:	4604      	mov	r4, r0
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8002d1a:	f8cd 8004 	str.w	r8, [sp, #4]
 8002d1e:	2308      	movs	r3, #8
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4643      	mov	r3, r8
 8002d24:	4632      	mov	r2, r6
 8002d26:	4639      	mov	r1, r7
 8002d28:	6828      	ldr	r0, [r5, #0]
 8002d2a:	f002 fe69 	bl	8005a00 <CO_CANtxBufferInit>
 8002d2e:	6068      	str	r0, [r5, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8002d30:	b118      	cbz	r0, 8002d3a <CO_SDOserver_init_canRxTx+0x82>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
        SDO->valid = false;
    }

    return ret;
}
 8002d32:	4620      	mov	r0, r4
 8002d34:	b004      	add	sp, #16
 8002d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        SDO->valid = false;
 8002d3a:	f8c5 8010 	str.w	r8, [r5, #16]
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8002d42:	e7f6      	b.n	8002d32 <CO_SDOserver_init_canRxTx+0x7a>
 8002d44:	08002efd 	.word	0x08002efd

08002d48 <OD_write_1201_additional>:
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f000 80a9 	beq.w	8002ea0 <OD_write_1201_additional+0x158>
{
 8002d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d50:	b083      	sub	sp, #12
 8002d52:	460c      	mov	r4, r1
 8002d54:	4617      	mov	r7, r2
 8002d56:	461e      	mov	r6, r3
 8002d58:	4605      	mov	r5, r0
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8002d5a:	2900      	cmp	r1, #0
 8002d5c:	f000 80a2 	beq.w	8002ea4 <OD_write_1201_additional+0x15c>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a1 	beq.w	8002ea8 <OD_write_1201_additional+0x160>
        return ODR_DEV_INCOMPAT;
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8002d66:	6840      	ldr	r0, [r0, #4]

    switch (stream->subIndex) {
 8002d68:	7c69      	ldrb	r1, [r5, #17]
 8002d6a:	2903      	cmp	r1, #3
 8002d6c:	f200 809e 	bhi.w	8002eac <OD_write_1201_additional+0x164>
 8002d70:	e8df f001 	tbb	[pc, r1]
 8002d74:	89480502 	.word	0x89480502
 8002d78:	2004      	movs	r0, #4
            return ODR_SUB_NOT_EXIST;
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
}
 8002d7a:	b003      	add	sp, #12
 8002d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8002d7e:	f8d4 c000 	ldr.w	ip, [r4]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002d82:	fa1f fe8c 	uxth.w	lr, ip
 8002d86:	f3cc 010a 	ubfx	r1, ip, #0, #11
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8002d8a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8002d8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
            if ((COB_ID & 0x3FFFF800) != 0
 8002d92:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <OD_write_1201_additional+0x1b0>)
 8002d94:	ea0c 0303 	and.w	r3, ip, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 8089 	bne.w	8002eb0 <OD_write_1201_additional+0x168>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8002d9e:	f1bc 0f00 	cmp.w	ip, #0
 8002da2:	db04      	blt.n	8002dae <OD_write_1201_additional+0x66>
 8002da4:	6903      	ldr	r3, [r0, #16]
 8002da6:	b113      	cbz	r3, 8002dae <OD_write_1201_additional+0x66>
 8002da8:	4291      	cmp	r1, r2
 8002daa:	f040 8083 	bne.w	8002eb4 <OD_write_1201_additional+0x16c>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002dae:	f1bc 0f00 	cmp.w	ip, #0
 8002db2:	db19      	blt.n	8002de8 <OD_write_1201_additional+0xa0>
 8002db4:	f41e 6ff0 	tst.w	lr, #1920	; 0x780
 8002db8:	d07e      	beq.n	8002eb8 <OD_write_1201_additional+0x170>
 8002dba:	f2a1 1301 	subw	r3, r1, #257	; 0x101
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8002dc2:	d97b      	bls.n	8002ebc <OD_write_1201_additional+0x174>
 8002dc4:	f2a1 5381 	subw	r3, r1, #1409	; 0x581
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b7e      	cmp	r3, #126	; 0x7e
 8002dcc:	d978      	bls.n	8002ec0 <OD_write_1201_additional+0x178>
 8002dce:	f2a1 6301 	subw	r3, r1, #1537	; 0x601
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b7e      	cmp	r3, #126	; 0x7e
 8002dd6:	d975      	bls.n	8002ec4 <OD_write_1201_additional+0x17c>
 8002dd8:	f5a1 63dc 	sub.w	r3, r1, #1760	; 0x6e0
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b1f      	cmp	r3, #31
 8002de0:	d972      	bls.n	8002ec8 <OD_write_1201_additional+0x180>
 8002de2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002de6:	d871      	bhi.n	8002ecc <OD_write_1201_additional+0x184>
            CO_SDOserver_init_canRxTx(SDO,
 8002de8:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8002dec:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 8002df0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002df2:	f8d0 e050 	ldr.w	lr, [r0, #80]	; 0x50
 8002df6:	f8cd e004 	str.w	lr, [sp, #4]
 8002dfa:	f8cd c000 	str.w	ip, [sp]
 8002dfe:	f7ff ff5b 	bl	8002cb8 <CO_SDOserver_init_canRxTx>
            break;
 8002e02:	e046      	b.n	8002e92 <OD_write_1201_additional+0x14a>
 8002e04:	f8d4 c000 	ldr.w	ip, [r4]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002e08:	fa1f fe8c 	uxth.w	lr, ip
 8002e0c:	f3cc 010a 	ubfx	r1, ip, #0, #11
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8002e10:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e14:	f3c3 020a 	ubfx	r2, r3, #0, #11
            if ((COB_ID & 0x3FFFF800) != 0
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <OD_write_1201_additional+0x1b0>)
 8002e1a:	ea0c 0303 	and.w	r3, ip, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d156      	bne.n	8002ed0 <OD_write_1201_additional+0x188>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8002e22:	f1bc 0f00 	cmp.w	ip, #0
 8002e26:	db03      	blt.n	8002e30 <OD_write_1201_additional+0xe8>
 8002e28:	6903      	ldr	r3, [r0, #16]
 8002e2a:	b10b      	cbz	r3, 8002e30 <OD_write_1201_additional+0xe8>
 8002e2c:	4291      	cmp	r1, r2
 8002e2e:	d151      	bne.n	8002ed4 <OD_write_1201_additional+0x18c>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002e30:	f1bc 0f00 	cmp.w	ip, #0
 8002e34:	db19      	blt.n	8002e6a <OD_write_1201_additional+0x122>
 8002e36:	f41e 6ff0 	tst.w	lr, #1920	; 0x780
 8002e3a:	d04d      	beq.n	8002ed8 <OD_write_1201_additional+0x190>
 8002e3c:	f2a1 1301 	subw	r3, r1, #257	; 0x101
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b7f      	cmp	r3, #127	; 0x7f
 8002e44:	d94a      	bls.n	8002edc <OD_write_1201_additional+0x194>
 8002e46:	f2a1 5381 	subw	r3, r1, #1409	; 0x581
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b7e      	cmp	r3, #126	; 0x7e
 8002e4e:	d947      	bls.n	8002ee0 <OD_write_1201_additional+0x198>
 8002e50:	f2a1 6301 	subw	r3, r1, #1537	; 0x601
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b7e      	cmp	r3, #126	; 0x7e
 8002e58:	d944      	bls.n	8002ee4 <OD_write_1201_additional+0x19c>
 8002e5a:	f5a1 63dc 	sub.w	r3, r1, #1760	; 0x6e0
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b1f      	cmp	r3, #31
 8002e62:	d941      	bls.n	8002ee8 <OD_write_1201_additional+0x1a0>
 8002e64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002e68:	d840      	bhi.n	8002eec <OD_write_1201_additional+0x1a4>
            CO_SDOserver_init_canRxTx(SDO,
 8002e6a:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8002e6e:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 8002e72:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002e74:	f8cd c004 	str.w	ip, [sp, #4]
 8002e78:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
 8002e7c:	f8cd c000 	str.w	ip, [sp]
 8002e80:	f7ff ff1a 	bl	8002cb8 <CO_SDOserver_init_canRxTx>
            break;
 8002e84:	e005      	b.n	8002e92 <OD_write_1201_additional+0x14a>
            if (count != 1) {
 8002e86:	2a01      	cmp	r2, #1
 8002e88:	d132      	bne.n	8002ef0 <OD_write_1201_additional+0x1a8>
            if (nodeId < 1 || nodeId > 127) {
 8002e8a:	f994 3000 	ldrsb.w	r3, [r4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dd30      	ble.n	8002ef4 <OD_write_1201_additional+0x1ac>
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002e92:	4633      	mov	r3, r6
 8002e94:	463a      	mov	r2, r7
 8002e96:	4621      	mov	r1, r4
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f7fe fdf4 	bl	8001a86 <OD_writeOriginal>
 8002e9e:	e76c      	b.n	8002d7a <OD_write_1201_additional+0x32>
        return ODR_DEV_INCOMPAT;
 8002ea0:	2009      	movs	r0, #9
}
 8002ea2:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 8002ea4:	2009      	movs	r0, #9
 8002ea6:	e768      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ea8:	2009      	movs	r0, #9
 8002eaa:	e766      	b.n	8002d7a <OD_write_1201_additional+0x32>
            return ODR_SUB_NOT_EXIST;
 8002eac:	200e      	movs	r0, #14
 8002eae:	e764      	b.n	8002d7a <OD_write_1201_additional+0x32>
                return ODR_INVALID_VALUE;
 8002eb0:	200f      	movs	r0, #15
 8002eb2:	e762      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002eb4:	200f      	movs	r0, #15
 8002eb6:	e760      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002eb8:	200f      	movs	r0, #15
 8002eba:	e75e      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ebc:	200f      	movs	r0, #15
 8002ebe:	e75c      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ec0:	200f      	movs	r0, #15
 8002ec2:	e75a      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ec4:	200f      	movs	r0, #15
 8002ec6:	e758      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ec8:	200f      	movs	r0, #15
 8002eca:	e756      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ecc:	200f      	movs	r0, #15
 8002ece:	e754      	b.n	8002d7a <OD_write_1201_additional+0x32>
                return ODR_INVALID_VALUE;
 8002ed0:	200f      	movs	r0, #15
 8002ed2:	e752      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ed4:	200f      	movs	r0, #15
 8002ed6:	e750      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ed8:	200f      	movs	r0, #15
 8002eda:	e74e      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002edc:	200f      	movs	r0, #15
 8002ede:	e74c      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ee0:	200f      	movs	r0, #15
 8002ee2:	e74a      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ee4:	200f      	movs	r0, #15
 8002ee6:	e748      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ee8:	200f      	movs	r0, #15
 8002eea:	e746      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002eec:	200f      	movs	r0, #15
 8002eee:	e744      	b.n	8002d7a <OD_write_1201_additional+0x32>
                return ODR_TYPE_MISMATCH;
 8002ef0:	200b      	movs	r0, #11
 8002ef2:	e742      	b.n	8002d7a <OD_write_1201_additional+0x32>
                return ODR_INVALID_VALUE;
 8002ef4:	200f      	movs	r0, #15
 8002ef6:	e740      	b.n	8002d7a <OD_write_1201_additional+0x32>
 8002ef8:	3ffff800 	.word	0x3ffff800

08002efc <CO_SDO_receive>:
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002efc:	790a      	ldrb	r2, [r1, #4]
    if (DLC == 8) {
 8002efe:	2a08      	cmp	r2, #8
 8002f00:	d000      	beq.n	8002f04 <CO_SDO_receive+0x8>
 8002f02:	4770      	bx	lr
static void CO_SDO_receive(void *object, void *msg) {
 8002f04:	b510      	push	{r4, lr}
 8002f06:	4604      	mov	r4, r0
 8002f08:	1d4b      	adds	r3, r1, #5
        if (data[0] == 0x80) {
 8002f0a:	7949      	ldrb	r1, [r1, #5]
 8002f0c:	2980      	cmp	r1, #128	; 0x80
 8002f0e:	d002      	beq.n	8002f16 <CO_SDO_receive+0x1a>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8002f10:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002f12:	b119      	cbz	r1, 8002f1c <CO_SDO_receive+0x20>
}
 8002f14:	bd10      	pop	{r4, pc}
            SDO->state = CO_SDO_ST_IDLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	7503      	strb	r3, [r0, #20]
 8002f1a:	e7fb      	b.n	8002f14 <CO_SDO_receive+0x18>
            memcpy(SDO->CANrxData, data, DLC);
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	303c      	adds	r0, #60	; 0x3c
 8002f20:	f007 f938 	bl	800a194 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8002f24:	2301      	movs	r3, #1
 8002f26:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002f28:	e7f4      	b.n	8002f14 <CO_SDO_receive+0x18>
	...

08002f2c <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	4604      	mov	r4, r0
 8002f32:	460d      	mov	r5, r1
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8002f34:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0

    if (SDO->finished) {
 8002f38:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d041      	beq.n	8002fc2 <validateAndWriteToOD+0x96>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8002f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f40:	b15b      	cbz	r3, 8002f5a <validateAndWriteToOD+0x2e>
 8002f42:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d008      	beq.n	8002f5a <validateAndWriteToOD+0x2e>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002f48:	d205      	bcs.n	8002f56 <validateAndWriteToOD+0x2a>
 8002f4a:	4b48      	ldr	r3, [pc, #288]	; (800306c <validateAndWriteToOD+0x140>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8002f4c:	602b      	str	r3, [r5, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	7523      	strb	r3, [r4, #20]
            return false;
 8002f52:	2000      	movs	r0, #0
 8002f54:	e087      	b.n	8003066 <validateAndWriteToOD+0x13a>
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002f56:	4b46      	ldr	r3, [pc, #280]	; (8003070 <validateAndWriteToOD+0x144>)
 8002f58:	e7f8      	b.n	8002f4c <validateAndWriteToOD+0x20>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8002f5a:	6a23      	ldr	r3, [r4, #32]

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8002f5c:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
 8002f60:	2900      	cmp	r1, #0
 8002f62:	db03      	blt.n	8002f6c <validateAndWriteToOD+0x40>
                SDO->sizeTran++;
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8002f64:	bb0b      	cbnz	r3, 8002faa <validateAndWriteToOD+0x7e>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8002f66:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002f68:	6223      	str	r3, [r4, #32]
 8002f6a:	e02f      	b.n	8002fcc <validateAndWriteToOD+0xa0>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8002f6c:	b113      	cbz	r3, 8002f74 <validateAndWriteToOD+0x48>
 8002f6e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002f70:	4299      	cmp	r1, r3
 8002f72:	d2f7      	bcs.n	8002f64 <validateAndWriteToOD+0x38>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8002f74:	1c91      	adds	r1, r2, #2
 8002f76:	2920      	cmp	r1, #32
 8002f78:	d8f4      	bhi.n	8002f64 <validateAndWriteToOD+0x38>
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8002f7a:	1c50      	adds	r0, r2, #1
 8002f7c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8002f80:	4422      	add	r2, r4
 8002f82:	2600      	movs	r6, #0
 8002f84:	f882 607c 	strb.w	r6, [r2, #124]	; 0x7c
            SDO->sizeTran++;
 8002f88:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002f8a:	3201      	adds	r2, #1
 8002f8c:	66a2      	str	r2, [r4, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8002f8e:	b10b      	cbz	r3, 8002f94 <validateAndWriteToOD+0x68>
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <validateAndWriteToOD+0x78>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8002f94:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 8002f98:	4420      	add	r0, r4
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                SDO->sizeTran++;
 8002fa0:	3201      	adds	r2, #1
 8002fa2:	66a2      	str	r2, [r4, #104]	; 0x68
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8002fa4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002fa6:	6223      	str	r3, [r4, #32]
 8002fa8:	e010      	b.n	8002fcc <validateAndWriteToOD+0xa0>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8002faa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d00d      	beq.n	8002fcc <validateAndWriteToOD+0xa0>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002fb0:	d905      	bls.n	8002fbe <validateAndWriteToOD+0x92>
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <validateAndWriteToOD+0x140>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8002fb4:	602b      	str	r3, [r5, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	7523      	strb	r3, [r4, #20]
            return false;
 8002fba:	2000      	movs	r0, #0
 8002fbc:	e053      	b.n	8003066 <validateAndWriteToOD+0x13a>
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <validateAndWriteToOD+0x144>)
 8002fc0:	e7f8      	b.n	8002fb4 <validateAndWriteToOD+0x88>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 8002fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fc4:	b113      	cbz	r3, 8002fcc <validateAndWriteToOD+0xa0>
 8002fc6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d32f      	bcc.n	800302c <validateAndWriteToOD+0x100>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9301      	str	r3, [sp, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 8002fd0:	f114 0018 	adds.w	r0, r4, #24
 8002fd4:	d02f      	beq.n	8003036 <validateAndWriteToOD+0x10a>
 8002fd6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002fda:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 8002fde:	d12c      	bne.n	800303a <validateAndWriteToOD+0x10e>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	461e      	mov	r6, r3
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8002fe4:	b123      	cbz	r3, 8002ff0 <validateAndWriteToOD+0xc4>
 8002fe6:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe8:	f3ef 8210 	mrs	r2, PRIMASK
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8002fee:	b672      	cpsid	i
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8002ff0:	ab01      	add	r3, sp, #4
 8002ff2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8002ff6:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 8002ffa:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 8002ffe:	47e0      	blx	ip
 8003000:	4603      	mov	r3, r0
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8003002:	b11e      	cbz	r6, 800300c <validateAndWriteToOD+0xe0>
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	6b52      	ldr	r2, [r2, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	f382 8810 	msr	PRIMASK, r2

    SDO->bufOffsetWr = 0;
 800300c:	2200      	movs	r2, #0
 800300e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	2a01      	cmp	r2, #1
 8003018:	d811      	bhi.n	800303e <validateAndWriteToOD+0x112>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
        SDO->state = CO_SDO_ST_ABORT;
        return false;
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 800301a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800301c:	b110      	cbz	r0, 8003024 <validateAndWriteToOD+0xf8>
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d014      	beq.n	800304e <validateAndWriteToOD+0x122>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
        SDO->state = CO_SDO_ST_ABORT;
        return false;
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8003024:	b9f0      	cbnz	r0, 8003064 <validateAndWriteToOD+0x138>
 8003026:	b1c3      	cbz	r3, 800305a <validateAndWriteToOD+0x12e>
        *abortCode = CO_SDO_AB_DATA_LONG;
        SDO->state = CO_SDO_ST_ABORT;
        return false;
    }

    return true;
 8003028:	2001      	movs	r0, #1
 800302a:	e01c      	b.n	8003066 <validateAndWriteToOD+0x13a>
            *abortCode = CO_SDO_AB_DATA_LONG;
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <validateAndWriteToOD+0x140>)
 800302e:	600b      	str	r3, [r1, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003030:	2301      	movs	r3, #1
 8003032:	7523      	strb	r3, [r4, #20]
            return false;
 8003034:	e017      	b.n	8003066 <validateAndWriteToOD+0x13a>
 8003036:	2300      	movs	r3, #0
 8003038:	e7d3      	b.n	8002fe2 <validateAndWriteToOD+0xb6>
 800303a:	2301      	movs	r3, #1
 800303c:	e7d1      	b.n	8002fe2 <validateAndWriteToOD+0xb6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fe08 	bl	8001c54 <OD_getSDOabCode>
 8003044:	6028      	str	r0, [r5, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003046:	2301      	movs	r3, #1
 8003048:	7523      	strb	r3, [r4, #20]
        return false;
 800304a:	2000      	movs	r0, #0
 800304c:	e00b      	b.n	8003066 <validateAndWriteToOD+0x13a>
        *abortCode = CO_SDO_AB_DATA_SHORT;
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <validateAndWriteToOD+0x144>)
 8003050:	602b      	str	r3, [r5, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003052:	2301      	movs	r3, #1
 8003054:	7523      	strb	r3, [r4, #20]
        return false;
 8003056:	2000      	movs	r0, #0
 8003058:	e005      	b.n	8003066 <validateAndWriteToOD+0x13a>
        *abortCode = CO_SDO_AB_DATA_LONG;
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <validateAndWriteToOD+0x140>)
 800305c:	602b      	str	r3, [r5, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800305e:	2301      	movs	r3, #1
 8003060:	7523      	strb	r3, [r4, #20]
        return false;
 8003062:	e000      	b.n	8003066 <validateAndWriteToOD+0x13a>
    return true;
 8003064:	2001      	movs	r0, #1
}
 8003066:	b002      	add	sp, #8
 8003068:	bd70      	pop	{r4, r5, r6, pc}
 800306a:	bf00      	nop
 800306c:	06070012 	.word	0x06070012
 8003070:	06070013 	.word	0x06070013

08003074 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8003074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003078:	b085      	sub	sp, #20
 800307a:	9101      	str	r1, [sp, #4]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800307c:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
 8003080:	f8d0 80a4 	ldr.w	r8, [r0, #164]	; 0xa4
 8003084:	eba7 0908 	sub.w	r9, r7, r8

    if (!SDO->finished && countRemain < countMinimum) {
 8003088:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800308a:	2d00      	cmp	r5, #0
 800308c:	d175      	bne.n	800317a <readFromOd+0x106>
 800308e:	4604      	mov	r4, r0
 8003090:	4616      	mov	r6, r2
 8003092:	4591      	cmp	r9, r2
 8003094:	d301      	bcc.n	800309a <readFromOd+0x26>
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8003096:	2501      	movs	r5, #1
 8003098:	e070      	b.n	800317c <readFromOd+0x108>
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 800309a:	f100 0a7c 	add.w	sl, r0, #124	; 0x7c
 800309e:	464a      	mov	r2, r9
 80030a0:	eb0a 0108 	add.w	r1, sl, r8
 80030a4:	4650      	mov	r0, sl
 80030a6:	f007 f883 	bl	800a1b0 <memmove>
        SDO->bufOffsetRd = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 80030b0:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80030b4:	eba8 0207 	sub.w	r2, r8, r7
 80030b8:	3220      	adds	r2, #32
        OD_size_t countRd = 0;
 80030ba:	9303      	str	r3, [sp, #12]
        uint8_t *bufShifted = SDO->buf + countRemain;
 80030bc:	eb0a 0809 	add.w	r8, sl, r9
 80030c0:	f114 0018 	adds.w	r0, r4, #24
 80030c4:	d02e      	beq.n	8003124 <readFromOd+0xb0>
 80030c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80030ca:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 80030ce:	d12b      	bne.n	8003128 <readFromOd+0xb4>
 80030d0:	2300      	movs	r3, #0
 80030d2:	469a      	mov	sl, r3
        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80030d4:	b123      	cbz	r3, 80030e0 <readFromOd+0x6c>
 80030d6:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8110 	mrs	r1, PRIMASK
 80030dc:	6359      	str	r1, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80030de:	b672      	cpsid	i
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 80030e0:	ab03      	add	r3, sp, #12
 80030e2:	4641      	mov	r1, r8
 80030e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80030e6:	47b8      	blx	r7
 80030e8:	4683      	mov	fp, r0
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 80030ea:	f1ba 0f00 	cmp.w	sl, #0
 80030ee:	d003      	beq.n	80030f8 <readFromOd+0x84>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f4:	f383 8810 	msr	PRIMASK, r3
        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 80030f8:	f10b 0301 	add.w	r3, fp, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d814      	bhi.n	800312c <readFromOd+0xb8>
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 8003102:	9b03      	ldr	r3, [sp, #12]
 8003104:	b11b      	cbz	r3, 800310e <readFromOd+0x9a>
 8003106:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
 800310a:	2a00      	cmp	r2, #0
 800310c:	db16      	blt.n	800313c <readFromOd+0xc8>
        SDO->bufOffsetWr = countRemain + countRd;
 800310e:	9b03      	ldr	r3, [sp, #12]
 8003110:	444b      	add	r3, r9
 8003112:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8003116:	b323      	cbz	r3, 8003162 <readFromOd+0xee>
 8003118:	f1bb 3fff 	cmp.w	fp, #4294967295
 800311c:	d021      	beq.n	8003162 <readFromOd+0xee>
            SDO->finished = true;
 800311e:	2301      	movs	r3, #1
 8003120:	6723      	str	r3, [r4, #112]	; 0x70
 8003122:	e022      	b.n	800316a <readFromOd+0xf6>
 8003124:	2300      	movs	r3, #0
 8003126:	e7d4      	b.n	80030d2 <readFromOd+0x5e>
 8003128:	2301      	movs	r3, #1
 800312a:	e7d2      	b.n	80030d2 <readFromOd+0x5e>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800312c:	4658      	mov	r0, fp
 800312e:	f7fe fd91 	bl	8001c54 <OD_getSDOabCode>
 8003132:	9b01      	ldr	r3, [sp, #4]
 8003134:	6018      	str	r0, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003136:	2301      	movs	r3, #1
 8003138:	7523      	strb	r3, [r4, #20]
            return false;
 800313a:	e01f      	b.n	800317c <readFromOd+0x108>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 800313c:	2200      	movs	r2, #0
 800313e:	f808 2003 	strb.w	r2, [r8, r3]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8003142:	4640      	mov	r0, r8
 8003144:	f7fd f804 	bl	8000150 <strlen>
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 8003148:	4603      	mov	r3, r0
 800314a:	b900      	cbnz	r0, 800314e <readFromOd+0xda>
 800314c:	2301      	movs	r3, #1
            if (countStr < countRd) {
 800314e:	9a03      	ldr	r2, [sp, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d9dc      	bls.n	800310e <readFromOd+0x9a>
                countRd = countStr;
 8003154:	9303      	str	r3, [sp, #12]
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8003156:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003158:	4413      	add	r3, r2
 800315a:	6223      	str	r3, [r4, #32]
                odRet = ODR_OK;
 800315c:	f04f 0b00 	mov.w	fp, #0
 8003160:	e7d5      	b.n	800310e <readFromOd+0x9a>
            SDO->finished = false;
 8003162:	2200      	movs	r2, #0
 8003164:	6722      	str	r2, [r4, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8003166:	42b3      	cmp	r3, r6
 8003168:	d301      	bcc.n	800316e <readFromOd+0xfa>
    return true;
 800316a:	2501      	movs	r5, #1
 800316c:	e006      	b.n	800317c <readFromOd+0x108>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <readFromOd+0x110>)
 8003170:	9a01      	ldr	r2, [sp, #4]
 8003172:	6013      	str	r3, [r2, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8003174:	2301      	movs	r3, #1
 8003176:	7523      	strb	r3, [r4, #20]
                return false;
 8003178:	e000      	b.n	800317c <readFromOd+0x108>
    return true;
 800317a:	2501      	movs	r5, #1
}
 800317c:	4628      	mov	r0, r5
 800317e:	b005      	add	sp, #20
 8003180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003184:	06040047 	.word	0x06040047

08003188 <CO_SDOserver_init>:
{
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	b089      	sub	sp, #36	; 0x24
 800318e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8003190:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8003194:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8003198:	2800      	cmp	r0, #0
 800319a:	f000 80aa 	beq.w	80032f2 <CO_SDOserver_init+0x16a>
 800319e:	4616      	mov	r6, r2
 80031a0:	4604      	mov	r4, r0
 80031a2:	2900      	cmp	r1, #0
 80031a4:	f000 80a8 	beq.w	80032f8 <CO_SDOserver_init+0x170>
 80031a8:	2f00      	cmp	r7, #0
 80031aa:	f000 80a8 	beq.w	80032fe <CO_SDOserver_init+0x176>
 80031ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80031b0:	2a00      	cmp	r2, #0
 80031b2:	f000 80a7 	beq.w	8003304 <CO_SDOserver_init+0x17c>
    SDO->OD = OD;
 80031b6:	6081      	str	r1, [r0, #8]
    SDO->nodeId = nodeId;
 80031b8:	7303      	strb	r3, [r0, #12]
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80031ba:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80031be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031c2:	fb01 f202 	mul.w	r2, r1, r2
 80031c6:	6742      	str	r2, [r0, #116]	; 0x74
    SDO->state = CO_SDO_ST_IDLE;
 80031c8:	2200      	movs	r2, #0
 80031ca:	7502      	strb	r2, [r0, #20]
    if (OD_1200_SDOsrvPar == NULL) {
 80031cc:	2e00      	cmp	r6, #0
 80031ce:	d05b      	beq.n	8003288 <CO_SDOserver_init+0x100>
    return (entry != NULL) ? entry->index : 0;
 80031d0:	f8b6 8000 	ldrh.w	r8, [r6]
        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 80031d4:	f5b8 5f90 	cmp.w	r8, #4608	; 0x1200
 80031d8:	d060      	beq.n	800329c <CO_SDOserver_init+0x114>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 80031da:	f508 436d 	add.w	r3, r8, #60672	; 0xed00
 80031de:	33ff      	adds	r3, #255	; 0xff
 80031e0:	b29b      	uxth	r3, r3
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 80031e2:	2b7e      	cmp	r3, #126	; 0x7e
 80031e4:	f200 8097 	bhi.w	8003316 <CO_SDOserver_init+0x18e>
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80031e8:	2501      	movs	r5, #1
 80031ea:	9500      	str	r5, [sp, #0]
 80031ec:	462b      	mov	r3, r5
 80031ee:	f10d 0217 	add.w	r2, sp, #23
 80031f2:	2100      	movs	r1, #0
 80031f4:	4630      	mov	r0, r6
 80031f6:	f7fe fd3b 	bl	8001c70 <OD_get_value>
 80031fa:	4683      	mov	fp, r0
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80031fc:	9500      	str	r5, [sp, #0]
 80031fe:	2304      	movs	r3, #4
 8003200:	aa06      	add	r2, sp, #24
 8003202:	4629      	mov	r1, r5
 8003204:	4630      	mov	r0, r6
 8003206:	f7fe fd33 	bl	8001c70 <OD_get_value>
 800320a:	9003      	str	r0, [sp, #12]
 800320c:	9500      	str	r5, [sp, #0]
 800320e:	2304      	movs	r3, #4
 8003210:	aa07      	add	r2, sp, #28
 8003212:	2102      	movs	r1, #2
 8003214:	4630      	mov	r0, r6
 8003216:	f7fe fd2b 	bl	8001c70 <OD_get_value>
            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800321a:	f1bb 0f00 	cmp.w	fp, #0
 800321e:	d15c      	bne.n	80032da <CO_SDOserver_init+0x152>
 8003220:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003224:	3b02      	subs	r3, #2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	42ab      	cmp	r3, r5
 800322a:	d856      	bhi.n	80032da <CO_SDOserver_init+0x152>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 800322c:	9b03      	ldr	r3, [sp, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d153      	bne.n	80032da <CO_SDOserver_init+0x152>
 8003232:	2800      	cmp	r0, #0
 8003234:	d151      	bne.n	80032da <CO_SDOserver_init+0x152>
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8003236:	9b06      	ldr	r3, [sp, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db55      	blt.n	80032e8 <CO_SDOserver_init+0x160>
 800323c:	f3c3 080a 	ubfx	r8, r3, #0, #11
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8003240:	9d07      	ldr	r5, [sp, #28]
 8003242:	2d00      	cmp	r5, #0
 8003244:	db53      	blt.n	80032ee <CO_SDOserver_init+0x166>
 8003246:	f3c5 050a 	ubfx	r5, r5, #0, #11
            SDO->OD_1200_extension.object = SDO;
 800324a:	6564      	str	r4, [r4, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <CO_SDOserver_init+0x194>)
 800324e:	65a3      	str	r3, [r4, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003250:	4b33      	ldr	r3, [pc, #204]	; (8003320 <CO_SDOserver_init+0x198>)
 8003252:	65e3      	str	r3, [r4, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 8003254:	f104 0354 	add.w	r3, r4, #84	; 0x54
    entry->extension = extension;
 8003258:	60b3      	str	r3, [r6, #8]
    CO_FLAG_CLEAR(SDO->CANrxNew);
 800325a:	2300      	movs	r3, #0
 800325c:	63a3      	str	r3, [r4, #56]	; 0x38
    SDO->CANdevRx = CANdevRx;
 800325e:	6467      	str	r7, [r4, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003260:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003264:	f8a4 a04a 	strh.w	sl, [r4, #74]	; 0x4a
    SDO->COB_IDClientToServer = 0;
 8003268:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 800326a:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->CANdevTx = CANdevTx;
 800326c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800326e:	6023      	str	r3, [r4, #0]
    return CO_SDOserver_init_canRxTx(SDO,
 8003270:	9501      	str	r5, [sp, #4]
 8003272:	f8cd 8000 	str.w	r8, [sp]
 8003276:	4653      	mov	r3, sl
 8003278:	464a      	mov	r2, r9
 800327a:	4639      	mov	r1, r7
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff fd1b 	bl	8002cb8 <CO_SDOserver_init_canRxTx>
}
 8003282:	b009      	add	sp, #36	; 0x24
 8003284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003288:	b25a      	sxtb	r2, r3
 800328a:	2a00      	cmp	r2, #0
 800328c:	dd3d      	ble.n	800330a <CO_SDOserver_init+0x182>
        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800328e:	f503 68c0 	add.w	r8, r3, #1536	; 0x600
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003292:	f503 65b0 	add.w	r5, r3, #1408	; 0x580
        SDO->valid = true;
 8003296:	2301      	movs	r3, #1
 8003298:	6103      	str	r3, [r0, #16]
 800329a:	e7de      	b.n	800325a <CO_SDOserver_init+0xd2>
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 800329c:	b25a      	sxtb	r2, r3
 800329e:	2a00      	cmp	r2, #0
 80032a0:	dd36      	ble.n	8003310 <CO_SDOserver_init+0x188>
            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80032a2:	f503 68c0 	add.w	r8, r3, #1536	; 0x600
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80032a6:	f503 65b0 	add.w	r5, r3, #1408	; 0x580
            SDO->valid = true;
 80032aa:	f04f 0b01 	mov.w	fp, #1
 80032ae:	f8c0 b010 	str.w	fp, [r0, #16]
            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80032b2:	f8cd 801c 	str.w	r8, [sp, #28]

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 80032b6:	f8cd b000 	str.w	fp, [sp]
 80032ba:	2304      	movs	r3, #4
 80032bc:	aa07      	add	r2, sp, #28
 80032be:	4659      	mov	r1, fp
 80032c0:	4630      	mov	r0, r6
 80032c2:	f7fe fcf0 	bl	8001ca6 <OD_set_value>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80032c6:	9507      	str	r5, [sp, #28]
 80032c8:	f8cd b000 	str.w	fp, [sp]
 80032cc:	2304      	movs	r3, #4
 80032ce:	aa07      	add	r2, sp, #28
 80032d0:	2102      	movs	r1, #2
 80032d2:	4630      	mov	r0, r6
 80032d4:	f7fe fce7 	bl	8001ca6 <OD_set_value>
 80032d8:	e7bf      	b.n	800325a <CO_SDOserver_init+0xd2>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 80032da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80032dc:	b10b      	cbz	r3, 80032e2 <CO_SDOserver_init+0x15a>
 80032de:	f8c3 8000 	str.w	r8, [r3]
                return CO_ERROR_OD_PARAMETERS;
 80032e2:	f06f 000b 	mvn.w	r0, #11
 80032e6:	e7cc      	b.n	8003282 <CO_SDOserver_init+0xfa>
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80032e8:	f04f 0800 	mov.w	r8, #0
 80032ec:	e7a8      	b.n	8003240 <CO_SDOserver_init+0xb8>
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80032ee:	2500      	movs	r5, #0
 80032f0:	e7ab      	b.n	800324a <CO_SDOserver_init+0xc2>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80032f2:	f04f 30ff 	mov.w	r0, #4294967295
 80032f6:	e7c4      	b.n	8003282 <CO_SDOserver_init+0xfa>
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	e7c1      	b.n	8003282 <CO_SDOserver_init+0xfa>
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	e7be      	b.n	8003282 <CO_SDOserver_init+0xfa>
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	e7bb      	b.n	8003282 <CO_SDOserver_init+0xfa>
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 800330a:	f04f 30ff 	mov.w	r0, #4294967295
 800330e:	e7b8      	b.n	8003282 <CO_SDOserver_init+0xfa>
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003310:	f04f 30ff 	mov.w	r0, #4294967295
 8003314:	e7b5      	b.n	8003282 <CO_SDOserver_init+0xfa>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	e7b2      	b.n	8003282 <CO_SDOserver_init+0xfa>
 800331c:	08001a29 	.word	0x08001a29
 8003320:	08002d49 	.word	0x08002d49

08003324 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b085      	sub	sp, #20
    if (SDO == NULL) {
 8003328:	2800      	cmp	r0, #0
 800332a:	f000 8305 	beq.w	8003938 <CO_SDOserver_process+0x614>
 800332e:	4604      	mov	r4, r0
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003330:	2300      	movs	r3, #0
 8003332:	9303      	str	r3, [sp, #12]
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8003334:	6b80      	ldr	r0, [r0, #56]	; 0x38


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	b123      	cbz	r3, 8003344 <CO_SDOserver_process+0x20>
 800333a:	7d25      	ldrb	r5, [r4, #20]
 800333c:	b915      	cbnz	r5, 8003344 <CO_SDOserver_process+0x20>
 800333e:	2800      	cmp	r0, #0
 8003340:	f000 81c1 	beq.w	80036c6 <CO_SDOserver_process+0x3a2>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8003344:	b101      	cbz	r1, 8003348 <CO_SDOserver_process+0x24>
 8003346:	b95b      	cbnz	r3, 8003360 <CO_SDOserver_process+0x3c>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8003348:	2500      	movs	r5, #0
 800334a:	7525      	strb	r5, [r4, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800334c:	63a5      	str	r5, [r4, #56]	; 0x38
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 800334e:	2d01      	cmp	r5, #1
 8003350:	f000 81bb 	beq.w	80036ca <CO_SDOserver_process+0x3a6>
            break;
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8003354:	2d01      	cmp	r5, #1
 8003356:	f000 82c6 	beq.w	80038e6 <CO_SDOserver_process+0x5c2>
        }
#endif
    }

    return ret;
}
 800335a:	4628      	mov	r0, r5
 800335c:	b005      	add	sp, #20
 800335e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (isNew) {
 8003360:	2800      	cmp	r0, #0
 8003362:	f000 817e 	beq.w	8003662 <CO_SDOserver_process+0x33e>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8003366:	7d23      	ldrb	r3, [r4, #20]
 8003368:	b993      	cbnz	r3, 8003390 <CO_SDOserver_process+0x6c>
            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 800336a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800336e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003372:	2a20      	cmp	r2, #32
 8003374:	d02f      	beq.n	80033d6 <CO_SDOserver_process+0xb2>
            else if (SDO->CANrxData[0] == 0x40) {
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d031      	beq.n	80033de <CO_SDOserver_process+0xba>
                abortCode = CO_SDO_AB_CMD;
 800337a:	4b95      	ldr	r3, [pc, #596]	; (80035d0 <CO_SDOserver_process+0x2ac>)
 800337c:	9303      	str	r3, [sp, #12]
                SDO->state = CO_SDO_ST_ABORT;
 800337e:	2301      	movs	r3, #1
 8003380:	7523      	strb	r3, [r4, #20]
            bool_t upload = false;
 8003382:	2500      	movs	r5, #0
            if (abortCode == CO_SDO_AB_NONE) {
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	b373      	cbz	r3, 80033e6 <CO_SDOserver_process+0xc2>
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8003388:	b115      	cbz	r5, 8003390 <CO_SDOserver_process+0x6c>
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d063      	beq.n	8003458 <CO_SDOserver_process+0x134>
        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8003390:	7d23      	ldrb	r3, [r4, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8162 	beq.w	800365c <CO_SDOserver_process+0x338>
 8003398:	7d23      	ldrb	r3, [r4, #20]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	f000 815d 	beq.w	800365c <CO_SDOserver_process+0x338>
        switch (SDO->state) {
 80033a2:	7d23      	ldrb	r3, [r4, #20]
 80033a4:	3b11      	subs	r3, #17
 80033a6:	2b12      	cmp	r3, #18
 80033a8:	f200 8188 	bhi.w	80036bc <CO_SDOserver_process+0x398>
 80033ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033b0:	0186007a 	.word	0x0186007a
 80033b4:	018600fd 	.word	0x018600fd
 80033b8:	01860186 	.word	0x01860186
 80033bc:	01860186 	.word	0x01860186
 80033c0:	01860186 	.word	0x01860186
 80033c4:	01860186 	.word	0x01860186
 80033c8:	01860186 	.word	0x01860186
 80033cc:	01860186 	.word	0x01860186
 80033d0:	01860154 	.word	0x01860154
 80033d4:	016d      	.short	0x016d
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 80033d6:	2311      	movs	r3, #17
 80033d8:	7523      	strb	r3, [r4, #20]
            bool_t upload = false;
 80033da:	2500      	movs	r5, #0
 80033dc:	e7d2      	b.n	8003384 <CO_SDOserver_process+0x60>
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 80033de:	2321      	movs	r3, #33	; 0x21
 80033e0:	7523      	strb	r3, [r4, #20]
                upload = true;
 80033e2:	2501      	movs	r5, #1
 80033e4:	e7ce      	b.n	8003384 <CO_SDOserver_process+0x60>
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80033e6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
                             | SDO->CANrxData[1];
 80033ea:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80033ee:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80033f2:	86a1      	strh	r1, [r4, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 80033f4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80033f8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 80033fc:	68a0      	ldr	r0, [r4, #8]
 80033fe:	f7fe fb73 	bl	8001ae8 <OD_find>
 8003402:	2300      	movs	r3, #0
 8003404:	f104 0218 	add.w	r2, r4, #24
 8003408:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 800340c:	f7fe fba0 	bl	8001b50 <OD_getSub>
                if (odRet != ODR_OK) {
 8003410:	b948      	cbnz	r0, 8003426 <CO_SDOserver_process+0x102>
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 8003412:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003416:	f013 0f03 	tst.w	r3, #3
 800341a:	d10a      	bne.n	8003432 <CO_SDOserver_process+0x10e>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 800341c:	4b6d      	ldr	r3, [pc, #436]	; (80035d4 <CO_SDOserver_process+0x2b0>)
 800341e:	9303      	str	r3, [sp, #12]
                        SDO->state = CO_SDO_ST_ABORT;
 8003420:	2301      	movs	r3, #1
 8003422:	7523      	strb	r3, [r4, #20]
 8003424:	e7b0      	b.n	8003388 <CO_SDOserver_process+0x64>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003426:	f7fe fc15 	bl	8001c54 <OD_getSDOabCode>
 800342a:	9003      	str	r0, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 800342c:	2301      	movs	r3, #1
 800342e:	7523      	strb	r3, [r4, #20]
 8003430:	e7aa      	b.n	8003388 <CO_SDOserver_process+0x64>
                    else if (upload
 8003432:	b13d      	cbz	r5, 8003444 <CO_SDOserver_process+0x120>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8003434:	f013 0f01 	tst.w	r3, #1
 8003438:	d104      	bne.n	8003444 <CO_SDOserver_process+0x120>
                        abortCode = CO_SDO_AB_WRITEONLY;
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <CO_SDOserver_process+0x2b4>)
 800343c:	9303      	str	r3, [sp, #12]
                        SDO->state = CO_SDO_ST_ABORT;
 800343e:	2301      	movs	r3, #1
 8003440:	7523      	strb	r3, [r4, #20]
 8003442:	e7a1      	b.n	8003388 <CO_SDOserver_process+0x64>
                    else if (!upload
 8003444:	2d00      	cmp	r5, #0
 8003446:	d19f      	bne.n	8003388 <CO_SDOserver_process+0x64>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8003448:	f013 0f02 	tst.w	r3, #2
 800344c:	d19c      	bne.n	8003388 <CO_SDOserver_process+0x64>
                        abortCode = CO_SDO_AB_READONLY;
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <CO_SDOserver_process+0x2b8>)
 8003450:	9303      	str	r3, [sp, #12]
                        SDO->state = CO_SDO_ST_ABORT;
 8003452:	2301      	movs	r3, #1
 8003454:	7523      	strb	r3, [r4, #20]
 8003456:	e797      	b.n	8003388 <CO_SDOserver_process+0x64>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8003458:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800345c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
                SDO->sizeTran = 0;
 8003460:	66a3      	str	r3, [r4, #104]	; 0x68
                SDO->finished = false;
 8003462:	6723      	str	r3, [r4, #112]	; 0x70
                if (readFromOd(SDO, &abortCode, 7, false)) {
 8003464:	2207      	movs	r2, #7
 8003466:	a903      	add	r1, sp, #12
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff fe03 	bl	8003074 <readFromOd>
 800346e:	2800      	cmp	r0, #0
 8003470:	d08e      	beq.n	8003390 <CO_SDOserver_process+0x6c>
                    if (SDO->finished) {
 8003472:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003474:	b17b      	cbz	r3, 8003496 <CO_SDOserver_process+0x172>
                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8003476:	6a23      	ldr	r3, [r4, #32]
 8003478:	6663      	str	r3, [r4, #100]	; 0x64
                        if (SDO->sizeInd == 0) {
 800347a:	b91b      	cbnz	r3, 8003484 <CO_SDOserver_process+0x160>
                            SDO->sizeInd = SDO->bufOffsetWr;
 800347c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003480:	6663      	str	r3, [r4, #100]	; 0x64
 8003482:	e785      	b.n	8003390 <CO_SDOserver_process+0x6c>
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8003484:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8003488:	4293      	cmp	r3, r2
 800348a:	d081      	beq.n	8003390 <CO_SDOserver_process+0x6c>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800348c:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <CO_SDOserver_process+0x2bc>)
 800348e:	9303      	str	r3, [sp, #12]
                            SDO->state = CO_SDO_ST_ABORT;
 8003490:	2301      	movs	r3, #1
 8003492:	7523      	strb	r3, [r4, #20]
 8003494:	e77c      	b.n	8003390 <CO_SDOserver_process+0x6c>
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8003496:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
                                     : 0;
 800349a:	2a00      	cmp	r2, #0
 800349c:	db00      	blt.n	80034a0 <CO_SDOserver_process+0x17c>
 800349e:	6a23      	ldr	r3, [r4, #32]
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80034a0:	6663      	str	r3, [r4, #100]	; 0x64
 80034a2:	e775      	b.n	8003390 <CO_SDOserver_process+0x6c>
            if (SDO->CANrxData[0] & 0x02) {
 80034a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80034a8:	f013 0f02 	tst.w	r3, #2
 80034ac:	d05d      	beq.n	800356a <CO_SDOserver_process+0x246>
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80034ae:	6a26      	ldr	r6, [r4, #32]
                if (SDO->CANrxData[0] & 0x01)
 80034b0:	f013 0f01 	tst.w	r3, #1
 80034b4:	d034      	beq.n	8003520 <CO_SDOserver_process+0x1fc>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 80034b6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80034ba:	f1c3 0504 	rsb	r5, r3, #4
                uint8_t buf[6] = {0};
 80034be:	2300      	movs	r3, #0
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	f8ad 3008 	strh.w	r3, [sp, #8]
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80034c6:	462a      	mov	r2, r5
 80034c8:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80034cc:	a801      	add	r0, sp, #4
 80034ce:	f006 fe61 	bl	800a194 <memcpy>
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80034d2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80034d6:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	db27      	blt.n	800352e <CO_SDOserver_process+0x20a>
                else if (sizeInOd == 0) {
 80034de:	bb86      	cbnz	r6, 8003542 <CO_SDOserver_process+0x21e>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80034e0:	6225      	str	r5, [r4, #32]
                OD_size_t countWritten = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	9300      	str	r3, [sp, #0]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 80034e6:	f114 0018 	adds.w	r0, r4, #24
 80034ea:	d034      	beq.n	8003556 <CO_SDOserver_process+0x232>
 80034ec:	f012 0f3c 	tst.w	r2, #60	; 0x3c
 80034f0:	d133      	bne.n	800355a <CO_SDOserver_process+0x236>
 80034f2:	461e      	mov	r6, r3
                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80034f4:	b123      	cbz	r3, 8003500 <CO_SDOserver_process+0x1dc>
 80034f6:	6823      	ldr	r3, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8210 	mrs	r2, PRIMASK
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80034fe:	b672      	cpsid	i
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8003500:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003502:	466b      	mov	r3, sp
 8003504:	462a      	mov	r2, r5
 8003506:	a901      	add	r1, sp, #4
 8003508:	47b8      	blx	r7
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 800350a:	b11e      	cbz	r6, 8003514 <CO_SDOserver_process+0x1f0>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	f383 8810 	msr	PRIMASK, r3
                if (odRet != ODR_OK) {
 8003514:	bb18      	cbnz	r0, 800355e <CO_SDOserver_process+0x23a>
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003516:	2312      	movs	r3, #18
 8003518:	7523      	strb	r3, [r4, #20]
                    SDO->finished = true;
 800351a:	2301      	movs	r3, #1
 800351c:	6723      	str	r3, [r4, #112]	; 0x70
 800351e:	e09d      	b.n	800365c <CO_SDOserver_process+0x338>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8003520:	1e73      	subs	r3, r6, #1
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <CO_SDOserver_process+0x206>
                OD_size_t dataSizeToWrite = 4;
 8003526:	2504      	movs	r5, #4
 8003528:	e7c9      	b.n	80034be <CO_SDOserver_process+0x19a>
                    dataSizeToWrite = sizeInOd;
 800352a:	4635      	mov	r5, r6
 800352c:	e7c7      	b.n	80034be <CO_SDOserver_process+0x19a>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 800352e:	b10e      	cbz	r6, 8003534 <CO_SDOserver_process+0x210>
 8003530:	42b5      	cmp	r5, r6
 8003532:	d2d4      	bcs.n	80034de <CO_SDOserver_process+0x1ba>
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8003534:	1b76      	subs	r6, r6, r5
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8003536:	2e01      	cmp	r6, #1
 8003538:	d000      	beq.n	800353c <CO_SDOserver_process+0x218>
 800353a:	2602      	movs	r6, #2
 800353c:	4435      	add	r5, r6
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800353e:	6225      	str	r5, [r4, #32]
                ) {
 8003540:	e7cf      	b.n	80034e2 <CO_SDOserver_process+0x1be>
                else if (dataSizeToWrite != sizeInOd) {
 8003542:	42b5      	cmp	r5, r6
 8003544:	d0cd      	beq.n	80034e2 <CO_SDOserver_process+0x1be>
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003546:	d904      	bls.n	8003552 <CO_SDOserver_process+0x22e>
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <CO_SDOserver_process+0x2c0>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 800354a:	9303      	str	r3, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 800354c:	2301      	movs	r3, #1
 800354e:	7523      	strb	r3, [r4, #20]
                    break;
 8003550:	e084      	b.n	800365c <CO_SDOserver_process+0x338>
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003552:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <CO_SDOserver_process+0x2c4>)
 8003554:	e7f9      	b.n	800354a <CO_SDOserver_process+0x226>
 8003556:	2300      	movs	r3, #0
 8003558:	e7cb      	b.n	80034f2 <CO_SDOserver_process+0x1ce>
 800355a:	2301      	movs	r3, #1
 800355c:	e7c9      	b.n	80034f2 <CO_SDOserver_process+0x1ce>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800355e:	f7fe fb79 	bl	8001c54 <OD_getSDOabCode>
 8003562:	9003      	str	r0, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 8003564:	2301      	movs	r3, #1
 8003566:	7523      	strb	r3, [r4, #20]
                    break;
 8003568:	e078      	b.n	800365c <CO_SDOserver_process+0x338>
                if (SDO->CANrxData[0] & 0x01) {
 800356a:	f013 0f01 	tst.w	r3, #1
 800356e:	d015      	beq.n	800359c <CO_SDOserver_process+0x278>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003570:	6a22      	ldr	r2, [r4, #32]
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8003572:	6c23      	ldr	r3, [r4, #64]	; 0x40
                    SDO->sizeInd = CO_SWAP_32(size);
 8003574:	6663      	str	r3, [r4, #100]	; 0x64
                    if (sizeInOd > 0) {
 8003576:	b19a      	cbz	r2, 80035a0 <CO_SDOserver_process+0x27c>
                        if (SDO->sizeInd > sizeInOd) {
 8003578:	429a      	cmp	r2, r3
 800357a:	d204      	bcs.n	8003586 <CO_SDOserver_process+0x262>
                            abortCode = CO_SDO_AB_DATA_LONG;
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <CO_SDOserver_process+0x2c0>)
 800357e:	9303      	str	r3, [sp, #12]
                            SDO->state = CO_SDO_ST_ABORT;
 8003580:	2301      	movs	r3, #1
 8003582:	7523      	strb	r3, [r4, #20]
                            break;
 8003584:	e06a      	b.n	800365c <CO_SDOserver_process+0x338>
                        else if (SDO->sizeInd < sizeInOd
 8003586:	429a      	cmp	r2, r3
 8003588:	d90a      	bls.n	80035a0 <CO_SDOserver_process+0x27c>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 800358a:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	db06      	blt.n	80035a0 <CO_SDOserver_process+0x27c>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <CO_SDOserver_process+0x2c4>)
 8003594:	9303      	str	r3, [sp, #12]
                            SDO->state = CO_SDO_ST_ABORT;
 8003596:	2301      	movs	r3, #1
 8003598:	7523      	strb	r3, [r4, #20]
                            break;
 800359a:	e05f      	b.n	800365c <CO_SDOserver_process+0x338>
                    SDO->sizeInd = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	6663      	str	r3, [r4, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80035a0:	2312      	movs	r3, #18
 80035a2:	7523      	strb	r3, [r4, #20]
                SDO->finished = false;
 80035a4:	2300      	movs	r3, #0
 80035a6:	6723      	str	r3, [r4, #112]	; 0x70
 80035a8:	e058      	b.n	800365c <CO_SDOserver_process+0x338>
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 80035aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80035ae:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80035b2:	d14c      	bne.n	800364e <CO_SDOserver_process+0x32a>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 80035b4:	f003 0201 	and.w	r2, r3, #1
 80035b8:	6722      	str	r2, [r4, #112]	; 0x70
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 80035ba:	f003 0210 	and.w	r2, r3, #16
                if (toggle != SDO->toggle) {
 80035be:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 80035c2:	4291      	cmp	r1, r2
 80035c4:	d014      	beq.n	80035f0 <CO_SDOserver_process+0x2cc>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <CO_SDOserver_process+0x2c8>)
 80035c8:	9303      	str	r3, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 80035ca:	2301      	movs	r3, #1
 80035cc:	7523      	strb	r3, [r4, #20]
                    break;
 80035ce:	e045      	b.n	800365c <CO_SDOserver_process+0x338>
 80035d0:	05040001 	.word	0x05040001
 80035d4:	06010000 	.word	0x06010000
 80035d8:	06010001 	.word	0x06010001
 80035dc:	06010002 	.word	0x06010002
 80035e0:	06040047 	.word	0x06040047
 80035e4:	06070012 	.word	0x06070012
 80035e8:	06070013 	.word	0x06070013
 80035ec:	05030000 	.word	0x05030000
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 80035f0:	ea6f 0353 	mvn.w	r3, r3, lsr #1
 80035f4:	f003 0507 	and.w	r5, r3, #7
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 80035f8:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 80035fc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003600:	462a      	mov	r2, r5
 8003602:	f104 013d 	add.w	r1, r4, #61	; 0x3d
 8003606:	4418      	add	r0, r3
 8003608:	f006 fdc4 	bl	800a194 <memcpy>
                SDO->bufOffsetWr += count;
 800360c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003610:	442b      	add	r3, r5
 8003612:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                SDO->sizeTran += count;
 8003616:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003618:	4415      	add	r5, r2
 800361a:	66a5      	str	r5, [r4, #104]	; 0x68
                if (SDO->OD_IO.stream.dataLength > 0
 800361c:	6a22      	ldr	r2, [r4, #32]
 800361e:	b132      	cbz	r2, 800362e <CO_SDOserver_process+0x30a>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8003620:	4295      	cmp	r5, r2
 8003622:	d904      	bls.n	800362e <CO_SDOserver_process+0x30a>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8003624:	4ba8      	ldr	r3, [pc, #672]	; (80038c8 <CO_SDOserver_process+0x5a4>)
 8003626:	9303      	str	r3, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 8003628:	2301      	movs	r3, #1
 800362a:	7523      	strb	r3, [r4, #20]
                    break;
 800362c:	e016      	b.n	800365c <CO_SDOserver_process+0x338>
                if (SDO->finished
 800362e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003630:	b91a      	cbnz	r2, 800363a <CO_SDOserver_process+0x316>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8003632:	f1c3 0320 	rsb	r3, r3, #32
 8003636:	2b08      	cmp	r3, #8
 8003638:	d806      	bhi.n	8003648 <CO_SDOserver_process+0x324>
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 800363a:	2300      	movs	r3, #0
 800363c:	461a      	mov	r2, r3
 800363e:	a903      	add	r1, sp, #12
 8003640:	4620      	mov	r0, r4
 8003642:	f7ff fc73 	bl	8002f2c <validateAndWriteToOD>
 8003646:	b148      	cbz	r0, 800365c <CO_SDOserver_process+0x338>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8003648:	2314      	movs	r3, #20
 800364a:	7523      	strb	r3, [r4, #20]
 800364c:	e006      	b.n	800365c <CO_SDOserver_process+0x338>
                abortCode = CO_SDO_AB_CMD;
 800364e:	4b9f      	ldr	r3, [pc, #636]	; (80038cc <CO_SDOserver_process+0x5a8>)
 8003650:	9303      	str	r3, [sp, #12]
                SDO->state = CO_SDO_ST_ABORT;
 8003652:	2301      	movs	r3, #1
 8003654:	7523      	strb	r3, [r4, #20]
 8003656:	e001      	b.n	800365c <CO_SDOserver_process+0x338>
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8003658:	2322      	movs	r3, #34	; 0x22
 800365a:	7523      	strb	r3, [r4, #20]
        SDO->timeoutTimer = 0;
 800365c:	2200      	movs	r2, #0
 800365e:	67a2      	str	r2, [r4, #120]	; 0x78
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003660:	63a2      	str	r2, [r4, #56]	; 0x38
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8003662:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003664:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003666:	428b      	cmp	r3, r1
 8003668:	d201      	bcs.n	800366e <CO_SDOserver_process+0x34a>
            SDO->timeoutTimer += timeDifference_us;
 800366a:	441a      	add	r2, r3
 800366c:	67a2      	str	r2, [r4, #120]	; 0x78
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800366e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003670:	4299      	cmp	r1, r3
 8003672:	d803      	bhi.n	800367c <CO_SDOserver_process+0x358>
            abortCode = CO_SDO_AB_TIMEOUT;
 8003674:	4b96      	ldr	r3, [pc, #600]	; (80038d0 <CO_SDOserver_process+0x5ac>)
 8003676:	9303      	str	r3, [sp, #12]
            SDO->state = CO_SDO_ST_ABORT;
 8003678:	2301      	movs	r3, #1
 800367a:	7523      	strb	r3, [r4, #20]
        if (SDO->CANtxBuff->bufferFull) {
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 8157 	bne.w	8003934 <CO_SDOserver_process+0x610>
 8003686:	2501      	movs	r5, #1
 8003688:	e661      	b.n	800334e <CO_SDOserver_process+0x2a>
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 800368a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800368e:	f003 02ef 	and.w	r2, r3, #239	; 0xef
 8003692:	2a60      	cmp	r2, #96	; 0x60
 8003694:	d004      	beq.n	80036a0 <CO_SDOserver_process+0x37c>
                abortCode = CO_SDO_AB_CMD;
 8003696:	4b8d      	ldr	r3, [pc, #564]	; (80038cc <CO_SDOserver_process+0x5a8>)
 8003698:	9303      	str	r3, [sp, #12]
                SDO->state = CO_SDO_ST_ABORT;
 800369a:	2301      	movs	r3, #1
 800369c:	7523      	strb	r3, [r4, #20]
 800369e:	e7dd      	b.n	800365c <CO_SDOserver_process+0x338>
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 80036a0:	f003 0310 	and.w	r3, r3, #16
                if (toggle != SDO->toggle) {
 80036a4:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d004      	beq.n	80036b6 <CO_SDOserver_process+0x392>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 80036ac:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <CO_SDOserver_process+0x5b0>)
 80036ae:	9303      	str	r3, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 80036b0:	2301      	movs	r3, #1
 80036b2:	7523      	strb	r3, [r4, #20]
                    break;
 80036b4:	e7d2      	b.n	800365c <CO_SDOserver_process+0x338>
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 80036b6:	2324      	movs	r3, #36	; 0x24
 80036b8:	7523      	strb	r3, [r4, #20]
 80036ba:	e7cf      	b.n	800365c <CO_SDOserver_process+0x338>
            abortCode = CO_SDO_AB_CMD;
 80036bc:	4b83      	ldr	r3, [pc, #524]	; (80038cc <CO_SDOserver_process+0x5a8>)
 80036be:	9303      	str	r3, [sp, #12]
            SDO->state = CO_SDO_ST_ABORT;
 80036c0:	2301      	movs	r3, #1
 80036c2:	7523      	strb	r3, [r4, #20]
 80036c4:	e7ca      	b.n	800365c <CO_SDOserver_process+0x338>
        ret = CO_SDO_RT_ok_communicationEnd;
 80036c6:	2500      	movs	r5, #0
 80036c8:	e641      	b.n	800334e <CO_SDOserver_process+0x2a>
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c3 2005 	str.w	r2, [r3, #5]
 80036d2:	f8c3 2009 	str.w	r2, [r3, #9]
        switch (SDO->state) {
 80036d6:	7d23      	ldrb	r3, [r4, #20]
 80036d8:	3b12      	subs	r3, #18
 80036da:	2b12      	cmp	r3, #18
 80036dc:	f63f ae3a 	bhi.w	8003354 <CO_SDOserver_process+0x30>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <CO_SDOserver_process+0x3c4>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	08003735 	.word	0x08003735
 80036ec:	08003355 	.word	0x08003355
 80036f0:	0800377f 	.word	0x0800377f
 80036f4:	08003355 	.word	0x08003355
 80036f8:	08003355 	.word	0x08003355
 80036fc:	08003355 	.word	0x08003355
 8003700:	08003355 	.word	0x08003355
 8003704:	08003355 	.word	0x08003355
 8003708:	08003355 	.word	0x08003355
 800370c:	08003355 	.word	0x08003355
 8003710:	08003355 	.word	0x08003355
 8003714:	08003355 	.word	0x08003355
 8003718:	08003355 	.word	0x08003355
 800371c:	08003355 	.word	0x08003355
 8003720:	08003355 	.word	0x08003355
 8003724:	08003355 	.word	0x08003355
 8003728:	080037b7 	.word	0x080037b7
 800372c:	08003355 	.word	0x08003355
 8003730:	08003829 	.word	0x08003829
            SDO->CANtxBuff->data[0] = 0x60;
 8003734:	6863      	ldr	r3, [r4, #4]
 8003736:	2260      	movs	r2, #96	; 0x60
 8003738:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003740:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003742:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8003744:	6862      	ldr	r2, [r4, #4]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	71d3      	strb	r3, [r2, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8003750:	721a      	strb	r2, [r3, #8]
            SDO->timeoutTimer = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	67a3      	str	r3, [r4, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003756:	6861      	ldr	r1, [r4, #4]
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	f002 f973 	bl	8005a44 <CO_CANsend>
            if (SDO->finished) {
 800375e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003760:	b113      	cbz	r3, 8003768 <CO_SDOserver_process+0x444>
                SDO->state = CO_SDO_ST_IDLE;
 8003762:	2500      	movs	r5, #0
 8003764:	7525      	strb	r5, [r4, #20]
    if (ret == CO_SDO_RT_waitingResponse) {
 8003766:	e5f8      	b.n	800335a <CO_SDOserver_process+0x36>
                SDO->toggle = 0x00;
 8003768:	2300      	movs	r3, #0
 800376a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
                SDO->sizeTran = 0;
 800376e:	66a3      	str	r3, [r4, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 8003770:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 8003774:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003778:	2313      	movs	r3, #19
 800377a:	7523      	strb	r3, [r4, #20]
 800377c:	e5ea      	b.n	8003354 <CO_SDOserver_process+0x30>
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 800377e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8003782:	6862      	ldr	r2, [r4, #4]
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	7153      	strb	r3, [r2, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 800378a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800378e:	b96b      	cbnz	r3, 80037ac <CO_SDOserver_process+0x488>
 8003790:	2310      	movs	r3, #16
 8003792:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
            SDO->timeoutTimer = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	67a3      	str	r3, [r4, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800379a:	6861      	ldr	r1, [r4, #4]
 800379c:	6820      	ldr	r0, [r4, #0]
 800379e:	f002 f951 	bl	8005a44 <CO_CANsend>
            if (SDO->finished) {
 80037a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80037a4:	b123      	cbz	r3, 80037b0 <CO_SDOserver_process+0x48c>
                SDO->state = CO_SDO_ST_IDLE;
 80037a6:	2500      	movs	r5, #0
 80037a8:	7525      	strb	r5, [r4, #20]
    if (ret == CO_SDO_RT_waitingResponse) {
 80037aa:	e5d6      	b.n	800335a <CO_SDOserver_process+0x36>
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e7f0      	b.n	8003792 <CO_SDOserver_process+0x46e>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80037b0:	2313      	movs	r3, #19
 80037b2:	7523      	strb	r3, [r4, #20]
 80037b4:	e5ce      	b.n	8003354 <CO_SDOserver_process+0x30>
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 80037b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037b8:	1e5a      	subs	r2, r3, #1
 80037ba:	2a03      	cmp	r2, #3
 80037bc:	d91d      	bls.n	80037fa <CO_SDOserver_process+0x4d6>
                if (SDO->sizeInd > 0) {
 80037be:	b37b      	cbz	r3, 8003820 <CO_SDOserver_process+0x4fc>
                    SDO->CANtxBuff->data[0] = 0x41;
 80037c0:	6862      	ldr	r2, [r4, #4]
 80037c2:	2141      	movs	r1, #65	; 0x41
 80037c4:	7151      	strb	r1, [r2, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 80037c6:	6862      	ldr	r2, [r4, #4]
 80037c8:	f8c2 3009 	str.w	r3, [r2, #9]
                SDO->toggle = 0x00;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 80037d2:	67a3      	str	r3, [r4, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80037d4:	2323      	movs	r3, #35	; 0x23
 80037d6:	7523      	strb	r3, [r4, #20]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80037d8:	6863      	ldr	r3, [r4, #4]
 80037da:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80037de:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80037e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	71d3      	strb	r3, [r2, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80037ee:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80037f0:	6861      	ldr	r1, [r4, #4]
 80037f2:	6820      	ldr	r0, [r4, #0]
 80037f4:	f002 f926 	bl	8005a44 <CO_CANsend>
            break;
 80037f8:	e5ac      	b.n	8003354 <CO_SDOserver_process+0x30>
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 80037fa:	f1c3 0304 	rsb	r3, r3, #4
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	b2db      	uxtb	r3, r3
 8003804:	6862      	ldr	r2, [r4, #4]
 8003806:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 800380a:	7153      	strb	r3, [r2, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 800380c:	6860      	ldr	r0, [r4, #4]
 800380e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003810:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 8003814:	3009      	adds	r0, #9
 8003816:	f006 fcbd 	bl	800a194 <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 800381a:	2500      	movs	r5, #0
 800381c:	7525      	strb	r5, [r4, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 800381e:	e7db      	b.n	80037d8 <CO_SDOserver_process+0x4b4>
                    SDO->CANtxBuff->data[0] = 0x40;
 8003820:	6863      	ldr	r3, [r4, #4]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	715a      	strb	r2, [r3, #5]
 8003826:	e7d1      	b.n	80037cc <CO_SDOserver_process+0x4a8>
            if (!readFromOd(SDO, &abortCode, 7, false))
 8003828:	2300      	movs	r3, #0
 800382a:	2207      	movs	r2, #7
 800382c:	a903      	add	r1, sp, #12
 800382e:	4620      	mov	r0, r4
 8003830:	f7ff fc20 	bl	8003074 <readFromOd>
 8003834:	2800      	cmp	r0, #0
 8003836:	f43f ad8d 	beq.w	8003354 <CO_SDOserver_process+0x30>
            SDO->CANtxBuff->data[0] = SDO->toggle;
 800383a:	6862      	ldr	r2, [r4, #4]
 800383c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8003840:	7153      	strb	r3, [r2, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8003842:	b9a3      	cbnz	r3, 800386e <CO_SDOserver_process+0x54a>
 8003844:	2310      	movs	r3, #16
 8003846:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800384a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800384e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003852:	1af6      	subs	r6, r6, r3
            if (count < 7 || (SDO->finished && count == 7)) {
 8003854:	2e06      	cmp	r6, #6
 8003856:	d90c      	bls.n	8003872 <CO_SDOserver_process+0x54e>
 8003858:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800385a:	b10b      	cbz	r3, 8003860 <CO_SDOserver_process+0x53c>
 800385c:	2e07      	cmp	r6, #7
 800385e:	d008      	beq.n	8003872 <CO_SDOserver_process+0x54e>
                SDO->timeoutTimer = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	67a3      	str	r3, [r4, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003864:	2323      	movs	r3, #35	; 0x23
 8003866:	7523      	strb	r3, [r4, #20]
 8003868:	462f      	mov	r7, r5
                count = 7;
 800386a:	2607      	movs	r6, #7
 800386c:	e00e      	b.n	800388c <CO_SDOserver_process+0x568>
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 800386e:	2300      	movs	r3, #0
 8003870:	e7e9      	b.n	8003846 <CO_SDOserver_process+0x522>
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8003872:	6862      	ldr	r2, [r4, #4]
 8003874:	f1c6 0307 	rsb	r3, r6, #7
 8003878:	b2db      	uxtb	r3, r3
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	7951      	ldrb	r1, [r2, #5]
 8003880:	430b      	orrs	r3, r1
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	7153      	strb	r3, [r2, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8003888:	2700      	movs	r7, #0
 800388a:	7527      	strb	r7, [r4, #20]
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 800388c:	6860      	ldr	r0, [r4, #4]
 800388e:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 8003892:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8003896:	4632      	mov	r2, r6
 8003898:	4419      	add	r1, r3
 800389a:	3006      	adds	r0, #6
 800389c:	f006 fc7a 	bl	800a194 <memcpy>
            SDO->bufOffsetRd += count;
 80038a0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80038a4:	4433      	add	r3, r6
 80038a6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
            SDO->sizeTran += count;
 80038aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80038ac:	441e      	add	r6, r3
 80038ae:	66a6      	str	r6, [r4, #104]	; 0x68
            if (SDO->sizeInd > 0) {
 80038b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d038      	beq.n	8003928 <CO_SDOserver_process+0x604>
                if (SDO->sizeTran > SDO->sizeInd) {
 80038b6:	429e      	cmp	r6, r3
 80038b8:	d90e      	bls.n	80038d8 <CO_SDOserver_process+0x5b4>
                    abortCode = CO_SDO_AB_DATA_LONG;
 80038ba:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <CO_SDOserver_process+0x5a4>)
 80038bc:	9303      	str	r3, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 80038be:	2301      	movs	r3, #1
 80038c0:	7523      	strb	r3, [r4, #20]
                    break;
 80038c2:	463d      	mov	r5, r7
 80038c4:	e546      	b.n	8003354 <CO_SDOserver_process+0x30>
 80038c6:	bf00      	nop
 80038c8:	06070012 	.word	0x06070012
 80038cc:	05040001 	.word	0x05040001
 80038d0:	05040000 	.word	0x05040000
 80038d4:	05030000 	.word	0x05030000
                else if (ret == CO_SDO_RT_ok_communicationEnd
 80038d8:	bb37      	cbnz	r7, 8003928 <CO_SDOserver_process+0x604>
                         && SDO->sizeTran < SDO->sizeInd
 80038da:	429e      	cmp	r6, r3
 80038dc:	d224      	bcs.n	8003928 <CO_SDOserver_process+0x604>
                    abortCode = CO_SDO_AB_DATA_SHORT;
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <CO_SDOserver_process+0x61c>)
 80038e0:	9303      	str	r3, [sp, #12]
                    SDO->state = CO_SDO_ST_ABORT;
 80038e2:	2301      	movs	r3, #1
 80038e4:	7523      	strb	r3, [r4, #20]
        if (SDO->state == CO_SDO_ST_ABORT) {
 80038e6:	7d23      	ldrb	r3, [r4, #20]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	f47f ad35 	bne.w	800335a <CO_SDOserver_process+0x36>
            SDO->CANtxBuff->data[0] = 0x80;
 80038f0:	6863      	ldr	r3, [r4, #4]
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80038f6:	6863      	ldr	r3, [r4, #4]
 80038f8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80038fc:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80038fe:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8003900:	6862      	ldr	r2, [r4, #4]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	71d3      	strb	r3, [r2, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800390c:	721a      	strb	r2, [r3, #8]
            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 800390e:	6863      	ldr	r3, [r4, #4]
 8003910:	9a03      	ldr	r2, [sp, #12]
 8003912:	f8c3 2009 	str.w	r2, [r3, #9]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003916:	6861      	ldr	r1, [r4, #4]
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	f002 f893 	bl	8005a44 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 800391e:	2300      	movs	r3, #0
 8003920:	7523      	strb	r3, [r4, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8003922:	f06f 0509 	mvn.w	r5, #9
 8003926:	e518      	b.n	800335a <CO_SDOserver_process+0x36>
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003928:	6861      	ldr	r1, [r4, #4]
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	f002 f88a 	bl	8005a44 <CO_CANsend>
            break;
 8003930:	463d      	mov	r5, r7
 8003932:	e50f      	b.n	8003354 <CO_SDOserver_process+0x30>
            ret = CO_SDO_RT_transmittBufferFull;
 8003934:	2504      	movs	r5, #4
 8003936:	e50d      	b.n	8003354 <CO_SDOserver_process+0x30>
        return CO_SDO_RT_wrongArguments;
 8003938:	f06f 0501 	mvn.w	r5, #1
 800393c:	e50d      	b.n	800335a <CO_SDOserver_process+0x36>
 800393e:	bf00      	nop
 8003940:	06070013 	.word	0x06070013

08003944 <CO_SYNC_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
    CO_SYNC_t *SYNC = object;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003944:	790b      	ldrb	r3, [r1, #4]
    bool_t syncReceived = false;

    if (SYNC->counterOverflowValue == 0) {
 8003946:	7c42      	ldrb	r2, [r0, #17]
 8003948:	b922      	cbnz	r2, 8003954 <CO_SYNC_receive+0x10>
        if (DLC == 0) {
 800394a:	b15b      	cbz	r3, 8003964 <CO_SYNC_receive+0x20>
            syncReceived = true;
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 800394c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003950:	7203      	strb	r3, [r0, #8]
        else {
            SYNC->receiveError = DLC | 0x80;
        }
    }

    if (syncReceived) {
 8003952:	4770      	bx	lr
        if (DLC == 1) {
 8003954:	2b01      	cmp	r3, #1
 8003956:	d003      	beq.n	8003960 <CO_SYNC_receive+0x1c>
            SYNC->receiveError = DLC | 0x80;
 8003958:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800395c:	7203      	strb	r3, [r0, #8]
    if (syncReceived) {
 800395e:	4770      	bx	lr
            SYNC->counter = data[0];
 8003960:	794b      	ldrb	r3, [r1, #5]
 8003962:	7483      	strb	r3, [r0, #18]
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8003964:	68c3      	ldr	r3, [r0, #12]
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	60c3      	str	r3, [r0, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 800396e:	2301      	movs	r3, #1
 8003970:	6043      	str	r3, [r0, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8003972:	4770      	bx	lr

08003974 <OD_write_1019>:
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003974:	b3d8      	cbz	r0, 80039ee <OD_write_1019+0x7a>
{
 8003976:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800397a:	b083      	sub	sp, #12
 800397c:	460c      	mov	r4, r1
 800397e:	4617      	mov	r7, r2
 8003980:	461e      	mov	r6, r3
 8003982:	4605      	mov	r5, r0
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003984:	7c43      	ldrb	r3, [r0, #17]
 8003986:	bba3      	cbnz	r3, 80039f2 <OD_write_1019+0x7e>
 8003988:	b3a9      	cbz	r1, 80039f6 <OD_write_1019+0x82>
        || count != sizeof(uint8_t) || countWritten == NULL
 800398a:	2a01      	cmp	r2, #1
 800398c:	d135      	bne.n	80039fa <OD_write_1019+0x86>
 800398e:	b3c6      	cbz	r6, 8003a02 <OD_write_1019+0x8e>
    ) {
        return ODR_DEV_INCOMPAT;
    }

    CO_SYNC_t *SYNC = stream->object;
 8003990:	f8d0 8004 	ldr.w	r8, [r0, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003994:	f891 9000 	ldrb.w	r9, [r1]
    uint8_t syncCounterOvf = CO_getUint8(buf);

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8003998:	f1b9 0f01 	cmp.w	r9, #1
 800399c:	d033      	beq.n	8003a06 <OD_write_1019+0x92>
 800399e:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 80039a2:	d832      	bhi.n	8003a0a <OD_write_1019+0x96>
        return ODR_INVALID_VALUE;
    }
    if (*SYNC->OD_1006_period != 0) {
 80039a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	bb83      	cbnz	r3, 8003a0e <OD_write_1019+0x9a>
        return ODR_DATA_DEV_STATE;
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80039ac:	f8b8 2044 	ldrh.w	r2, [r8, #68]	; 0x44
 80039b0:	f8b8 104c 	ldrh.w	r1, [r8, #76]	; 0x4c
 80039b4:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	ebb9 0c03 	subs.w	ip, r9, r3
 80039be:	bf18      	it	ne
 80039c0:	f04f 0c01 	movne.w	ip, #1
 80039c4:	f8cd c000 	str.w	ip, [sp]
 80039c8:	f002 f81a 	bl	8005a00 <CO_CANtxBufferInit>
 80039cc:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80039d0:	b140      	cbz	r0, 80039e4 <OD_write_1019+0x70>
        SYNC->isProducer = false;
        return ODR_DEV_INCOMPAT;
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80039d2:	f888 9011 	strb.w	r9, [r8, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80039d6:	4633      	mov	r3, r6
 80039d8:	463a      	mov	r2, r7
 80039da:	4621      	mov	r1, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	f7fe f852 	bl	8001a86 <OD_writeOriginal>
 80039e2:	e00b      	b.n	80039fc <OD_write_1019+0x88>
        SYNC->isProducer = false;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80039ea:	2009      	movs	r0, #9
 80039ec:	e006      	b.n	80039fc <OD_write_1019+0x88>
        return ODR_DEV_INCOMPAT;
 80039ee:	2009      	movs	r0, #9
}
 80039f0:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 80039f2:	2009      	movs	r0, #9
 80039f4:	e002      	b.n	80039fc <OD_write_1019+0x88>
 80039f6:	2009      	movs	r0, #9
 80039f8:	e000      	b.n	80039fc <OD_write_1019+0x88>
 80039fa:	2009      	movs	r0, #9
}
 80039fc:	b003      	add	sp, #12
 80039fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return ODR_DEV_INCOMPAT;
 8003a02:	2009      	movs	r0, #9
 8003a04:	e7fa      	b.n	80039fc <OD_write_1019+0x88>
        return ODR_INVALID_VALUE;
 8003a06:	200f      	movs	r0, #15
 8003a08:	e7f8      	b.n	80039fc <OD_write_1019+0x88>
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	e7f6      	b.n	80039fc <OD_write_1019+0x88>
        return ODR_DATA_DEV_STATE;
 8003a0e:	2017      	movs	r0, #23
 8003a10:	e7f4      	b.n	80039fc <OD_write_1019+0x88>
	...

08003a14 <OD_write_1005>:
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003a14:	2800      	cmp	r0, #0
 8003a16:	f000 8081 	beq.w	8003b1c <OD_write_1005+0x108>
{
 8003a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	460c      	mov	r4, r1
 8003a22:	4615      	mov	r5, r2
 8003a24:	461e      	mov	r6, r3
 8003a26:	4607      	mov	r7, r0
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003a28:	7c43      	ldrb	r3, [r0, #17]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d178      	bne.n	8003b20 <OD_write_1005+0x10c>
 8003a2e:	2900      	cmp	r1, #0
 8003a30:	d078      	beq.n	8003b24 <OD_write_1005+0x110>
        || count != sizeof(uint32_t) || countWritten == NULL
 8003a32:	2a04      	cmp	r2, #4
 8003a34:	d178      	bne.n	8003b28 <OD_write_1005+0x114>
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	d07a      	beq.n	8003b30 <OD_write_1005+0x11c>
    CO_SYNC_t *SYNC = stream->object;
 8003a3a:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003a3e:	680b      	ldr	r3, [r1, #0]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8003a40:	b299      	uxth	r1, r3
 8003a42:	f3c3 080a 	ubfx	r8, r3, #0, #11
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8003a46:	f003 4a80 	and.w	sl, r3, #1073741824	; 0x40000000
 8003a4a:	f3c3 7b80 	ubfx	fp, r3, #30, #1
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8003a4e:	4a42      	ldr	r2, [pc, #264]	; (8003b58 <OD_write_1005+0x144>)
 8003a50:	401a      	ands	r2, r3
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d16e      	bne.n	8003b34 <OD_write_1005+0x120>
 8003a56:	f411 6ff0 	tst.w	r1, #1920	; 0x780
 8003a5a:	d06d      	beq.n	8003b38 <OD_write_1005+0x124>
 8003a5c:	f2a8 1301 	subw	r3, r8, #257	; 0x101
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b7f      	cmp	r3, #127	; 0x7f
 8003a64:	d96a      	bls.n	8003b3c <OD_write_1005+0x128>
 8003a66:	f2a8 5381 	subw	r3, r8, #1409	; 0x581
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b7e      	cmp	r3, #126	; 0x7e
 8003a6e:	d967      	bls.n	8003b40 <OD_write_1005+0x12c>
 8003a70:	f2a8 6301 	subw	r3, r8, #1537	; 0x601
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b7e      	cmp	r3, #126	; 0x7e
 8003a78:	d964      	bls.n	8003b44 <OD_write_1005+0x130>
 8003a7a:	f5a8 63dc 	sub.w	r3, r8, #1760	; 0x6e0
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b1f      	cmp	r3, #31
 8003a82:	d961      	bls.n	8003b48 <OD_write_1005+0x134>
 8003a84:	f5b8 6fe0 	cmp.w	r8, #1792	; 0x700
 8003a88:	d860      	bhi.n	8003b4c <OD_write_1005+0x138>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8003a8a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003a8e:	b133      	cbz	r3, 8003a9e <OD_write_1005+0x8a>
 8003a90:	f1ba 0f00 	cmp.w	sl, #0
 8003a94:	d003      	beq.n	8003a9e <OD_write_1005+0x8a>
 8003a96:	f8b9 3044 	ldrh.w	r3, [r9, #68]	; 0x44
 8003a9a:	4543      	cmp	r3, r8
 8003a9c:	d158      	bne.n	8003b50 <OD_write_1005+0x13c>
    if (CAN_ID != SYNC->CAN_ID) {
 8003a9e:	f8b9 3044 	ldrh.w	r3, [r9, #68]	; 0x44
 8003aa2:	4543      	cmp	r3, r8
 8003aa4:	d110      	bne.n	8003ac8 <OD_write_1005+0xb4>
    SYNC->isProducer = isProducer;
 8003aa6:	f8c9 b024 	str.w	fp, [r9, #36]	; 0x24
    if (isProducer) {
 8003aaa:	f1ba 0f00 	cmp.w	sl, #0
 8003aae:	d004      	beq.n	8003aba <OD_write_1005+0xa6>
        SYNC->counter = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f889 3012 	strb.w	r3, [r9, #18]
        SYNC->timer = 0;
 8003ab6:	f8c9 3018 	str.w	r3, [r9, #24]
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003aba:	4633      	mov	r3, r6
 8003abc:	462a      	mov	r2, r5
 8003abe:	4621      	mov	r1, r4
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f7fd ffe0 	bl	8001a86 <OD_writeOriginal>
 8003ac6:	e030      	b.n	8003b2a <OD_write_1005+0x116>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8003ac8:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
 8003acc:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8003ad0:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <OD_write_1005+0x148>)
 8003ad2:	9302      	str	r3, [sp, #8]
 8003ad4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	f001 ff53 	bl	800598c <CO_CANrxBufferInit>
        if (CANret != CO_ERROR_NO) {
 8003ae6:	bba8      	cbnz	r0, 8003b54 <OD_write_1005+0x140>
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8003ae8:	f899 2011 	ldrb.w	r2, [r9, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8003aec:	f8b9 104c 	ldrh.w	r1, [r9, #76]	; 0x4c
 8003af0:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 8003af4:	2300      	movs	r3, #0
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	1ad2      	subs	r2, r2, r3
 8003afa:	bf18      	it	ne
 8003afc:	2201      	movne	r2, #1
 8003afe:	9200      	str	r2, [sp, #0]
 8003b00:	4642      	mov	r2, r8
 8003b02:	f001 ff7d 	bl	8005a00 <CO_CANtxBufferInit>
 8003b06:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
        if (SYNC->CANtxBuff == NULL) {
 8003b0a:	b110      	cbz	r0, 8003b12 <OD_write_1005+0xfe>
        SYNC->CAN_ID = CAN_ID;
 8003b0c:	f8a9 8044 	strh.w	r8, [r9, #68]	; 0x44
 8003b10:	e7c9      	b.n	8003aa6 <OD_write_1005+0x92>
            SYNC->isProducer = false;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8003b18:	2009      	movs	r0, #9
 8003b1a:	e006      	b.n	8003b2a <OD_write_1005+0x116>
        return ODR_DEV_INCOMPAT;
 8003b1c:	2009      	movs	r0, #9
}
 8003b1e:	4770      	bx	lr
        return ODR_DEV_INCOMPAT;
 8003b20:	2009      	movs	r0, #9
 8003b22:	e002      	b.n	8003b2a <OD_write_1005+0x116>
 8003b24:	2009      	movs	r0, #9
 8003b26:	e000      	b.n	8003b2a <OD_write_1005+0x116>
 8003b28:	2009      	movs	r0, #9
}
 8003b2a:	b005      	add	sp, #20
 8003b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ODR_DEV_INCOMPAT;
 8003b30:	2009      	movs	r0, #9
 8003b32:	e7fa      	b.n	8003b2a <OD_write_1005+0x116>
        return ODR_INVALID_VALUE;
 8003b34:	200f      	movs	r0, #15
 8003b36:	e7f8      	b.n	8003b2a <OD_write_1005+0x116>
 8003b38:	200f      	movs	r0, #15
 8003b3a:	e7f6      	b.n	8003b2a <OD_write_1005+0x116>
 8003b3c:	200f      	movs	r0, #15
 8003b3e:	e7f4      	b.n	8003b2a <OD_write_1005+0x116>
 8003b40:	200f      	movs	r0, #15
 8003b42:	e7f2      	b.n	8003b2a <OD_write_1005+0x116>
 8003b44:	200f      	movs	r0, #15
 8003b46:	e7f0      	b.n	8003b2a <OD_write_1005+0x116>
 8003b48:	200f      	movs	r0, #15
 8003b4a:	e7ee      	b.n	8003b2a <OD_write_1005+0x116>
 8003b4c:	200f      	movs	r0, #15
 8003b4e:	e7ec      	b.n	8003b2a <OD_write_1005+0x116>
 8003b50:	200f      	movs	r0, #15
 8003b52:	e7ea      	b.n	8003b2a <OD_write_1005+0x116>
            return ODR_DEV_INCOMPAT;
 8003b54:	2009      	movs	r0, #9
 8003b56:	e7e8      	b.n	8003b2a <OD_write_1005+0x116>
 8003b58:	bffff800 	.word	0xbffff800
 8003b5c:	08003945 	.word	0x08003945

08003b60 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	b087      	sub	sp, #28
 8003b66:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8003b6a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8003b6e:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8003b72:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8003b76:	2800      	cmp	r0, #0
 8003b78:	f000 80bf 	beq.w	8003cfa <CO_SYNC_init+0x19a>
 8003b7c:	460f      	mov	r7, r1
 8003b7e:	4615      	mov	r5, r2
 8003b80:	461e      	mov	r6, r3
 8003b82:	4604      	mov	r4, r0
 8003b84:	2900      	cmp	r1, #0
 8003b86:	f000 80bb 	beq.w	8003d00 <CO_SYNC_init+0x1a0>
 8003b8a:	2a00      	cmp	r2, #0
 8003b8c:	f000 80bb 	beq.w	8003d06 <CO_SYNC_init+0x1a6>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80bb 	beq.w	8003d0c <CO_SYNC_init+0x1ac>
 8003b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80ba 	beq.w	8003d12 <CO_SYNC_init+0x1b2>
#endif
        || CANdevRx == NULL
 8003b9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ba2:	f000 80b9 	beq.w	8003d18 <CO_SYNC_init+0x1b8>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8003ba6:	2260      	movs	r2, #96	; 0x60
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f006 fb1b 	bl	800a1e4 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	9305      	str	r3, [sp, #20]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	aa05      	add	r2, sp, #20
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f7fe f857 	bl	8001c70 <OD_get_value>

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
    if (odRet != ODR_OK) {
 8003bc2:	bb90      	cbnz	r0, 8003c2a <CO_SYNC_init+0xca>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
        return CO_ERROR_OD_PARAMETERS;
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8003bc4:	6364      	str	r4, [r4, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8003bc6:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <CO_SYNC_init+0x1c0>)
 8003bc8:	63a3      	str	r3, [r4, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8003bca:	4b56      	ldr	r3, [pc, #344]	; (8003d24 <CO_SYNC_init+0x1c4>)
 8003bcc:	63e3      	str	r3, [r4, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8003bce:	f104 0334 	add.w	r3, r4, #52	; 0x34
    entry->extension = extension;
 8003bd2:	60ab      	str	r3, [r5, #8]
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f7fe f87b 	bl	8001cd6 <OD_getPtr>
 8003be0:	61e0      	str	r0, [r4, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8003be2:	b350      	cbz	r0, 8003c3a <CO_SYNC_init+0xda>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8003be4:	2300      	movs	r3, #0
 8003be6:	2204      	movs	r2, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003bec:	f7fe f873 	bl	8001cd6 <OD_getPtr>
 8003bf0:	6220      	str	r0, [r4, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8003bf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bf4:	b103      	cbz	r3, 8003bf8 <CO_SYNC_init+0x98>
 8003bf6:	b340      	cbz	r0, 8003c4a <CO_SYNC_init+0xea>
        return CO_ERROR_OD_PARAMETERS;
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f88d 3013 	strb.w	r3, [sp, #19]

    if (OD_1019_syncCounterOvf != NULL) {
 8003bfe:	f1b9 0f00 	cmp.w	r9, #0
 8003c02:	d040      	beq.n	8003c86 <CO_SYNC_init+0x126>
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003c04:	2301      	movs	r3, #1
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f10d 0213 	add.w	r2, sp, #19
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4648      	mov	r0, r9
 8003c10:	f7fe f82e 	bl	8001c70 <OD_get_value>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
        if (odRet != ODR_OK) {
 8003c14:	bb10      	cbnz	r0, 8003c5c <CO_SYNC_init+0xfc>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
            return CO_ERROR_OD_PARAMETERS;
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8003c16:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d027      	beq.n	8003c6e <CO_SYNC_init+0x10e>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8003c1e:	2bf0      	cmp	r3, #240	; 0xf0
 8003c20:	d928      	bls.n	8003c74 <CO_SYNC_init+0x114>
 8003c22:	23f0      	movs	r3, #240	; 0xf0
 8003c24:	f88d 3013 	strb.w	r3, [sp, #19]
 8003c28:	e024      	b.n	8003c74 <CO_SYNC_init+0x114>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8003c2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c2c:	b113      	cbz	r3, 8003c34 <CO_SYNC_init+0xd4>
    return (entry != NULL) ? entry->index : 0;
 8003c2e:	882b      	ldrh	r3, [r5, #0]
 8003c30:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003c32:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003c34:	f06f 050b 	mvn.w	r5, #11
 8003c38:	e046      	b.n	8003cc8 <CO_SYNC_init+0x168>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8003c3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c3c:	b113      	cbz	r3, 8003c44 <CO_SYNC_init+0xe4>
 8003c3e:	8833      	ldrh	r3, [r6, #0]
 8003c40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003c42:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003c44:	f06f 050b 	mvn.w	r5, #11
 8003c48:	e03e      	b.n	8003cc8 <CO_SYNC_init+0x168>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8003c4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c4c:	b11b      	cbz	r3, 8003c56 <CO_SYNC_init+0xf6>
 8003c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003c54:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003c56:	f06f 050b 	mvn.w	r5, #11
 8003c5a:	e035      	b.n	8003cc8 <CO_SYNC_init+0x168>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8003c5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003c5e:	b11b      	cbz	r3, 8003c68 <CO_SYNC_init+0x108>
 8003c60:	f8b9 3000 	ldrh.w	r3, [r9]
 8003c64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003c66:	6013      	str	r3, [r2, #0]
            return CO_ERROR_OD_PARAMETERS;
 8003c68:	f06f 050b 	mvn.w	r5, #11
 8003c6c:	e02c      	b.n	8003cc8 <CO_SYNC_init+0x168>
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f88d 3013 	strb.w	r3, [sp, #19]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8003c74:	6524      	str	r4, [r4, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <CO_SYNC_init+0x1c0>)
 8003c78:	6563      	str	r3, [r4, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <CO_SYNC_init+0x1c8>)
 8003c7c:	65a3      	str	r3, [r4, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8003c7e:	f104 0350 	add.w	r3, r4, #80	; 0x50
    entry->extension = extension;
 8003c82:	f8c9 3008 	str.w	r3, [r9, #8]
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8003c86:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003c8a:	7463      	strb	r3, [r4, #17]

    /* Configure object variables */
    SYNC->em = em;
 8003c8c:	6027      	str	r7, [r4, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8003c8e:	9a05      	ldr	r2, [sp, #20]
 8003c90:	f3c2 7380 	ubfx	r3, r2, #30, #1
 8003c94:	6263      	str	r3, [r4, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8003c96:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003c9a:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 8003c9e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8003ca2:	f8a4 a030 	strh.w	sl, [r4, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8003ca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ca8:	64a3      	str	r3, [r4, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8003caa:	f8a4 b04c 	strh.w	fp, [r4, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003cae:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <CO_SYNC_init+0x1cc>)
 8003cb0:	9302      	str	r3, [sp, #8]
 8003cb2:	9401      	str	r4, [sp, #4]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	f001 fe64 	bl	800598c <CO_CANrxBufferInit>
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	b118      	cbz	r0, 8003cd0 <CO_SYNC_init+0x170>
    if (SYNC->CANtxBuff == NULL)
        return CO_ERROR_ILLEGAL_ARGUMENT;
#endif

    return CO_ERROR_NO;
}
 8003cc8:	4628      	mov	r0, r5
 8003cca:	b007      	add	sp, #28
 8003ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8003cd8:	1ad2      	subs	r2, r2, r3
 8003cda:	bf18      	it	ne
 8003cdc:	2201      	movne	r2, #1
 8003cde:	9200      	str	r2, [sp, #0]
 8003ce0:	9a05      	ldr	r2, [sp, #20]
 8003ce2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003cea:	f001 fe89 	bl	8005a00 <CO_CANtxBufferInit>
 8003cee:	62a0      	str	r0, [r4, #40]	; 0x28
    if (SYNC->CANtxBuff == NULL)
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d1e9      	bne.n	8003cc8 <CO_SYNC_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8003cf8:	e7e6      	b.n	8003cc8 <CO_SYNC_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003cfa:	f04f 35ff 	mov.w	r5, #4294967295
 8003cfe:	e7e3      	b.n	8003cc8 <CO_SYNC_init+0x168>
 8003d00:	f04f 35ff 	mov.w	r5, #4294967295
 8003d04:	e7e0      	b.n	8003cc8 <CO_SYNC_init+0x168>
 8003d06:	f04f 35ff 	mov.w	r5, #4294967295
 8003d0a:	e7dd      	b.n	8003cc8 <CO_SYNC_init+0x168>
 8003d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d10:	e7da      	b.n	8003cc8 <CO_SYNC_init+0x168>
 8003d12:	f04f 35ff 	mov.w	r5, #4294967295
 8003d16:	e7d7      	b.n	8003cc8 <CO_SYNC_init+0x168>
 8003d18:	f04f 35ff 	mov.w	r5, #4294967295
 8003d1c:	e7d4      	b.n	8003cc8 <CO_SYNC_init+0x168>
 8003d1e:	bf00      	nop
 8003d20:	08001a29 	.word	0x08001a29
 8003d24:	08003a15 	.word	0x08003a15
 8003d28:	08003975 	.word	0x08003975
 8003d2c:	08003945 	.word	0x08003945

08003d30 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8003d30:	b530      	push	{r4, r5, lr}
 8003d32:	b083      	sub	sp, #12
 8003d34:	4604      	mov	r4, r0
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;

    if (NMTisPreOrOperational) {
 8003d36:	2900      	cmp	r1, #0
 8003d38:	d06c      	beq.n	8003e14 <CO_SYNC_process+0xe4>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8003d3a:	6983      	ldr	r3, [r0, #24]
 8003d3c:	441a      	add	r2, r3
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d200      	bcs.n	8003d44 <CO_SYNC_process+0x14>
 8003d42:	6182      	str	r2, [r0, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8003d44:	6863      	ldr	r3, [r4, #4]
 8003d46:	b1e3      	cbz	r3, 8003d82 <CO_SYNC_process+0x52>
            SYNC->timer = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61a3      	str	r3, [r4, #24]
            syncStatus = CO_SYNC_RX_TX;
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8003d4c:	6063      	str	r3, [r4, #4]
            syncStatus = CO_SYNC_RX_TX;
 8003d4e:	2501      	movs	r5, #1
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8003d50:	69e3      	ldr	r3, [r4, #28]
                                ? *SYNC->OD_1006_period : 0;
 8003d52:	b13b      	cbz	r3, 8003d64 <CO_SYNC_process+0x34>
 8003d54:	681b      	ldr	r3, [r3, #0]

        if (OD_1006_period > 0) {
 8003d56:	b12b      	cbz	r3, 8003d64 <CO_SYNC_process+0x34>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8003d58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	d02c      	beq.n	8003db8 <CO_SYNC_process+0x88>
                if (SYNC->timer >= OD_1006_period) {
 8003d5e:	69a2      	ldr	r2, [r4, #24]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d210      	bcs.n	8003d86 <CO_SYNC_process+0x56>
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8003d64:	6a23      	ldr	r3, [r4, #32]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03d      	beq.n	8003de6 <CO_SYNC_process+0xb6>
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03a      	beq.n	8003de6 <CO_SYNC_process+0xb6>
            && SYNC->timer > *SYNC->OD_1007_window
 8003d70:	69a2      	ldr	r2, [r4, #24]
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d237      	bcs.n	8003de6 <CO_SYNC_process+0xb6>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8003d76:	6963      	ldr	r3, [r4, #20]
 8003d78:	b903      	cbnz	r3, 8003d7c <CO_SYNC_process+0x4c>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8003d7a:	2502      	movs	r5, #2
            }
            SYNC->syncIsOutsideWindow = true;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	6163      	str	r3, [r4, #20]
 8003d80:	e033      	b.n	8003dea <CO_SYNC_process+0xba>
    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8003d82:	2500      	movs	r5, #0
 8003d84:	e7e4      	b.n	8003d50 <CO_SYNC_process+0x20>
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8003d86:	7ca3      	ldrb	r3, [r4, #18]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	74a3      	strb	r3, [r4, #18]
 8003d8e:	7c62      	ldrb	r2, [r4, #17]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <CO_SYNC_process+0x68>
 8003d94:	2301      	movs	r3, #1
 8003d96:	74a3      	strb	r3, [r4, #18]
    SYNC->timer = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61a3      	str	r3, [r4, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8003d9c:	68e3      	ldr	r3, [r4, #12]
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	60e3      	str	r3, [r4, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8003da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003da8:	7ca2      	ldrb	r2, [r4, #18]
 8003daa:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8003dac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003dae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003db0:	f001 fe48 	bl	8005a44 <CO_CANsend>
                    syncStatus = CO_SYNC_RX_TX;
 8003db4:	2501      	movs	r5, #1
 8003db6:	e7d5      	b.n	8003d64 <CO_SYNC_process+0x34>
            if (SYNC->timeoutError == 1) {
 8003db8:	7c22      	ldrb	r2, [r4, #16]
 8003dba:	2a01      	cmp	r2, #1
 8003dbc:	d1d2      	bne.n	8003d64 <CO_SYNC_process+0x34>
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8003dbe:	eb03 0253 	add.w	r2, r3, r3, lsr #1
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <CO_SYNC_process+0x9a>
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295
                if (SYNC->timer > periodTimeout) {
 8003dca:	69a3      	ldr	r3, [r4, #24]
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d9c9      	bls.n	8003d64 <CO_SYNC_process+0x34>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003dd6:	2218      	movs	r2, #24
 8003dd8:	2101      	movs	r1, #1
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	f7fd fa04 	bl	80011e8 <CO_error>
                    SYNC->timeoutError = 2;
 8003de0:	2302      	movs	r3, #2
 8003de2:	7423      	strb	r3, [r4, #16]
 8003de4:	e7be      	b.n	8003d64 <CO_SYNC_process+0x34>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8003de6:	2300      	movs	r3, #0
 8003de8:	6163      	str	r3, [r4, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8003dea:	7a23      	ldrb	r3, [r4, #8]
 8003dec:	b93b      	cbnz	r3, 8003dfe <CO_SYNC_process+0xce>
        SYNC->receiveError = 0;
        SYNC->counter = 0;
        SYNC->timer = 0;
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8003dee:	2d01      	cmp	r5, #1
 8003df0:	d115      	bne.n	8003e1e <CO_SYNC_process+0xee>
        if (SYNC->timeoutError == 2) {
 8003df2:	7c23      	ldrb	r3, [r4, #16]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d015      	beq.n	8003e24 <CO_SYNC_process+0xf4>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
        }
        SYNC->timeoutError = 1;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	7423      	strb	r3, [r4, #16]
 8003dfc:	e00f      	b.n	8003e1e <CO_SYNC_process+0xee>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	f248 2340 	movw	r3, #33344	; 0x8240
 8003e04:	2219      	movs	r2, #25
 8003e06:	2101      	movs	r1, #1
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	f7fd f9ed 	bl	80011e8 <CO_error>
            SYNC->receiveError = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	7223      	strb	r3, [r4, #8]
 8003e12:	e7ec      	b.n	8003dee <CO_SYNC_process+0xbe>
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8003e14:	2500      	movs	r5, #0
 8003e16:	6045      	str	r5, [r0, #4]
        SYNC->receiveError = 0;
 8003e18:	7205      	strb	r5, [r0, #8]
        SYNC->counter = 0;
 8003e1a:	7485      	strb	r5, [r0, #18]
        SYNC->timer = 0;
 8003e1c:	6185      	str	r5, [r0, #24]
    }

    return syncStatus;
}
 8003e1e:	4628      	mov	r0, r5
 8003e20:	b003      	add	sp, #12
 8003e22:	bd30      	pop	{r4, r5, pc}
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8003e24:	2100      	movs	r1, #0
 8003e26:	9100      	str	r1, [sp, #0]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	2218      	movs	r2, #24
 8003e2c:	6820      	ldr	r0, [r4, #0]
 8003e2e:	f7fd f9db 	bl	80011e8 <CO_error>
 8003e32:	e7e1      	b.n	8003df8 <CO_SYNC_process+0xc8>

08003e34 <CO_TIME_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
    CO_TIME_t *TIME = object;
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003e34:	790b      	ldrb	r3, [r1, #4]
    uint8_t *data = CO_CANrxMsg_readData(msg);

    if (DLC == CO_TIME_MSG_LENGTH) {
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d000      	beq.n	8003e3c <CO_TIME_receive+0x8>
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8003e3a:	4770      	bx	lr
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8003e3c:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8003e40:	6003      	str	r3, [r0, #0]
 8003e42:	f8b1 3009 	ldrh.w	r3, [r1, #9]
 8003e46:	8083      	strh	r3, [r0, #4]
        CO_FLAG_SET(TIME->CANrxNew);
 8003e48:	2301      	movs	r3, #1
 8003e4a:	6183      	str	r3, [r0, #24]
}
 8003e4c:	e7f5      	b.n	8003e3a <CO_TIME_receive+0x6>
	...

08003e50 <OD_write_1012>:
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d036      	beq.n	8003ec2 <OD_write_1012+0x72>
 8003e54:	4684      	mov	ip, r0
 8003e56:	7c40      	ldrb	r0, [r0, #17]
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d134      	bne.n	8003ec6 <OD_write_1012+0x76>
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d034      	beq.n	8003eca <OD_write_1012+0x7a>
        || count != sizeof(uint32_t) || countWritten == NULL
 8003e60:	2a04      	cmp	r2, #4
 8003e62:	d134      	bne.n	8003ece <OD_write_1012+0x7e>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d034      	beq.n	8003ed2 <OD_write_1012+0x82>
{
 8003e68:	b570      	push	{r4, r5, r6, lr}
    ) {
        return ODR_DEV_INCOMPAT;
    }

    CO_TIME_t *TIME = stream->object;
 8003e6a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8003e6e:	6808      	ldr	r0, [r1, #0]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8003e70:	b285      	uxth	r5, r0
 8003e72:	f3c0 0e0a 	ubfx	lr, r0, #0, #11
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8003e76:	4c1f      	ldr	r4, [pc, #124]	; (8003ef4 <OD_write_1012+0xa4>)
 8003e78:	4004      	ands	r4, r0
 8003e7a:	bb64      	cbnz	r4, 8003ed6 <OD_write_1012+0x86>
 8003e7c:	f415 6ff0 	tst.w	r5, #1920	; 0x780
 8003e80:	d02b      	beq.n	8003eda <OD_write_1012+0x8a>
 8003e82:	f2ae 1401 	subw	r4, lr, #257	; 0x101
 8003e86:	b2a4      	uxth	r4, r4
 8003e88:	2c7f      	cmp	r4, #127	; 0x7f
 8003e8a:	d928      	bls.n	8003ede <OD_write_1012+0x8e>
 8003e8c:	f2ae 5481 	subw	r4, lr, #1409	; 0x581
 8003e90:	b2a4      	uxth	r4, r4
 8003e92:	2c7e      	cmp	r4, #126	; 0x7e
 8003e94:	d925      	bls.n	8003ee2 <OD_write_1012+0x92>
 8003e96:	f2ae 6401 	subw	r4, lr, #1537	; 0x601
 8003e9a:	b2a4      	uxth	r4, r4
 8003e9c:	2c7e      	cmp	r4, #126	; 0x7e
 8003e9e:	d922      	bls.n	8003ee6 <OD_write_1012+0x96>
 8003ea0:	f5ae 64dc 	sub.w	r4, lr, #1760	; 0x6e0
 8003ea4:	b2a4      	uxth	r4, r4
 8003ea6:	2c1f      	cmp	r4, #31
 8003ea8:	d91f      	bls.n	8003eea <OD_write_1012+0x9a>
 8003eaa:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 8003eae:	d81e      	bhi.n	8003eee <OD_write_1012+0x9e>
        return ODR_INVALID_VALUE;
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8003eb0:	0fc4      	lsrs	r4, r0, #31
 8003eb2:	6134      	str	r4, [r6, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8003eb4:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8003eb8:	6170      	str	r0, [r6, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003eba:	4660      	mov	r0, ip
 8003ebc:	f7fd fde3 	bl	8001a86 <OD_writeOriginal>
 8003ec0:	e00a      	b.n	8003ed8 <OD_write_1012+0x88>
        return ODR_DEV_INCOMPAT;
 8003ec2:	2009      	movs	r0, #9
 8003ec4:	4770      	bx	lr
 8003ec6:	2009      	movs	r0, #9
 8003ec8:	4770      	bx	lr
 8003eca:	2009      	movs	r0, #9
 8003ecc:	4770      	bx	lr
 8003ece:	2009      	movs	r0, #9
 8003ed0:	4770      	bx	lr
 8003ed2:	2009      	movs	r0, #9
}
 8003ed4:	4770      	bx	lr
        return ODR_INVALID_VALUE;
 8003ed6:	200f      	movs	r0, #15
}
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
        return ODR_INVALID_VALUE;
 8003eda:	200f      	movs	r0, #15
 8003edc:	e7fc      	b.n	8003ed8 <OD_write_1012+0x88>
 8003ede:	200f      	movs	r0, #15
 8003ee0:	e7fa      	b.n	8003ed8 <OD_write_1012+0x88>
 8003ee2:	200f      	movs	r0, #15
 8003ee4:	e7f8      	b.n	8003ed8 <OD_write_1012+0x88>
 8003ee6:	200f      	movs	r0, #15
 8003ee8:	e7f6      	b.n	8003ed8 <OD_write_1012+0x88>
 8003eea:	200f      	movs	r0, #15
 8003eec:	e7f4      	b.n	8003ed8 <OD_write_1012+0x88>
 8003eee:	200f      	movs	r0, #15
 8003ef0:	e7f2      	b.n	8003ed8 <OD_write_1012+0x88>
 8003ef2:	bf00      	nop
 8003ef4:	3ffff800 	.word	0x3ffff800

08003ef8 <CO_TIME_init>:
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d03e      	beq.n	8003f7a <CO_TIME_init+0x82>
{
 8003efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	460d      	mov	r5, r1
 8003f02:	4616      	mov	r6, r2
 8003f04:	461f      	mov	r7, r3
 8003f06:	4604      	mov	r4, r0
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8003f08:	2900      	cmp	r1, #0
 8003f0a:	d039      	beq.n	8003f80 <CO_TIME_init+0x88>
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d03a      	beq.n	8003f86 <CO_TIME_init+0x8e>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8003f10:	222c      	movs	r2, #44	; 0x2c
 8003f12:	2100      	movs	r1, #0
 8003f14:	f006 f966 	bl	800a1e4 <memset>
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003f18:	2301      	movs	r3, #1
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	aa05      	add	r2, sp, #20
 8003f20:	2100      	movs	r1, #0
 8003f22:	4628      	mov	r0, r5
 8003f24:	f7fd fea4 	bl	8001c70 <OD_get_value>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
    if (odRet != ODR_OK) {
 8003f28:	b9a0      	cbnz	r0, 8003f54 <CO_TIME_init+0x5c>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
        return CO_ERROR_OD_PARAMETERS;
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8003f2a:	61e4      	str	r4, [r4, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <CO_TIME_init+0x94>)
 8003f2e:	6223      	str	r3, [r4, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8003f30:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <CO_TIME_init+0x98>)
 8003f32:	6263      	str	r3, [r4, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8003f34:	f104 031c 	add.w	r3, r4, #28
    entry->extension = extension;
 8003f38:	60ab      	str	r3, [r5, #8]
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8003f3a:	9d05      	ldr	r5, [sp, #20]
 8003f3c:	f3c5 020a 	ubfx	r2, r5, #0, #11
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8003f40:	0feb      	lsrs	r3, r5, #31
 8003f42:	6123      	str	r3, [r4, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8003f44:	f3c5 7580 	ubfx	r5, r5, #30, #1
 8003f48:	6165      	str	r5, [r4, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	61a1      	str	r1, [r4, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8003f4e:	b94b      	cbnz	r3, 8003f64 <CO_TIME_init+0x6c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
}
 8003f50:	b007      	add	sp, #28
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8003f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f56:	b113      	cbz	r3, 8003f5e <CO_TIME_init+0x66>
    return (entry != NULL) ? entry->index : 0;
 8003f58:	882b      	ldrh	r3, [r5, #0]
 8003f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f5c:	6013      	str	r3, [r2, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003f5e:	f06f 000b 	mvn.w	r0, #11
 8003f62:	e7f5      	b.n	8003f50 <CO_TIME_init+0x58>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <CO_TIME_init+0x9c>)
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	9401      	str	r4, [sp, #4]
 8003f6a:	9100      	str	r1, [sp, #0]
 8003f6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003f70:	4639      	mov	r1, r7
 8003f72:	4630      	mov	r0, r6
 8003f74:	f001 fd0a 	bl	800598c <CO_CANrxBufferInit>
        if (ret != CO_ERROR_NO)
 8003f78:	e7ea      	b.n	8003f50 <CO_TIME_init+0x58>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003f7e:	4770      	bx	lr
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	e7e4      	b.n	8003f50 <CO_TIME_init+0x58>
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	e7e1      	b.n	8003f50 <CO_TIME_init+0x58>
 8003f8c:	08001a29 	.word	0x08001a29
 8003f90:	08003e51 	.word	0x08003e51
 8003f94:	08003e35 	.word	0x08003e35

08003f98 <CO_TIME_process>:
                       uint32_t timeDifference_us)
{
    bool_t timestampReceived = false;

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8003f98:	b171      	cbz	r1, 8003fb8 <CO_TIME_process+0x20>
 8003f9a:	6903      	ldr	r3, [r0, #16]
 8003f9c:	b163      	cbz	r3, 8003fb8 <CO_TIME_process+0x20>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8003f9e:	6983      	ldr	r3, [r0, #24]
 8003fa0:	b163      	cbz	r3, 8003fbc <CO_TIME_process+0x24>
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8003fa2:	8882      	ldrh	r2, [r0, #4]
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8003fa4:	6803      	ldr	r3, [r0, #0]
 8003fa6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003faa:	6083      	str	r3, [r0, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8003fac:	8182      	strh	r2, [r0, #12]
            TIME->residual_us = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	81c3      	strh	r3, [r0, #14]
            timestampReceived = true;

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8003fb2:	6183      	str	r3, [r0, #24]
            timestampReceived = true;
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	4770      	bx	lr
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6183      	str	r3, [r0, #24]
    }

    /* Update time */
    uint32_t ms = 0;
    if (!timestampReceived && timeDifference_us > 0) {
 8003fbc:	b1c2      	cbz	r2, 8003ff0 <CO_TIME_process+0x58>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8003fbe:	89c3      	ldrh	r3, [r0, #14]
 8003fc0:	441a      	add	r2, r3
        ms = us / 1000;
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <CO_TIME_process+0x60>)
 8003fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc8:	099b      	lsrs	r3, r3, #6
        TIME->residual_us = us % 1000;
 8003fca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fce:	fb01 2213 	mls	r2, r1, r3, r2
 8003fd2:	81c2      	strh	r2, [r0, #14]
        TIME->ms += ms;
 8003fd4:	6882      	ldr	r2, [r0, #8]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	6083      	str	r3, [r0, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <CO_TIME_process+0x64>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d909      	bls.n	8003ff4 <CO_TIME_process+0x5c>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <CO_TIME_process+0x68>)
 8003fe2:	441a      	add	r2, r3
 8003fe4:	6082      	str	r2, [r0, #8]
            TIME->days += 1;
 8003fe6:	8983      	ldrh	r3, [r0, #12]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	8183      	strh	r3, [r0, #12]
 8003fec:	2000      	movs	r0, #0
 8003fee:	4770      	bx	lr
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4770      	bx	lr
 8003ff4:	2000      	movs	r0, #0
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
}
 8003ff6:	4770      	bx	lr
 8003ff8:	10624dd3 	.word	0x10624dd3
 8003ffc:	05265bff 	.word	0x05265bff
 8004000:	fad9a400 	.word	0xfad9a400

08004004 <CO_LEDs_init>:
/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
    CO_ReturnError_t ret = CO_ERROR_NO;

    /* verify arguments */
    if (LEDs == NULL) {
 8004004:	4603      	mov	r3, r0
 8004006:	b120      	cbz	r0, 8004012 <CO_LEDs_init+0xe>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8004008:	2000      	movs	r0, #0
 800400a:	6018      	str	r0, [r3, #0]
 800400c:	6058      	str	r0, [r3, #4]
 800400e:	6098      	str	r0, [r3, #8]

    return ret;
 8004010:	4770      	bx	lr
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004016:	4770      	bx	lr

08004018 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8004018:	b470      	push	{r4, r5, r6}

    uint8_t rd = 0;
    uint8_t gr = 0;
    bool_t tick = false;

    LEDs->LEDtmr50ms += timeDifference_us;
 800401a:	6804      	ldr	r4, [r0, #0]
 800401c:	440c      	add	r4, r1
 800401e:	6004      	str	r4, [r0, #0]
    bool_t tick = false;
 8004020:	2600      	movs	r6, #0
    uint8_t gr = 0;
 8004022:	4631      	mov	r1, r6
    uint8_t rd = 0;
 8004024:	46b4      	mov	ip, r6
    while (LEDs->LEDtmr50ms >= 50000) {
 8004026:	e04c      	b.n	80040c2 <CO_LEDs_process+0xaa>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
            rd = gr = 0;

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
            else                                    gr |= CO_LED_blink;
 8004028:	2102      	movs	r1, #2
            rd = gr = 0;
 800402a:	f04f 0c00 	mov.w	ip, #0
 800402e:	e061      	b.n	80040f4 <CO_LEDs_process+0xdc>

            switch (++LEDs->LEDtmrflash_1) {
                case 1: rd |= CO_LED_flash_1; break;
 8004030:	f04c 0c04 	orr.w	ip, ip, #4
 8004034:	e068      	b.n	8004108 <CO_LEDs_process+0xf0>
                case 2: gr |= CO_LED_flash_1; break;
 8004036:	f041 0104 	orr.w	r1, r1, #4
 800403a:	e065      	b.n	8004108 <CO_LEDs_process+0xf0>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 800403c:	2400      	movs	r4, #0
 800403e:	7144      	strb	r4, [r0, #5]
 8004040:	e062      	b.n	8004108 <CO_LEDs_process+0xf0>
                default: break;
            }
            switch (++LEDs->LEDtmrflash_2) {
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8004042:	f04c 0c08 	orr.w	ip, ip, #8
                case 2: case 4: gr |= CO_LED_flash_2; break;
                case 8: LEDs->LEDtmrflash_2 = 0; break;
                default: break;
            }
            switch (++LEDs->LEDtmrflash_3) {
 8004046:	79c4      	ldrb	r4, [r0, #7]
 8004048:	3401      	adds	r4, #1
 800404a:	b2e4      	uxtb	r4, r4
 800404c:	71c4      	strb	r4, [r0, #7]
 800404e:	3c01      	subs	r4, #1
 8004050:	2c09      	cmp	r4, #9
 8004052:	d80e      	bhi.n	8004072 <CO_LEDs_process+0x5a>
 8004054:	e8df f004 	tbb	[pc, r4]
 8004058:	1c0b1c0b 	.word	0x1c0b1c0b
 800405c:	0d0d1c0b 	.word	0x0d0d1c0b
 8004060:	1f0d      	.short	0x1f0d
                case 2: case 4: gr |= CO_LED_flash_2; break;
 8004062:	f041 0108 	orr.w	r1, r1, #8
 8004066:	e7ee      	b.n	8004046 <CO_LEDs_process+0x2e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8004068:	2400      	movs	r4, #0
 800406a:	7184      	strb	r4, [r0, #6]
 800406c:	e7eb      	b.n	8004046 <CO_LEDs_process+0x2e>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 800406e:	f04c 0c10 	orr.w	ip, ip, #16
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: break;
            }
            switch (++LEDs->LEDtmrflash_4) {
 8004072:	7a04      	ldrb	r4, [r0, #8]
 8004074:	3401      	adds	r4, #1
 8004076:	b2e4      	uxtb	r4, r4
 8004078:	7204      	strb	r4, [r0, #8]
 800407a:	3c01      	subs	r4, #1
 800407c:	2c0b      	cmp	r4, #11
 800407e:	d81b      	bhi.n	80040b8 <CO_LEDs_process+0xa0>
 8004080:	e8df f004 	tbb	[pc, r4]
 8004084:	0f0c0f0c 	.word	0x0f0c0f0c
 8004088:	0f0c0f0c 	.word	0x0f0c0f0c
 800408c:	121a1a1a 	.word	0x121a1a1a
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8004090:	f041 0110 	orr.w	r1, r1, #16
 8004094:	e7ed      	b.n	8004072 <CO_LEDs_process+0x5a>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8004096:	2400      	movs	r4, #0
 8004098:	71c4      	strb	r4, [r0, #7]
 800409a:	e7ea      	b.n	8004072 <CO_LEDs_process+0x5a>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 800409c:	f04c 0c20 	orr.w	ip, ip, #32
 80040a0:	e00a      	b.n	80040b8 <CO_LEDs_process+0xa0>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 80040a2:	f041 0120 	orr.w	r1, r1, #32
 80040a6:	e007      	b.n	80040b8 <CO_LEDs_process+0xa0>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 80040a8:	2400      	movs	r4, #0
 80040aa:	7204      	strb	r4, [r0, #8]
 80040ac:	e004      	b.n	80040b8 <CO_LEDs_process+0xa0>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80040ae:	f001 0c7e 	and.w	ip, r1, #126	; 0x7e
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80040b2:	7a81      	ldrb	r1, [r0, #10]
 80040b4:	f001 017e 	and.w	r1, r1, #126	; 0x7e
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	d13f      	bne.n	800413c <CO_LEDs_process+0x124>
 80040bc:	f04c 0c01 	orr.w	ip, ip, #1
            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 80040c0:	2601      	movs	r6, #1
    while (LEDs->LEDtmr50ms >= 50000) {
 80040c2:	6804      	ldr	r4, [r0, #0]
 80040c4:	f24c 354f 	movw	r5, #49999	; 0xc34f
 80040c8:	42ac      	cmp	r4, r5
 80040ca:	d93a      	bls.n	8004142 <CO_LEDs_process+0x12a>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 80040cc:	7a41      	ldrb	r1, [r0, #9]
 80040ce:	f001 0501 	and.w	r5, r1, #1
        LEDs->LEDtmr50ms -= 50000;
 80040d2:	f5a4 4443 	sub.w	r4, r4, #49920	; 0xc300
 80040d6:	3c50      	subs	r4, #80	; 0x50
 80040d8:	6004      	str	r4, [r0, #0]
        if (++LEDs->LEDtmr200ms > 3) {
 80040da:	7904      	ldrb	r4, [r0, #4]
 80040dc:	3401      	adds	r4, #1
 80040de:	b2e4      	uxtb	r4, r4
 80040e0:	7104      	strb	r4, [r0, #4]
 80040e2:	2c03      	cmp	r4, #3
 80040e4:	d9e3      	bls.n	80040ae <CO_LEDs_process+0x96>
            LEDs->LEDtmr200ms = 0;
 80040e6:	2400      	movs	r4, #0
 80040e8:	7104      	strb	r4, [r0, #4]
            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 80040ea:	f011 0102 	ands.w	r1, r1, #2
 80040ee:	d19b      	bne.n	8004028 <CO_LEDs_process+0x10>
 80040f0:	f04f 0c02 	mov.w	ip, #2
            switch (++LEDs->LEDtmrflash_1) {
 80040f4:	7944      	ldrb	r4, [r0, #5]
 80040f6:	3401      	adds	r4, #1
 80040f8:	b2e4      	uxtb	r4, r4
 80040fa:	7144      	strb	r4, [r0, #5]
 80040fc:	2c02      	cmp	r4, #2
 80040fe:	d09a      	beq.n	8004036 <CO_LEDs_process+0x1e>
 8004100:	2c06      	cmp	r4, #6
 8004102:	d09b      	beq.n	800403c <CO_LEDs_process+0x24>
 8004104:	2c01      	cmp	r4, #1
 8004106:	d093      	beq.n	8004030 <CO_LEDs_process+0x18>
            switch (++LEDs->LEDtmrflash_2) {
 8004108:	7984      	ldrb	r4, [r0, #6]
 800410a:	3401      	adds	r4, #1
 800410c:	b2e4      	uxtb	r4, r4
 800410e:	7184      	strb	r4, [r0, #6]
 8004110:	3c01      	subs	r4, #1
 8004112:	2c07      	cmp	r4, #7
 8004114:	d897      	bhi.n	8004046 <CO_LEDs_process+0x2e>
 8004116:	a601      	add	r6, pc, #4	; (adr r6, 800411c <CO_LEDs_process+0x104>)
 8004118:	f856 f024 	ldr.w	pc, [r6, r4, lsl #2]
 800411c:	08004043 	.word	0x08004043
 8004120:	08004063 	.word	0x08004063
 8004124:	08004043 	.word	0x08004043
 8004128:	08004063 	.word	0x08004063
 800412c:	08004047 	.word	0x08004047
 8004130:	08004047 	.word	0x08004047
 8004134:	08004047 	.word	0x08004047
 8004138:	08004069 	.word	0x08004069
        else               gr |= CO_LED_flicker;
 800413c:	f041 0101 	orr.w	r1, r1, #1
 8004140:	e7be      	b.n	80040c0 <CO_LEDs_process+0xa8>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8004142:	b35e      	cbz	r6, 800419c <CO_LEDs_process+0x184>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8004144:	9c03      	ldr	r4, [sp, #12]
 8004146:	b9e4      	cbnz	r4, 8004182 <CO_LEDs_process+0x16a>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8004148:	b912      	cbnz	r2, 8004150 <CO_LEDs_process+0x138>
 800414a:	f00c 0401 	and.w	r4, ip, #1
 800414e:	e019      	b.n	8004184 <CO_LEDs_process+0x16c>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8004150:	9c05      	ldr	r4, [sp, #20]
 8004152:	b114      	cbz	r4, 800415a <CO_LEDs_process+0x142>
 8004154:	f00c 0420 	and.w	r4, ip, #32
 8004158:	e014      	b.n	8004184 <CO_LEDs_process+0x16c>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 800415a:	9c06      	ldr	r4, [sp, #24]
 800415c:	b114      	cbz	r4, 8004164 <CO_LEDs_process+0x14c>
 800415e:	f00c 0410 	and.w	r4, ip, #16
 8004162:	e00f      	b.n	8004184 <CO_LEDs_process+0x16c>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 8004164:	9c07      	ldr	r4, [sp, #28]
 8004166:	b114      	cbz	r4, 800416e <CO_LEDs_process+0x156>
 8004168:	f00c 0408 	and.w	r4, ip, #8
 800416c:	e00a      	b.n	8004184 <CO_LEDs_process+0x16c>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 800416e:	9c04      	ldr	r4, [sp, #16]
 8004170:	b114      	cbz	r4, 8004178 <CO_LEDs_process+0x160>
 8004172:	f00c 0404 	and.w	r4, ip, #4
 8004176:	e005      	b.n	8004184 <CO_LEDs_process+0x16c>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8004178:	9c08      	ldr	r4, [sp, #32]
 800417a:	b18c      	cbz	r4, 80041a0 <CO_LEDs_process+0x188>
 800417c:	f00c 0402 	and.w	r4, ip, #2
 8004180:	e000      	b.n	8004184 <CO_LEDs_process+0x16c>
        if      (ErrCANbusOff)                      rd_co = 1;
 8004182:	2401      	movs	r4, #1
        else                                        rd_co = 0;

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 8004184:	b173      	cbz	r3, 80041a4 <CO_LEDs_process+0x18c>
 8004186:	f001 0301 	and.w	r3, r1, #1
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
        else                                        gr_co = 0;

        if (rd_co != 0) rd |= CO_LED_CANopen;
 800418a:	b10c      	cbz	r4, 8004190 <CO_LEDs_process+0x178>
 800418c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        if (gr_co != 0) gr |= CO_LED_CANopen;
 8004190:	b10b      	cbz	r3, 8004196 <CO_LEDs_process+0x17e>
 8004192:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        LEDs->LEDred = rd;
 8004196:	f880 c009 	strb.w	ip, [r0, #9]
        LEDs->LEDgreen = gr;
 800419a:	7281      	strb	r1, [r0, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 800419c:	bc70      	pop	{r4, r5, r6}
 800419e:	4770      	bx	lr
        else                                        rd_co = 0;
 80041a0:	2400      	movs	r4, #0
 80041a2:	e7ef      	b.n	8004184 <CO_LEDs_process+0x16c>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 80041a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a6:	b113      	cbz	r3, 80041ae <CO_LEDs_process+0x196>
 80041a8:	f001 0310 	and.w	r3, r1, #16
 80041ac:	e7ed      	b.n	800418a <CO_LEDs_process+0x172>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 80041ae:	2a04      	cmp	r2, #4
 80041b0:	d005      	beq.n	80041be <CO_LEDs_process+0x1a6>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 80041b2:	2a7f      	cmp	r2, #127	; 0x7f
 80041b4:	d006      	beq.n	80041c4 <CO_LEDs_process+0x1ac>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 80041b6:	2a05      	cmp	r2, #5
 80041b8:	d007      	beq.n	80041ca <CO_LEDs_process+0x1b2>
        else                                        gr_co = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e7e5      	b.n	800418a <CO_LEDs_process+0x172>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 80041be:	f001 0304 	and.w	r3, r1, #4
 80041c2:	e7e2      	b.n	800418a <CO_LEDs_process+0x172>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 80041c4:	f001 0302 	and.w	r3, r1, #2
 80041c8:	e7df      	b.n	800418a <CO_LEDs_process+0x172>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e7dd      	b.n	800418a <CO_LEDs_process+0x172>
 80041ce:	bf00      	nop

080041d0 <checkBitrate>:


/******************************************************************************/
bool_t checkBitrate(void *object, uint16_t bitRate){
	return 1;
}
 80041d0:	2001      	movs	r0, #1
 80041d2:	4770      	bx	lr

080041d4 <CO_LSSslave_receive>:
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80041d4:	790b      	ldrb	r3, [r1, #4]
    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d000      	beq.n	80041dc <CO_LSSslave_receive+0x8>
 80041da:	4770      	bx	lr
 80041dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1fb      	bne.n	80041da <CO_LSSslave_receive+0x6>
        uint8_t *data = CO_CANrxMsg_readData(msg);
 80041e2:	f101 0c05 	add.w	ip, r1, #5
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 80041e6:	794b      	ldrb	r3, [r1, #5]
        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d013      	beq.n	8004214 <CO_LSSslave_receive+0x40>
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80041ec:	7c02      	ldrb	r2, [r0, #16]
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	f040 8093 	bne.w	800431a <CO_LSSslave_receive+0x146>
{
 80041f4:	b530      	push	{r4, r5, lr}
            switch (cs) {
 80041f6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80041fa:	2a11      	cmp	r2, #17
 80041fc:	d853      	bhi.n	80042a6 <CO_LSSslave_receive+0xd2>
 80041fe:	e8df f002 	tbb	[pc, r2]
 8004202:	322e      	.short	0x322e
 8004204:	52523a36 	.word	0x52523a36
 8004208:	52525252 	.word	0x52525252
 800420c:	52525252 	.word	0x52525252
 8004210:	53525252 	.word	0x53525252
            uint8_t mode = data[1];
 8004214:	798a      	ldrb	r2, [r1, #6]
            switch (mode) {
 8004216:	b112      	cbz	r2, 800421e <CO_LSSslave_receive+0x4a>
 8004218:	2a01      	cmp	r2, #1
 800421a:	d01d      	beq.n	8004258 <CO_LSSslave_receive+0x84>
 800421c:	4770      	bx	lr
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800421e:	7c02      	ldrb	r2, [r0, #16]
 8004220:	2a01      	cmp	r2, #1
 8004222:	d009      	beq.n	8004238 <CO_LSSslave_receive+0x64>
        bool_t request_LSSslave_process = false;
 8004224:	2200      	movs	r2, #0
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8004226:	2300      	movs	r3, #0
 8004228:	7403      	strb	r3, [r0, #16]
                    memset(&LSSslave->lssSelect, 0,
 800422a:	6143      	str	r3, [r0, #20]
 800422c:	6183      	str	r3, [r0, #24]
 800422e:	61c3      	str	r3, [r0, #28]
 8004230:	6203      	str	r3, [r0, #32]
        if (request_LSSslave_process) {
 8004232:	2a00      	cmp	r2, #0
 8004234:	d17b      	bne.n	800432e <CO_LSSslave_receive+0x15a>
 8004236:	4770      	bx	lr
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8004238:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800423c:	2aff      	cmp	r2, #255	; 0xff
 800423e:	d001      	beq.n	8004244 <CO_LSSslave_receive+0x70>
        bool_t request_LSSslave_process = false;
 8004240:	2200      	movs	r2, #0
 8004242:	e7f0      	b.n	8004226 <CO_LSSslave_receive+0x52>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8004244:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004246:	7812      	ldrb	r2, [r2, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8004248:	2aff      	cmp	r2, #255	; 0xff
 800424a:	d003      	beq.n	8004254 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 800424c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
                        request_LSSslave_process = true;
 8004250:	2201      	movs	r2, #1
 8004252:	e7e8      	b.n	8004226 <CO_LSSslave_receive+0x52>
        bool_t request_LSSslave_process = false;
 8004254:	2200      	movs	r2, #0
 8004256:	e7e6      	b.n	8004226 <CO_LSSslave_receive+0x52>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004258:	2301      	movs	r3, #1
 800425a:	7403      	strb	r3, [r0, #16]
        if (request_LSSslave_process) {
 800425c:	4770      	bx	lr
                memcpy(&valSw, &data[1], sizeof(valSw));
 800425e:	f8d1 3006 	ldr.w	r3, [r1, #6]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8004262:	6143      	str	r3, [r0, #20]
        if (request_LSSslave_process) {
 8004264:	e01f      	b.n	80042a6 <CO_LSSslave_receive+0xd2>
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004266:	f8d1 3006 	ldr.w	r3, [r1, #6]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800426a:	6183      	str	r3, [r0, #24]
        if (request_LSSslave_process) {
 800426c:	e01b      	b.n	80042a6 <CO_LSSslave_receive+0xd2>
                memcpy(&valSw, &data[1], sizeof(valSw));
 800426e:	f8d1 3006 	ldr.w	r3, [r1, #6]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8004272:	61c3      	str	r3, [r0, #28]
        if (request_LSSslave_process) {
 8004274:	e017      	b.n	80042a6 <CO_LSSslave_receive+0xd2>
                memcpy(&valSw, &data[1], sizeof(valSw));
 8004276:	f8d1 2006 	ldr.w	r2, [r1, #6]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 800427a:	6202      	str	r2, [r0, #32]
                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 800427c:	6981      	ldr	r1, [r0, #24]
 800427e:	6844      	ldr	r4, [r0, #4]
 8004280:	428c      	cmp	r4, r1
 8004282:	d110      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
 8004284:	6884      	ldr	r4, [r0, #8]
 8004286:	69c1      	ldr	r1, [r0, #28]
 8004288:	428c      	cmp	r4, r1
 800428a:	d10c      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
 800428c:	68c1      	ldr	r1, [r0, #12]
 800428e:	4291      	cmp	r1, r2
 8004290:	d109      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
 8004292:	6801      	ldr	r1, [r0, #0]
 8004294:	6942      	ldr	r2, [r0, #20]
 8004296:	4291      	cmp	r1, r2
 8004298:	d105      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800429a:	2201      	movs	r2, #1
 800429c:	7402      	strb	r2, [r0, #16]
                    LSSslave->service = cs;
 800429e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
            CO_FLAG_SET(LSSslave->sendResponse);
 80042a2:	2301      	movs	r3, #1
 80042a4:	6443      	str	r3, [r0, #68]	; 0x44
}
 80042a6:	bd30      	pop	{r4, r5, pc}
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80042a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	2aff      	cmp	r2, #255	; 0xff
 80042ae:	d1fa      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80042b0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80042b4:	2aff      	cmp	r2, #255	; 0xff
 80042b6:	d1f6      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
                    uint8_t bitCheck = data[5];
 80042b8:	7a8a      	ldrb	r2, [r1, #10]
                    uint8_t lssSub = data[6];
 80042ba:	f891 c00b 	ldrb.w	ip, [r1, #11]
                    uint8_t lssNext = data[7];
 80042be:	f891 e00c 	ldrb.w	lr, [r1, #12]
                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 80042c2:	2a1f      	cmp	r2, #31
 80042c4:	d901      	bls.n	80042ca <CO_LSSslave_receive+0xf6>
 80042c6:	2a80      	cmp	r2, #128	; 0x80
 80042c8:	d1ed      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
 80042ca:	f1bc 0f03 	cmp.w	ip, #3
 80042ce:	d8ea      	bhi.n	80042a6 <CO_LSSslave_receive+0xd2>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 80042d0:	f1be 0f03 	cmp.w	lr, #3
 80042d4:	d8e7      	bhi.n	80042a6 <CO_LSSslave_receive+0xd2>
                    memcpy(&valSw, &data[1], sizeof(valSw));
 80042d6:	f8d1 4006 	ldr.w	r4, [r1, #6]
                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 80042da:	2a80      	cmp	r2, #128	; 0x80
 80042dc:	d013      	beq.n	8004306 <CO_LSSslave_receive+0x132>
                    else if (LSSslave->fastscanPos == lssSub) {
 80042de:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 80042e2:	4561      	cmp	r1, ip
 80042e4:	d1df      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 80042e6:	f04f 31ff 	mov.w	r1, #4294967295
 80042ea:	4091      	lsls	r1, r2
                            == (idNumber & mask))
 80042ec:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
 80042f0:	406c      	eors	r4, r5
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 80042f2:	420c      	tst	r4, r1
 80042f4:	d1d7      	bne.n	80042a6 <CO_LSSslave_receive+0xd2>
                            LSSslave->fastscanPos = lssNext;
 80042f6:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
                            if (bitCheck == 0 && lssNext < lssSub) {
 80042fa:	b95a      	cbnz	r2, 8004314 <CO_LSSslave_receive+0x140>
 80042fc:	45f4      	cmp	ip, lr
 80042fe:	d909      	bls.n	8004314 <CO_LSSslave_receive+0x140>
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004300:	2201      	movs	r2, #1
 8004302:	7402      	strb	r2, [r0, #16]
                    if (ack) {
 8004304:	e006      	b.n	8004314 <CO_LSSslave_receive+0x140>
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8004306:	2200      	movs	r2, #0
 8004308:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 800430c:	6242      	str	r2, [r0, #36]	; 0x24
 800430e:	6282      	str	r2, [r0, #40]	; 0x28
 8004310:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004312:	6302      	str	r2, [r0, #48]	; 0x30
                        LSSslave->service = cs;
 8004314:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
        if (request_LSSslave_process) {
 8004318:	e7c3      	b.n	80042a2 <CO_LSSslave_receive+0xce>
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 800431a:	f8d1 1005 	ldr.w	r1, [r1, #5]
 800431e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004322:	f8c0 1049 	str.w	r1, [r0, #73]	; 0x49
 8004326:	f8c0 204d 	str.w	r2, [r0, #77]	; 0x4d
            LSSslave->service = cs;
 800432a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
            CO_FLAG_SET(LSSslave->sendResponse);
 800432e:	2301      	movs	r3, #1
 8004330:	6443      	str	r3, [r0, #68]	; 0x44
 8004332:	4770      	bx	lr

08004334 <storeIDandBitrate>:
bool_t storeIDandBitrate(void *object, uint8_t id, uint16_t bitRate){
 8004334:	b500      	push	{lr}
 8004336:	b087      	sub	sp, #28
 8004338:	4613      	mov	r3, r2
	uint8_t data[3] = {0};
 800433a:	4a16      	ldr	r2, [pc, #88]	; (8004394 <storeIDandBitrate+0x60>)
 800433c:	8812      	ldrh	r2, [r2, #0]
 800433e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	f88d 2016 	strb.w	r2, [sp, #22]
	data[0] = id;
 8004348:	f88d 1014 	strb.w	r1, [sp, #20]
	data[1] = (uint8_t)bitRate;
 800434c:	f88d 3015 	strb.w	r3, [sp, #21]
	data[2] = bitRate >> 8;
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_GPIO_WritePin(I2C_WP_GPIO_Port, I2C_WP_Pin, GPIO_PIN_RESET);
 8004356:	2120      	movs	r1, #32
 8004358:	480f      	ldr	r0, [pc, #60]	; (8004398 <storeIDandBitrate+0x64>)
 800435a:	f003 fda2 	bl	8007ea2 <HAL_GPIO_WritePin>
	while (HAL_I2C_IsDeviceReady(&hi2c1, 0x53 << 1, 3, 5)!= HAL_OK){}
 800435e:	2305      	movs	r3, #5
 8004360:	2203      	movs	r2, #3
 8004362:	21a6      	movs	r1, #166	; 0xa6
 8004364:	480d      	ldr	r0, [pc, #52]	; (800439c <storeIDandBitrate+0x68>)
 8004366:	f004 fb6f 	bl	8008a48 <HAL_I2C_IsDeviceReady>
 800436a:	2800      	cmp	r0, #0
 800436c:	d1f7      	bne.n	800435e <storeIDandBitrate+0x2a>
	if(HAL_I2C_Mem_Write(&hi2c1, 0x53 << 1, 0x0, I2C_MEMADD_SIZE_8BIT, data, 3, 20) == HAL_OK){
 800436e:	2314      	movs	r3, #20
 8004370:	9302      	str	r3, [sp, #8]
 8004372:	2303      	movs	r3, #3
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	ab05      	add	r3, sp, #20
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2301      	movs	r3, #1
 800437c:	2200      	movs	r2, #0
 800437e:	21a6      	movs	r1, #166	; 0xa6
 8004380:	4806      	ldr	r0, [pc, #24]	; (800439c <storeIDandBitrate+0x68>)
 8004382:	f004 f90b 	bl	800859c <HAL_I2C_Mem_Write>
 8004386:	b118      	cbz	r0, 8004390 <storeIDandBitrate+0x5c>
	return 0;
 8004388:	2000      	movs	r0, #0
}
 800438a:	b007      	add	sp, #28
 800438c:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
 8004390:	2001      	movs	r0, #1
 8004392:	e7fa      	b.n	800438a <storeIDandBitrate+0x56>
 8004394:	0800aedc 	.word	0x0800aedc
 8004398:	40010c00 	.word	0x40010c00
 800439c:	20000664 	.word	0x20000664

080043a0 <CO_LSSslave_initCheckBitRateCallback>:
    if(LSSslave != NULL){
 80043a0:	b108      	cbz	r0, 80043a6 <CO_LSSslave_initCheckBitRateCallback+0x6>
        LSSslave->functLSScheckBitRateObject = object;
 80043a2:	6581      	str	r1, [r0, #88]	; 0x58
        LSSslave->pFunctLSScheckBitRate = pFunctLSScheckBitRate;
 80043a4:	6542      	str	r2, [r0, #84]	; 0x54
}
 80043a6:	4770      	bx	lr

080043a8 <CO_LSSslave_initCfgStoreCallback>:
    if(LSSslave != NULL){
 80043a8:	b108      	cbz	r0, 80043ae <CO_LSSslave_initCfgStoreCallback+0x6>
        LSSslave->functLSScfgStoreObject = object;
 80043aa:	6681      	str	r1, [r0, #104]	; 0x68
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
 80043ac:	6642      	str	r2, [r0, #100]	; 0x64
}
 80043ae:	4770      	bx	lr

080043b0 <CO_LSSslave_init>:
{
 80043b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043b4:	b085      	sub	sp, #20
 80043b6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80043ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 80043bc:	2800      	cmp	r0, #0
 80043be:	d054      	beq.n	800446a <CO_LSSslave_init+0xba>
 80043c0:	460e      	mov	r6, r1
 80043c2:	4690      	mov	r8, r2
 80043c4:	461d      	mov	r5, r3
 80043c6:	4604      	mov	r4, r0
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	d051      	beq.n	8004470 <CO_LSSslave_init+0xc0>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d052      	beq.n	8004476 <CO_LSSslave_init+0xc6>
 80043d0:	f1b9 0f00 	cmp.w	r9, #0
 80043d4:	d052      	beq.n	800447c <CO_LSSslave_init+0xcc>
        CANdevRx==NULL || CANdevTx==NULL ||
 80043d6:	2f00      	cmp	r7, #0
 80043d8:	d053      	beq.n	8004482 <CO_LSSslave_init+0xd2>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	f993 3000 	ldrsb.w	r3, [r3]
        CANdevRx==NULL || CANdevTx==NULL ||
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	dc01      	bgt.n	80043e8 <CO_LSSslave_init+0x38>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80043e4:	2aff      	cmp	r2, #255	; 0xff
 80043e6:	d14f      	bne.n	8004488 <CO_LSSslave_init+0xd8>
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 80043e8:	2274      	movs	r2, #116	; 0x74
 80043ea:	2100      	movs	r1, #0
 80043ec:	4620      	mov	r0, r4
 80043ee:	f005 fef9 	bl	800a1e4 <memset>
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 80043f2:	6830      	ldr	r0, [r6, #0]
 80043f4:	6871      	ldr	r1, [r6, #4]
 80043f6:	68b2      	ldr	r2, [r6, #8]
 80043f8:	68f3      	ldr	r3, [r6, #12]
 80043fa:	6020      	str	r0, [r4, #0]
 80043fc:	6061      	str	r1, [r4, #4]
 80043fe:	60a2      	str	r2, [r4, #8]
 8004400:	60e3      	str	r3, [r4, #12]
    LSSslave->pendingBitRate = pendingBitRate;
 8004402:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8004406:	63e5      	str	r5, [r4, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8004408:	782b      	ldrb	r3, [r5, #0]
 800440a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    ret = CO_CANrxBufferInit(
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <CO_LSSslave_init+0xe0>)
 8004410:	9302      	str	r3, [sp, #8]
 8004412:	9401      	str	r4, [sp, #4]
 8004414:	2600      	movs	r6, #0
 8004416:	9600      	str	r6, [sp, #0]
 8004418:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800441c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8004420:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8004424:	4648      	mov	r0, r9
 8004426:	f001 fab1 	bl	800598c <CO_CANrxBufferInit>
 800442a:	4605      	mov	r5, r0
    LSSslave->CANdevTx = CANdevTx;
 800442c:	66e7      	str	r7, [r4, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 800442e:	9601      	str	r6, [sp, #4]
 8004430:	2308      	movs	r3, #8
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	4633      	mov	r3, r6
 8004436:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800443a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800443e:	4638      	mov	r0, r7
 8004440:	f001 fade 	bl	8005a00 <CO_CANtxBufferInit>
 8004444:	6720      	str	r0, [r4, #112]	; 0x70
    if (LSSslave->TXbuff == NULL) {
 8004446:	b168      	cbz	r0, 8004464 <CO_LSSslave_init+0xb4>
    CO_LSSslave_initCfgStoreCallback(LSSslave, NULL, storeIDandBitrate);
 8004448:	4a12      	ldr	r2, [pc, #72]	; (8004494 <CO_LSSslave_init+0xe4>)
 800444a:	2100      	movs	r1, #0
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff ffab 	bl	80043a8 <CO_LSSslave_initCfgStoreCallback>
    CO_LSSslave_initCheckBitRateCallback(LSSslave, NULL, checkBitrate);
 8004452:	4a11      	ldr	r2, [pc, #68]	; (8004498 <CO_LSSslave_init+0xe8>)
 8004454:	2100      	movs	r1, #0
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff ffa2 	bl	80043a0 <CO_LSSslave_initCheckBitRateCallback>
}
 800445c:	4628      	mov	r0, r5
 800445e:	b005      	add	sp, #20
 8004460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8004464:	f04f 35ff 	mov.w	r5, #4294967295
 8004468:	e7ee      	b.n	8004448 <CO_LSSslave_init+0x98>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800446a:	f04f 35ff 	mov.w	r5, #4294967295
 800446e:	e7f5      	b.n	800445c <CO_LSSslave_init+0xac>
 8004470:	f04f 35ff 	mov.w	r5, #4294967295
 8004474:	e7f2      	b.n	800445c <CO_LSSslave_init+0xac>
 8004476:	f04f 35ff 	mov.w	r5, #4294967295
 800447a:	e7ef      	b.n	800445c <CO_LSSslave_init+0xac>
 800447c:	f04f 35ff 	mov.w	r5, #4294967295
 8004480:	e7ec      	b.n	800445c <CO_LSSslave_init+0xac>
 8004482:	f04f 35ff 	mov.w	r5, #4294967295
 8004486:	e7e9      	b.n	800445c <CO_LSSslave_init+0xac>
 8004488:	f04f 35ff 	mov.w	r5, #4294967295
 800448c:	e7e6      	b.n	800445c <CO_LSSslave_init+0xac>
 800448e:	bf00      	nop
 8004490:	080041d5 	.word	0x080041d5
 8004494:	08004335 	.word	0x08004335
 8004498:	080041d1 	.word	0x080041d1

0800449c <CO_LSSslave_process>:
    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 800449c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80dc 	beq.w	800465c <CO_LSSslave_process+0x1c0>
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4604      	mov	r4, r0
        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 80044a8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2005 	str.w	r2, [r3, #5]
 80044b0:	f8c3 2009 	str.w	r2, [r3, #9]
        switch (LSSslave->service) {
 80044b4:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 80044b8:	1f13      	subs	r3, r2, #4
 80044ba:	2b5a      	cmp	r3, #90	; 0x5a
 80044bc:	f200 80c4 	bhi.w	8004648 <CO_LSSslave_process+0x1ac>
 80044c0:	e8df f003 	tbb	[pc, r3]
 80044c4:	c2c2c22e 	.word	0xc2c2c22e
 80044c8:	c2c2c2c2 	.word	0xc2c2c2c2
 80044cc:	c2c2c2c2 	.word	0xc2c2c2c2
 80044d0:	4dc239c2 	.word	0x4dc239c2
 80044d4:	86c276c2 	.word	0x86c276c2
 80044d8:	c2c2c2c2 	.word	0xc2c2c2c2
 80044dc:	c2c2c2c2 	.word	0xc2c2c2c2
 80044e0:	c2c2c2c2 	.word	0xc2c2c2c2
 80044e4:	c2c2c2c2 	.word	0xc2c2c2c2
 80044e8:	c2c2c2c2 	.word	0xc2c2c2c2
 80044ec:	c2c2c2c2 	.word	0xc2c2c2c2
 80044f0:	c2c2c2c2 	.word	0xc2c2c2c2
 80044f4:	c2c2c2c2 	.word	0xc2c2c2c2
 80044f8:	c2c2c2c2 	.word	0xc2c2c2c2
 80044fc:	c2c2c2c2 	.word	0xc2c2c2c2
 8004500:	30c2c2c2 	.word	0x30c2c2c2
 8004504:	c2c2c2c2 	.word	0xc2c2c2c2
 8004508:	c2c2c2c2 	.word	0xc2c2c2c2
 800450c:	c2c2c2c2 	.word	0xc2c2c2c2
 8004510:	c2c2bec2 	.word	0xc2c2bec2
 8004514:	c2c2c2c2 	.word	0xc2c2c2c2
 8004518:	a29bc2c2 	.word	0xa29bc2c2
 800451c:	b0a9      	.short	0xb0a9
 800451e:	b7          	.byte	0xb7
 800451f:	00          	.byte	0x00
 8004520:	2001      	movs	r0, #1
 8004522:	e092      	b.n	800464a <CO_LSSslave_process+0x1ae>
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8004524:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004526:	2244      	movs	r2, #68	; 0x44
 8004528:	715a      	strb	r2, [r3, #5]
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 800452a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800452c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800452e:	f001 fa89 	bl	8005a44 <CO_CANsend>
 8004532:	2000      	movs	r0, #0
 8004534:	e089      	b.n	800464a <CO_LSSslave_process+0x1ae>
            nid = LSSslave->CANdata[1];
 8004536:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
            if (CO_LSS_NODE_ID_VALID(nid)) {
 800453a:	f990 204a 	ldrsb.w	r2, [r0, #74]	; 0x4a
 800453e:	2a00      	cmp	r2, #0
 8004540:	dd09      	ble.n	8004556 <CO_LSSslave_process+0xba>
                *LSSslave->pendingNodeID = nid;
 8004542:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004544:	7013      	strb	r3, [r2, #0]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8004546:	2200      	movs	r2, #0
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004548:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800454a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800454e:	7159      	strb	r1, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8004550:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004552:	719a      	strb	r2, [r3, #6]
        if(CANsend) {
 8004554:	e7e9      	b.n	800452a <CO_LSSslave_process+0x8e>
            if (CO_LSS_NODE_ID_VALID(nid)) {
 8004556:	2bff      	cmp	r3, #255	; 0xff
 8004558:	d0f3      	beq.n	8004542 <CO_LSSslave_process+0xa6>
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 800455a:	2201      	movs	r2, #1
 800455c:	e7f4      	b.n	8004548 <CO_LSSslave_process+0xac>
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800455e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004560:	2b00      	cmp	r3, #0
 8004562:	d075      	beq.n	8004650 <CO_LSSslave_process+0x1b4>
            tableSelector = LSSslave->CANdata[1];
 8004564:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
            tableIndex = LSSslave->CANdata[2];
 8004568:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800456c:	b975      	cbnz	r5, 800458c <CO_LSSslave_process+0xf0>
 800456e:	2a05      	cmp	r2, #5
 8004570:	d017      	beq.n	80045a2 <CO_LSSslave_process+0x106>
 8004572:	2a09      	cmp	r2, #9
 8004574:	d817      	bhi.n	80045a6 <CO_LSSslave_process+0x10a>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8004576:	493a      	ldr	r1, [pc, #232]	; (8004660 <CO_LSSslave_process+0x1c4>)
 8004578:	f831 6012 	ldrh.w	r6, [r1, r2, lsl #1]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 800457c:	4631      	mov	r1, r6
 800457e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004580:	4798      	blx	r3
                if (bit_rate_supported) {
 8004582:	b190      	cbz	r0, 80045aa <CO_LSSslave_process+0x10e>
                    *LSSslave->pendingBitRate = bit;
 8004584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004586:	801e      	strh	r6, [r3, #0]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8004588:	4629      	mov	r1, r5
 800458a:	e001      	b.n	8004590 <CO_LSSslave_process+0xf4>
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800458c:	2500      	movs	r5, #0
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800458e:	2101      	movs	r1, #1
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004590:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004592:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004596:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8004598:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800459a:	7199      	strb	r1, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 800459c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800459e:	71dd      	strb	r5, [r3, #7]
        if(CANsend) {
 80045a0:	e7c3      	b.n	800452a <CO_LSSslave_process+0x8e>
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80045a2:	2101      	movs	r1, #1
 80045a4:	e7f4      	b.n	8004590 <CO_LSSslave_process+0xf4>
 80045a6:	2101      	movs	r1, #1
 80045a8:	e7f2      	b.n	8004590 <CO_LSSslave_process+0xf4>
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80045aa:	2501      	movs	r5, #1
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 80045ac:	21ff      	movs	r1, #255	; 0xff
 80045ae:	e7ef      	b.n	8004590 <CO_LSSslave_process+0xf4>
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80045b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d04e      	beq.n	8004654 <CO_LSSslave_process+0x1b8>
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 80045b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d04d      	beq.n	8004658 <CO_LSSslave_process+0x1bc>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 80045bc:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
                delay |= LSSslave->CANdata[1];
 80045c0:	f890 204a 	ldrb.w	r2, [r0, #74]	; 0x4a
                LSSslave->pFunctLSSactivateBitRate(
 80045c4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80045c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80045ca:	4798      	blx	r3
    bool_t resetCommunication = false;
 80045cc:	2000      	movs	r0, #0
 80045ce:	e03c      	b.n	800464a <CO_LSSslave_process+0x1ae>
            if (LSSslave->pFunctLSScfgStore == NULL) {
 80045d0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80045d2:	b173      	cbz	r3, 80045f2 <CO_LSSslave_process+0x156>
                                               *LSSslave->pendingNodeID,
 80045d4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
                                               *LSSslave->pendingBitRate);
 80045d6:	6b82      	ldr	r2, [r0, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80045d8:	8812      	ldrh	r2, [r2, #0]
 80045da:	7809      	ldrb	r1, [r1, #0]
 80045dc:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80045de:	4798      	blx	r3
                if (!result) {
 80045e0:	b148      	cbz	r0, 80045f6 <CO_LSSslave_process+0x15a>
            errorCode = CO_LSS_CFG_STORE_OK;
 80045e2:	2100      	movs	r1, #0
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80045e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80045e6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80045ea:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80045ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80045ee:	7199      	strb	r1, [r3, #6]
        if(CANsend) {
 80045f0:	e79b      	b.n	800452a <CO_LSSslave_process+0x8e>
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 80045f2:	2101      	movs	r1, #1
 80045f4:	e7f6      	b.n	80045e4 <CO_LSSslave_process+0x148>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 80045f6:	2102      	movs	r1, #2
 80045f8:	e7f4      	b.n	80045e4 <CO_LSSslave_process+0x148>
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80045fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80045fc:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80045fe:	6802      	ldr	r2, [r0, #0]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8004600:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004602:	f8c3 2006 	str.w	r2, [r3, #6]
        if(CANsend) {
 8004606:	e790      	b.n	800452a <CO_LSSslave_process+0x8e>
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004608:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800460a:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 800460c:	6842      	ldr	r2, [r0, #4]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800460e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004610:	f8c3 2006 	str.w	r2, [r3, #6]
        if(CANsend) {
 8004614:	e789      	b.n	800452a <CO_LSSslave_process+0x8e>
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004616:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004618:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800461a:	6882      	ldr	r2, [r0, #8]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800461c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800461e:	f8c3 2006 	str.w	r2, [r3, #6]
        if(CANsend) {
 8004622:	e782      	b.n	800452a <CO_LSSslave_process+0x8e>
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004624:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004626:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8004628:	68c2      	ldr	r2, [r0, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800462a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800462c:	f8c3 2006 	str.w	r2, [r3, #6]
        if(CANsend) {
 8004630:	e77b      	b.n	800452a <CO_LSSslave_process+0x8e>
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8004632:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004634:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8004636:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004638:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800463c:	719a      	strb	r2, [r3, #6]
        if(CANsend) {
 800463e:	e774      	b.n	800452a <CO_LSSslave_process+0x8e>
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8004640:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004642:	224f      	movs	r2, #79	; 0x4f
 8004644:	715a      	strb	r2, [r3, #5]
        if(CANsend) {
 8004646:	e770      	b.n	800452a <CO_LSSslave_process+0x8e>
    bool_t resetCommunication = false;
 8004648:	2000      	movs	r0, #0
        CO_FLAG_CLEAR(LSSslave->sendResponse);
 800464a:	2300      	movs	r3, #0
 800464c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800464e:	bd70      	pop	{r4, r5, r6, pc}
    bool_t resetCommunication = false;
 8004650:	2000      	movs	r0, #0
 8004652:	e7fa      	b.n	800464a <CO_LSSslave_process+0x1ae>
 8004654:	2000      	movs	r0, #0
 8004656:	e7f8      	b.n	800464a <CO_LSSslave_process+0x1ae>
 8004658:	2000      	movs	r0, #0
 800465a:	e7f6      	b.n	800464a <CO_LSSslave_process+0x1ae>
 800465c:	2000      	movs	r0, #0
}
 800465e:	4770      	bx	lr
 8004660:	0800af4c 	.word	0x0800af4c

08004664 <CO_delete>:
    }
    return coFinal;
}

void CO_delete(CO_t *co) {
    if (co == NULL) {
 8004664:	2800      	cmp	r0, #0
 8004666:	d035      	beq.n	80046d4 <CO_delete+0x70>
void CO_delete(CO_t *co) {
 8004668:	b510      	push	{r4, lr}
 800466a:	4604      	mov	r4, r0
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 800466c:	6840      	ldr	r0, [r0, #4]
 800466e:	f001 f983 	bl	8005978 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8004672:	68e0      	ldr	r0, [r4, #12]
 8004674:	f005 fd76 	bl	800a164 <free>
    CO_free(co->CANrx);
 8004678:	68a0      	ldr	r0, [r4, #8]
 800467a:	f005 fd73 	bl	800a164 <free>
    CO_free(co->CANmodule);
 800467e:	6860      	ldr	r0, [r4, #4]
 8004680:	f005 fd70 	bl	800a164 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8004684:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004686:	f005 fd6d 	bl	800a164 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 800468a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800468c:	f005 fd6a 	bl	800a164 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8004690:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004692:	f005 fd67 	bl	800a164 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8004696:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004698:	f005 fd64 	bl	800a164 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 800469c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800469e:	f005 fd61 	bl	800a164 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 80046a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80046a4:	f005 fd5e 	bl	800a164 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 80046a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80046aa:	f005 fd5b 	bl	800a164 <free>

    /* Emergency */
    CO_free(co->em);
 80046ae:	69e0      	ldr	r0, [r4, #28]
 80046b0:	f005 fd58 	bl	800a164 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 80046b4:	6a20      	ldr	r0, [r4, #32]
 80046b6:	f005 fd55 	bl	800a164 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 80046ba:	69a0      	ldr	r0, [r4, #24]
 80046bc:	f005 fd52 	bl	800a164 <free>
    CO_free(co->HBcons);
 80046c0:	6960      	ldr	r0, [r4, #20]
 80046c2:	f005 fd4f 	bl	800a164 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80046c6:	6920      	ldr	r0, [r4, #16]
 80046c8:	f005 fd4c 	bl	800a164 <free>

    /* CANopen object */
    CO_free(co);
 80046cc:	4620      	mov	r0, r4
 80046ce:	f005 fd49 	bl	800a164 <free>
}
 80046d2:	bd10      	pop	{r4, pc}
 80046d4:	4770      	bx	lr

080046d6 <CO_new>:
CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 80046d6:	b570      	push	{r4, r5, r6, lr}
 80046d8:	460d      	mov	r5, r1
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	2001      	movs	r0, #1
 80046de:	f005 fb45 	bl	8009d6c <calloc>
 80046e2:	4604      	mov	r4, r0
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d06f      	beq.n	80047c8 <CO_new+0xf2>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80046e8:	212c      	movs	r1, #44	; 0x2c
 80046ea:	2001      	movs	r0, #1
 80046ec:	f005 fb3e 	bl	8009d6c <calloc>
 80046f0:	6120      	str	r0, [r4, #16]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d06e      	beq.n	80047d4 <CO_new+0xfe>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80046f6:	2130      	movs	r1, #48	; 0x30
 80046f8:	2001      	movs	r0, #1
 80046fa:	f005 fb37 	bl	8009d6c <calloc>
 80046fe:	6160      	str	r0, [r4, #20]
 8004700:	2800      	cmp	r0, #0
 8004702:	d069      	beq.n	80047d8 <CO_new+0x102>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8004704:	2110      	movs	r1, #16
 8004706:	2008      	movs	r0, #8
 8004708:	f005 fb30 	bl	8009d6c <calloc>
 800470c:	61a0      	str	r0, [r4, #24]
 800470e:	2800      	cmp	r0, #0
 8004710:	d064      	beq.n	80047dc <CO_new+0x106>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8004712:	2150      	movs	r1, #80	; 0x50
 8004714:	2001      	movs	r0, #1
 8004716:	f005 fb29 	bl	8009d6c <calloc>
 800471a:	61e0      	str	r0, [r4, #28]
 800471c:	2800      	cmp	r0, #0
 800471e:	d05f      	beq.n	80047e0 <CO_new+0x10a>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8004720:	2108      	movs	r1, #8
 8004722:	2011      	movs	r0, #17
 8004724:	f005 fb22 	bl	8009d6c <calloc>
 8004728:	6220      	str	r0, [r4, #32]
 800472a:	2800      	cmp	r0, #0
 800472c:	d05b      	beq.n	80047e6 <CO_new+0x110>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800472e:	21a8      	movs	r1, #168	; 0xa8
 8004730:	2001      	movs	r0, #1
 8004732:	f005 fb1b 	bl	8009d6c <calloc>
 8004736:	6260      	str	r0, [r4, #36]	; 0x24
 8004738:	2800      	cmp	r0, #0
 800473a:	d057      	beq.n	80047ec <CO_new+0x116>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800473c:	212c      	movs	r1, #44	; 0x2c
 800473e:	2001      	movs	r0, #1
 8004740:	f005 fb14 	bl	8009d6c <calloc>
 8004744:	62a0      	str	r0, [r4, #40]	; 0x28
 8004746:	2800      	cmp	r0, #0
 8004748:	d053      	beq.n	80047f2 <CO_new+0x11c>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 800474a:	2160      	movs	r1, #96	; 0x60
 800474c:	2001      	movs	r0, #1
 800474e:	f005 fb0d 	bl	8009d6c <calloc>
 8004752:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004754:	2800      	cmp	r0, #0
 8004756:	d04f      	beq.n	80047f8 <CO_new+0x122>
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8004758:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800475c:	2004      	movs	r0, #4
 800475e:	f005 fb05 	bl	8009d6c <calloc>
 8004762:	6320      	str	r0, [r4, #48]	; 0x30
 8004764:	2800      	cmp	r0, #0
 8004766:	d04a      	beq.n	80047fe <CO_new+0x128>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8004768:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800476c:	2004      	movs	r0, #4
 800476e:	f005 fafd 	bl	8009d6c <calloc>
 8004772:	6360      	str	r0, [r4, #52]	; 0x34
 8004774:	2800      	cmp	r0, #0
 8004776:	d045      	beq.n	8004804 <CO_new+0x12e>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8004778:	210c      	movs	r1, #12
 800477a:	2001      	movs	r0, #1
 800477c:	f005 faf6 	bl	8009d6c <calloc>
 8004780:	63a0      	str	r0, [r4, #56]	; 0x38
 8004782:	2800      	cmp	r0, #0
 8004784:	d041      	beq.n	800480a <CO_new+0x134>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8004786:	2174      	movs	r1, #116	; 0x74
 8004788:	2001      	movs	r0, #1
 800478a:	f005 faef 	bl	8009d6c <calloc>
 800478e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004790:	2800      	cmp	r0, #0
 8004792:	d03d      	beq.n	8004810 <CO_new+0x13a>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8004794:	2138      	movs	r1, #56	; 0x38
 8004796:	2001      	movs	r0, #1
 8004798:	f005 fae8 	bl	8009d6c <calloc>
 800479c:	6060      	str	r0, [r4, #4]
 800479e:	b3d0      	cbz	r0, 8004816 <CO_new+0x140>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80047a0:	210c      	movs	r1, #12
 80047a2:	2011      	movs	r0, #17
 80047a4:	f005 fae2 	bl	8009d6c <calloc>
 80047a8:	60a0      	str	r0, [r4, #8]
 80047aa:	b3b8      	cbz	r0, 800481c <CO_new+0x146>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80047ac:	2118      	movs	r1, #24
 80047ae:	2009      	movs	r0, #9
 80047b0:	f005 fadc 	bl	8009d6c <calloc>
 80047b4:	60e0      	str	r0, [r4, #12]
 80047b6:	b3a0      	cbz	r0, 8004822 <CO_new+0x14c>
        co->nodeIdUnconfigured = true;
 80047b8:	2301      	movs	r3, #1
 80047ba:	6023      	str	r3, [r4, #0]
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80047bc:	f241 1604 	movw	r6, #4356	; 0x1104
    if (heapMemoryUsed != NULL) {
 80047c0:	b105      	cbz	r5, 80047c4 <CO_new+0xee>
        *heapMemoryUsed = mem;
 80047c2:	602e      	str	r6, [r5, #0]
}
 80047c4:	4620      	mov	r0, r4
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t mem = 0;
 80047c8:	2600      	movs	r6, #0
        CO_delete(co);
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff ff4a 	bl	8004664 <CO_delete>
 80047d0:	2400      	movs	r4, #0
 80047d2:	e7f5      	b.n	80047c0 <CO_new+0xea>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80047d4:	2640      	movs	r6, #64	; 0x40
 80047d6:	e7f8      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80047d8:	266c      	movs	r6, #108	; 0x6c
 80047da:	e7f6      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80047dc:	269c      	movs	r6, #156	; 0x9c
 80047de:	e7f4      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80047e0:	f44f 768e 	mov.w	r6, #284	; 0x11c
 80047e4:	e7f1      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80047e6:	f44f 76b6 	mov.w	r6, #364	; 0x16c
 80047ea:	e7ee      	b.n	80047ca <CO_new+0xf4>
 80047ec:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 80047f0:	e7eb      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80047f2:	f44f 7627 	mov.w	r6, #668	; 0x29c
 80047f6:	e7e8      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80047f8:	f44f 7632 	mov.w	r6, #712	; 0x2c8
 80047fc:	e7e5      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80047fe:	f44f 764a 	mov.w	r6, #808	; 0x328
 8004802:	e7e2      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8004804:	f640 06f8 	movw	r6, #2296	; 0x8f8
 8004808:	e7df      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 800480a:	f640 66a8 	movw	r6, #3752	; 0xea8
 800480e:	e7dc      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8004810:	f640 66b4 	movw	r6, #3764	; 0xeb4
 8004814:	e7d9      	b.n	80047ca <CO_new+0xf4>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8004816:	f640 7628 	movw	r6, #3880	; 0xf28
 800481a:	e7d6      	b.n	80047ca <CO_new+0xf4>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 800481c:	f44f 6676 	mov.w	r6, #3936	; 0xf60
 8004820:	e7d3      	b.n	80047ca <CO_new+0xf4>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8004822:	f241 062c 	movw	r6, #4140	; 0x102c
 8004826:	e7d0      	b.n	80047ca <CO_new+0xf4>

08004828 <CO_CANinit>:

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004828:	b1b8      	cbz	r0, 800485a <CO_CANinit+0x32>
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 800482a:	b570      	push	{r4, r5, r6, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	460c      	mov	r4, r1
 8004830:	4616      	mov	r6, r2
 8004832:	4605      	mov	r5, r0

    co->CANmodule->CANnormal = false;
 8004834:	6843      	ldr	r3, [r0, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800483a:	4608      	mov	r0, r1
 800483c:	f001 f810 	bl	8005860 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8004840:	9602      	str	r6, [sp, #8]
 8004842:	2309      	movs	r3, #9
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	68eb      	ldr	r3, [r5, #12]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2311      	movs	r3, #17
 800484c:	68aa      	ldr	r2, [r5, #8]
 800484e:	4621      	mov	r1, r4
 8004850:	6868      	ldr	r0, [r5, #4]
 8004852:	f001 f819 	bl	8005888 <CO_CANmodule_init>
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
}
 8004856:	b004      	add	sp, #16
 8004858:	bd70      	pop	{r4, r5, r6, pc}
    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800485e:	4770      	bx	lr

08004860 <CO_LSSinit>:
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8004860:	b1c8      	cbz	r0, 8004896 <CO_LSSinit+0x36>
{
 8004862:	b500      	push	{lr}
 8004864:	b087      	sub	sp, #28
 8004866:	4694      	mov	ip, r2
 8004868:	461a      	mov	r2, r3
 800486a:	4686      	mov	lr, r0
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 800486c:	6843      	ldr	r3, [r0, #4]
 800486e:	f240 70e4 	movw	r0, #2020	; 0x7e4
 8004872:	9005      	str	r0, [sp, #20]
 8004874:	2008      	movs	r0, #8
 8004876:	9004      	str	r0, [sp, #16]
 8004878:	9303      	str	r3, [sp, #12]
 800487a:	f240 70e5 	movw	r0, #2021	; 0x7e5
 800487e:	9002      	str	r0, [sp, #8]
 8004880:	2010      	movs	r0, #16
 8004882:	9001      	str	r0, [sp, #4]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	4663      	mov	r3, ip
 8004888:	f8de 003c 	ldr.w	r0, [lr, #60]	; 0x3c
 800488c:	f7ff fd90 	bl	80043b0 <CO_LSSslave_init>
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
}
 8004890:	b007      	add	sp, #28
 8004892:	f85d fb04 	ldr.w	pc, [sp], #4
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004896:	f04f 30ff 	mov.w	r0, #4294967295
}
 800489a:	4770      	bx	lr

0800489c <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	b08b      	sub	sp, #44	; 0x2c
 80048a2:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80048a6:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 80048aa:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f000 80b7 	beq.w	8004a20 <CO_CANopenInit+0x184>
 80048b2:	4615      	mov	r5, r2
 80048b4:	4698      	mov	r8, r3
 80048b6:	4604      	mov	r4, r0

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80048b8:	b35a      	cbz	r2, 8004912 <CO_CANopenInit+0x76>
        em = co->em;
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 80048ba:	2300      	movs	r3, #0
 80048bc:	6023      	str	r3, [r4, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 80048be:	2eff      	cmp	r6, #255	; 0xff
 80048c0:	d029      	beq.n	8004916 <CO_CANopenInit+0x7a>
        co->nodeIdUnconfigured = true;
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 80048c2:	b273      	sxtb	r3, r6
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f340 80ae 	ble.w	8004a26 <CO_CANopenInit+0x18a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 80048ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80048cc:	f7ff fb9a 	bl	8004004 <CO_LEDs_init>
        if (err) return err;
 80048d0:	4603      	mov	r3, r0
 80048d2:	b9d0      	cbnz	r0, 800490a <CO_CANopenInit+0x6e>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 80a8 	bne.w	8004a2c <CO_CANopenInit+0x190>

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80048dc:	4b55      	ldr	r3, [pc, #340]	; (8004a34 <CO_CANopenInit+0x198>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
        err = CO_EM_init(co->em,
 80048e2:	9705      	str	r7, [sp, #20]
 80048e4:	9604      	str	r6, [sp, #16]
 80048e6:	f102 0318 	add.w	r3, r2, #24
 80048ea:	9303      	str	r3, [sp, #12]
 80048ec:	2301      	movs	r3, #1
 80048ee:	9302      	str	r3, [sp, #8]
 80048f0:	f102 036c 	add.w	r3, r2, #108	; 0x6c
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	2311      	movs	r3, #17
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	6a23      	ldr	r3, [r4, #32]
 80048fc:	320c      	adds	r2, #12
 80048fe:	6861      	ldr	r1, [r4, #4]
 8004900:	69e0      	ldr	r0, [r4, #28]
 8004902:	f7fc fbc9 	bl	8001098 <CO_EM_init>
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8004906:	4603      	mov	r3, r0
 8004908:	b140      	cbz	r0, 800491c <CO_CANopenInit+0x80>
        }
    }
#endif

    return CO_ERROR_NO;
}
 800490a:	4618      	mov	r0, r3
 800490c:	b00b      	add	sp, #44	; 0x2c
 800490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        em = co->em;
 8004912:	69c5      	ldr	r5, [r0, #28]
 8004914:	e7d1      	b.n	80048ba <CO_CANopenInit+0x1e>
        co->nodeIdUnconfigured = true;
 8004916:	2301      	movs	r3, #1
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	e7d6      	b.n	80048ca <CO_CANopenInit+0x2e>
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 800491c:	4b45      	ldr	r3, [pc, #276]	; (8004a34 <CO_CANopenInit+0x198>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	9708      	str	r7, [sp, #32]
 8004926:	f506 62e0 	add.w	r2, r6, #1792	; 0x700
 800492a:	9207      	str	r2, [sp, #28]
 800492c:	2207      	movs	r2, #7
 800492e:	9206      	str	r2, [sp, #24]
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	2200      	movs	r2, #0
 8004934:	9204      	str	r2, [sp, #16]
 8004936:	9203      	str	r2, [sp, #12]
 8004938:	9302      	str	r3, [sp, #8]
 800493a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	4633      	mov	r3, r6
 8004948:	462a      	mov	r2, r5
 800494a:	3190      	adds	r1, #144	; 0x90
 800494c:	6920      	ldr	r0, [r4, #16]
 800494e:	f7fc ff4f 	bl	80017f0 <CO_NMT_init>
        if (err) return err;
 8004952:	4603      	mov	r3, r0
 8004954:	2800      	cmp	r0, #0
 8004956:	d1d8      	bne.n	800490a <CO_CANopenInit+0x6e>
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8004958:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <CO_CANopenInit+0x198>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 800495e:	9703      	str	r7, [sp, #12]
 8004960:	2308      	movs	r3, #8
 8004962:	9302      	str	r3, [sp, #8]
 8004964:	6861      	ldr	r1, [r4, #4]
 8004966:	9101      	str	r1, [sp, #4]
 8004968:	3284      	adds	r2, #132	; 0x84
 800496a:	9200      	str	r2, [sp, #0]
 800496c:	69a2      	ldr	r2, [r4, #24]
 800496e:	4629      	mov	r1, r5
 8004970:	6960      	ldr	r0, [r4, #20]
 8004972:	f7fc fdfd 	bl	8001570 <CO_HBconsumer_init>
        if (err) return err;
 8004976:	4603      	mov	r3, r0
 8004978:	2800      	cmp	r0, #0
 800497a:	d1c6      	bne.n	800490a <CO_CANopenInit+0x6e>
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800497c:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <CO_CANopenInit+0x198>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	32b4      	adds	r2, #180	; 0xb4
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8004984:	2800      	cmp	r0, #0
 8004986:	dd26      	ble.n	80049d6 <CO_CANopenInit+0x13a>
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <CO_CANopenInit+0x198>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
        err = CO_TIME_init(co->TIME,
 800498e:	9700      	str	r7, [sp, #0]
 8004990:	2302      	movs	r3, #2
 8004992:	6862      	ldr	r2, [r4, #4]
 8004994:	3160      	adds	r1, #96	; 0x60
 8004996:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004998:	f7ff faae 	bl	8003ef8 <CO_TIME_init>
        if (err) return err;
 800499c:	4603      	mov	r3, r0
 800499e:	2800      	cmp	r0, #0
 80049a0:	d1b3      	bne.n	800490a <CO_CANopenInit+0x6e>
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <CO_CANopenInit+0x198>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	9706      	str	r7, [sp, #24]
 80049ac:	2100      	movs	r1, #0
 80049ae:	9105      	str	r1, [sp, #20]
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	2101      	movs	r1, #1
 80049b4:	9103      	str	r1, [sp, #12]
 80049b6:	9302      	str	r3, [sp, #8]
 80049b8:	f102 03a8 	add.w	r3, r2, #168	; 0xa8
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80049c8:	3224      	adds	r2, #36	; 0x24
 80049ca:	4629      	mov	r1, r5
 80049cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80049ce:	f7ff f8c7 	bl	8003b60 <CO_SYNC_init>
 80049d2:	4603      	mov	r3, r0
        if (err) return err;
 80049d4:	e799      	b.n	800490a <CO_CANopenInit+0x6e>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80049d6:	f102 0b0c 	add.w	fp, r2, #12
 80049da:	6861      	ldr	r1, [r4, #4]
 80049dc:	fa1f fa80 	uxth.w	sl, r0
 80049e0:	9705      	str	r7, [sp, #20]
 80049e2:	f10a 0306 	add.w	r3, sl, #6
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	9304      	str	r3, [sp, #16]
 80049ea:	9103      	str	r1, [sp, #12]
 80049ec:	f10a 0307 	add.w	r3, sl, #7
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	9302      	str	r3, [sp, #8]
 80049f4:	9101      	str	r1, [sp, #4]
 80049f6:	f8cd 9000 	str.w	r9, [sp]
 80049fa:	4633      	mov	r3, r6
 80049fc:	4641      	mov	r1, r8
 80049fe:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
 8004a02:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8004a06:	fb0c e000 	mla	r0, ip, r0, lr
 8004a0a:	f7fe fbbd 	bl	8003188 <CO_SDOserver_init>
            if (err) return err;
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f47f af7a 	bne.w	800490a <CO_CANopenInit+0x6e>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8004a16:	f10a 0001 	add.w	r0, sl, #1
 8004a1a:	b200      	sxth	r0, r0
            err = CO_SDOserver_init(&co->SDOserver[i],
 8004a1c:	465a      	mov	r2, fp
 8004a1e:	e7b1      	b.n	8004984 <CO_CANopenInit+0xe8>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295
 8004a24:	e771      	b.n	800490a <CO_CANopenInit+0x6e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	e76e      	b.n	800490a <CO_CANopenInit+0x6e>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8004a2c:	f06f 0312 	mvn.w	r3, #18
 8004a30:	e76b      	b.n	800490a <CO_CANopenInit+0x6e>
 8004a32:	bf00      	nop
 8004a34:	20000028 	.word	0x20000028

08004a38 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    if (co == NULL) {
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d07a      	beq.n	8004b3c <CO_CANopenInitPDO+0x104>
 8004a46:	460f      	mov	r7, r1
 8004a48:	4690      	mov	r8, r2
 8004a4a:	461e      	mov	r6, r3
 8004a4c:	4604      	mov	r4, r0
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8004a4e:	b25b      	sxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	dd33      	ble.n	8004abc <CO_CANopenInitPDO+0x84>
 8004a54:	6803      	ldr	r3, [r0, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d130      	bne.n	8004abc <CO_CANopenInitPDO+0x84>
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <CO_CANopenInitPDO+0x10c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	f102 0ccc 	add.w	ip, r2, #204	; 0xcc
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8004a64:	32fc      	adds	r2, #252	; 0xfc
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8004a66:	2000      	movs	r0, #0
 8004a68:	2803      	cmp	r0, #3
 8004a6a:	dc2f      	bgt.n	8004acc <CO_CANopenInitPDO+0x94>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8004a6c:	1c83      	adds	r3, r0, #2
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4433      	add	r3, r6
 8004a74:	b29b      	uxth	r3, r3
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 8004a76:	f10c 0a0c 	add.w	sl, ip, #12
 8004a7a:	f102 0b0c 	add.w	fp, r2, #12
 8004a7e:	b285      	uxth	r5, r0
 8004a80:	f8cd 9014 	str.w	r9, [sp, #20]
 8004a84:	1ce9      	adds	r1, r5, #3
 8004a86:	b289      	uxth	r1, r1
 8004a88:	9104      	str	r1, [sp, #16]
 8004a8a:	6861      	ldr	r1, [r4, #4]
 8004a8c:	9103      	str	r1, [sp, #12]
 8004a8e:	9202      	str	r2, [sp, #8]
 8004a90:	f8cd c004 	str.w	ip, [sp, #4]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a98:	463a      	mov	r2, r7
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	f44f 7cba 	mov.w	ip, #372	; 0x174
 8004aa0:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 8004aa4:	fb0c e000 	mla	r0, ip, r0, lr
 8004aa8:	f7fd fd6a 	bl	8002580 <CO_RPDO_init>
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 8004aac:	4603      	mov	r3, r0
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d140      	bne.n	8004b34 <CO_CANopenInitPDO+0xfc>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8004ab2:	1c68      	adds	r0, r5, #1
 8004ab4:	b200      	sxth	r0, r0
            err = CO_RPDO_init(&co->RPDO[i],
 8004ab6:	465a      	mov	r2, fp
 8004ab8:	46d4      	mov	ip, sl
 8004aba:	e7d5      	b.n	8004a68 <CO_CANopenInitPDO+0x30>
        return (co->nodeIdUnconfigured)
 8004abc:	6823      	ldr	r3, [r4, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8004abe:	b113      	cbz	r3, 8004ac6 <CO_CANopenInitPDO+0x8e>
 8004ac0:	f06f 0312 	mvn.w	r3, #18
 8004ac4:	e036      	b.n	8004b34 <CO_CANopenInitPDO+0xfc>
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	e033      	b.n	8004b34 <CO_CANopenInitPDO+0xfc>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <CO_CANopenInitPDO+0x10c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	f502 7c96 	add.w	ip, r2, #300	; 0x12c
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8004ad6:	f502 72ae 	add.w	r2, r2, #348	; 0x15c
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8004ada:	2000      	movs	r0, #0
 8004adc:	2803      	cmp	r0, #3
 8004ade:	dc28      	bgt.n	8004b32 <CO_CANopenInitPDO+0xfa>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8004ae0:	b285      	uxth	r5, r0
 8004ae2:	022b      	lsls	r3, r5, #8
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	4433      	add	r3, r6
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004aee:	b29b      	uxth	r3, r3
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8004af0:	f10c 0a0c 	add.w	sl, ip, #12
 8004af4:	f102 0b0c 	add.w	fp, r2, #12
 8004af8:	f8cd 9014 	str.w	r9, [sp, #20]
 8004afc:	1ca9      	adds	r1, r5, #2
 8004afe:	b289      	uxth	r1, r1
 8004b00:	9104      	str	r1, [sp, #16]
 8004b02:	6861      	ldr	r1, [r4, #4]
 8004b04:	9103      	str	r1, [sp, #12]
 8004b06:	9202      	str	r2, [sp, #8]
 8004b08:	f8cd c004 	str.w	ip, [sp, #4]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b10:	463a      	mov	r2, r7
 8004b12:	4641      	mov	r1, r8
 8004b14:	f44f 7cb6 	mov.w	ip, #364	; 0x16c
 8004b18:	f8d4 e034 	ldr.w	lr, [r4, #52]	; 0x34
 8004b1c:	fb0c e000 	mla	r0, ip, r0, lr
 8004b20:	f7fd fef8 	bl	8002914 <CO_TPDO_init>
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8004b24:	4603      	mov	r3, r0
 8004b26:	b928      	cbnz	r0, 8004b34 <CO_CANopenInitPDO+0xfc>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8004b28:	1c68      	adds	r0, r5, #1
 8004b2a:	b200      	sxth	r0, r0
            err = CO_TPDO_init(&co->TPDO[i],
 8004b2c:	465a      	mov	r2, fp
 8004b2e:	46d4      	mov	ip, sl
 8004b30:	e7d4      	b.n	8004adc <CO_CANopenInitPDO+0xa4>
        }
    }
#endif

    return CO_ERROR_NO;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	b007      	add	sp, #28
 8004b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b40:	e7f8      	b.n	8004b34 <CO_CANopenInitPDO+0xfc>
 8004b42:	bf00      	nop
 8004b44:	20000028 	.word	0x20000028

08004b48 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	b08b      	sub	sp, #44	; 0x2c
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4615      	mov	r5, r2
 8004b52:	461e      	mov	r6, r3
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8004b54:	6903      	ldr	r3, [r0, #16]
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d034      	beq.n	8004bc4 <CO_process+0x7c>
 8004b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8004b5e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8004b62:	2b7f      	cmp	r3, #127	; 0x7f
 8004b64:	d033      	beq.n	8004bce <CO_process+0x86>
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d02e      	beq.n	8004bc8 <CO_process+0x80>
 8004b6a:	f04f 0800 	mov.w	r8, #0

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8004b6e:	6860      	ldr	r0, [r4, #4]
 8004b70:	f000 ffc2 	bl	8005af8 <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8004b74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004b76:	f7ff fc91 	bl	800449c <CO_LSSslave_process>
 8004b7a:	bb58      	cbnz	r0, 8004bd4 <CO_process+0x8c>
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8004b7c:	f04f 0900 	mov.w	r9, #0
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8004b80:	6823      	ldr	r3, [r4, #0]
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8004b82:	6862      	ldr	r2, [r4, #4]
 8004b84:	8a51      	ldrh	r1, [r2, #18]
    bool_t LSSslave_configuration = false;
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8004b86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8004b88:	b33a      	cbz	r2, 8004bda <CO_process+0x92>
 8004b8a:	7c12      	ldrb	r2, [r2, #16]
    if (CO_GET_CNT(LSS_SLV) == 1
 8004b8c:	2a01      	cmp	r2, #1
 8004b8e:	d027      	beq.n	8004be0 <CO_process+0x98>
    bool_t LSSslave_configuration = false;
 8004b90:	f04f 0e00 	mov.w	lr, #0
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8004b94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b96:	bb33      	cbnz	r3, 8004be6 <CO_process+0x9e>
 8004b98:	f99d 2027 	ldrsb.w	r2, [sp, #39]	; 0x27
 8004b9c:	f3c1 0a80 	ubfx	sl, r1, #2, #1
 8004ba0:	f240 3703 	movw	r7, #771	; 0x303
 8004ba4:	4239      	tst	r1, r7
 8004ba6:	bf14      	ite	ne
 8004ba8:	f04f 0b01 	movne.w	fp, #1
 8004bac:	f04f 0b00 	moveq.w	fp, #0
 8004bb0:	bb0b      	cbnz	r3, 8004bf6 <CO_process+0xae>
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8004bb2:	69e1      	ldr	r1, [r4, #28]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8004bb4:	b1c9      	cbz	r1, 8004bea <CO_process+0xa2>
 8004bb6:	78c9      	ldrb	r1, [r1, #3]
 8004bb8:	f011 0f01 	tst.w	r1, #1
 8004bbc:	d018      	beq.n	8004bf0 <CO_process+0xa8>
 8004bbe:	f04f 0c01 	mov.w	ip, #1
 8004bc2:	e01a      	b.n	8004bfa <CO_process+0xb2>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e7ca      	b.n	8004b5e <CO_process+0x16>
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8004bc8:	f04f 0801 	mov.w	r8, #1
 8004bcc:	e7cf      	b.n	8004b6e <CO_process+0x26>
 8004bce:	f04f 0801 	mov.w	r8, #1
 8004bd2:	e7cc      	b.n	8004b6e <CO_process+0x26>
            reset = CO_RESET_COMM;
 8004bd4:	f04f 0901 	mov.w	r9, #1
 8004bd8:	e7d2      	b.n	8004b80 <CO_process+0x38>
    bool_t LSSslave_configuration = false;
 8004bda:	f04f 0e00 	mov.w	lr, #0
 8004bde:	e7d9      	b.n	8004b94 <CO_process+0x4c>
        LSSslave_configuration = true;
 8004be0:	f04f 0e01 	mov.w	lr, #1
 8004be4:	e7d6      	b.n	8004b94 <CO_process+0x4c>
        CO_LEDs_process(co->LEDs,
 8004be6:	2200      	movs	r2, #0
 8004be8:	e7d8      	b.n	8004b9c <CO_process+0x54>
 8004bea:	f04f 0c01 	mov.w	ip, #1
 8004bee:	e004      	b.n	8004bfa <CO_process+0xb2>
 8004bf0:	f04f 0c00 	mov.w	ip, #0
 8004bf4:	e001      	b.n	8004bfa <CO_process+0xb2>
 8004bf6:	f04f 0c00 	mov.w	ip, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8004bfa:	b953      	cbnz	r3, 8004c12 <CO_process+0xca>
 8004bfc:	69e3      	ldr	r3, [r4, #28]
 8004bfe:	b33b      	cbz	r3, 8004c50 <CO_process+0x108>
 8004c00:	78db      	ldrb	r3, [r3, #3]
 8004c02:	f013 0f08 	tst.w	r3, #8
 8004c06:	d125      	bne.n	8004c54 <CO_process+0x10c>
 8004c08:	f013 0f10 	tst.w	r3, #16
 8004c0c:	d124      	bne.n	8004c58 <CO_process+0x110>
 8004c0e:	2100      	movs	r1, #0
 8004c10:	e000      	b.n	8004c14 <CO_process+0xcc>
 8004c12:	2100      	movs	r1, #0
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
            CO_getErrorRegister(co->em) != 0,
 8004c14:	69e3      	ldr	r3, [r4, #28]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8004c16:	b30b      	cbz	r3, 8004c5c <CO_process+0x114>
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	b30b      	cbz	r3, 8004c60 <CO_process+0x118>
 8004c1c:	781f      	ldrb	r7, [r3, #0]
        CO_LEDs_process(co->LEDs,
 8004c1e:	9607      	str	r6, [sp, #28]
 8004c20:	2300      	movs	r3, #0
 8004c22:	9306      	str	r3, [sp, #24]
 8004c24:	1aff      	subs	r7, r7, r3
 8004c26:	bf18      	it	ne
 8004c28:	2701      	movne	r7, #1
 8004c2a:	9705      	str	r7, [sp, #20]
 8004c2c:	9104      	str	r1, [sp, #16]
 8004c2e:	f8cd c00c 	str.w	ip, [sp, #12]
 8004c32:	9302      	str	r3, [sp, #8]
 8004c34:	f8cd b004 	str.w	fp, [sp, #4]
 8004c38:	f8cd a000 	str.w	sl, [sp]
 8004c3c:	4673      	mov	r3, lr
 8004c3e:	4629      	mov	r1, r5
 8004c40:	f7ff f9ea 	bl	8004018 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	b16b      	cbz	r3, 8004c64 <CO_process+0x11c>
                        timerNext_us);
    }
#endif

    return reset;
}
 8004c48:	4648      	mov	r0, r9
 8004c4a:	b00b      	add	sp, #44	; 0x2c
 8004c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8004c50:	2101      	movs	r1, #1
 8004c52:	e7df      	b.n	8004c14 <CO_process+0xcc>
 8004c54:	2101      	movs	r1, #1
 8004c56:	e7dd      	b.n	8004c14 <CO_process+0xcc>
 8004c58:	2101      	movs	r1, #1
 8004c5a:	e7db      	b.n	8004c14 <CO_process+0xcc>
 8004c5c:	2700      	movs	r7, #0
 8004c5e:	e7de      	b.n	8004c1e <CO_process+0xd6>
 8004c60:	2700      	movs	r7, #0
 8004c62:	e7dc      	b.n	8004c1e <CO_process+0xd6>
        CO_EM_process(co->em,
 8004c64:	4633      	mov	r3, r6
 8004c66:	462a      	mov	r2, r5
 8004c68:	4641      	mov	r1, r8
 8004c6a:	69e0      	ldr	r0, [r4, #28]
 8004c6c:	f7fc fb1d 	bl	80012aa <CO_EM_process>
        reset = CO_NMT_process(co->NMT,
 8004c70:	4633      	mov	r3, r6
 8004c72:	462a      	mov	r2, r5
 8004c74:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8004c78:	6920      	ldr	r0, [r4, #16]
 8004c7a:	f7fc fe43 	bl	8001904 <CO_NMT_process>
 8004c7e:	4681      	mov	r9, r0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8004c80:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
                             || NMTstate == CO_NMT_OPERATIONAL);
 8004c84:	2b7f      	cmp	r3, #127	; 0x7f
 8004c86:	d014      	beq.n	8004cb2 <CO_process+0x16a>
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	d00f      	beq.n	8004cac <CO_process+0x164>
 8004c8c:	f04f 0800 	mov.w	r8, #0
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8004c90:	2700      	movs	r7, #0
 8004c92:	b18f      	cbz	r7, 8004cb8 <CO_process+0x170>
        CO_HBconsumer_process(co->HBcons,
 8004c94:	4633      	mov	r3, r6
 8004c96:	462a      	mov	r2, r5
 8004c98:	4641      	mov	r1, r8
 8004c9a:	6960      	ldr	r0, [r4, #20]
 8004c9c:	f7fc fce0 	bl	8001660 <CO_HBconsumer_process>
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8004ca0:	462a      	mov	r2, r5
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ca6:	f7ff f977 	bl	8003f98 <CO_TIME_process>
    return reset;
 8004caa:	e7cd      	b.n	8004c48 <CO_process+0x100>
                             || NMTstate == CO_NMT_OPERATIONAL);
 8004cac:	f04f 0801 	mov.w	r8, #1
 8004cb0:	e7ee      	b.n	8004c90 <CO_process+0x148>
 8004cb2:	f04f 0801 	mov.w	r8, #1
 8004cb6:	e7eb      	b.n	8004c90 <CO_process+0x148>
        CO_SDOserver_process(&co->SDOserver[i],
 8004cb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cba:	4633      	mov	r3, r6
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
 8004cc4:	fb0c 0007 	mla	r0, ip, r7, r0
 8004cc8:	f7fe fb2c 	bl	8003324 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8004ccc:	3701      	adds	r7, #1
 8004cce:	b2ff      	uxtb	r7, r7
 8004cd0:	e7df      	b.n	8004c92 <CO_process+0x14a>

08004cd2 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 8004cd2:	b538      	push	{r3, r4, r5, lr}
    bool_t syncWas = false;

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8004cd4:	6805      	ldr	r5, [r0, #0]
 8004cd6:	b9ed      	cbnz	r5, 8004d14 <CO_process_SYNC+0x42>
 8004cd8:	4604      	mov	r4, r0
 8004cda:	4613      	mov	r3, r2
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8004cdc:	6902      	ldr	r2, [r0, #16]
 8004cde:	b19a      	cbz	r2, 8004d08 <CO_process_SYNC+0x36>
 8004ce0:	f992 2000 	ldrsb.w	r2, [r2]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8004ce4:	2a7f      	cmp	r2, #127	; 0x7f
 8004ce6:	d013      	beq.n	8004d10 <CO_process_SYNC+0x3e>
 8004ce8:	2a05      	cmp	r2, #5
 8004cea:	d00f      	beq.n	8004d0c <CO_process_SYNC+0x3a>
 8004cec:	2000      	movs	r0, #0

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8004cee:	460a      	mov	r2, r1
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004cf4:	f7ff f81c 	bl	8003d30 <CO_SYNC_process>
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8004cf8:	2801      	cmp	r0, #1
 8004cfa:	d00e      	beq.n	8004d1a <CO_process_SYNC+0x48>
 8004cfc:	2802      	cmp	r0, #2
 8004cfe:	d10a      	bne.n	8004d16 <CO_process_SYNC+0x44>
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
                break;
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 8004d00:	6860      	ldr	r0, [r4, #4]
 8004d02:	f000 fec9 	bl	8005a98 <CO_CANclearPendingSyncPDOs>
                break;
 8004d06:	e006      	b.n	8004d16 <CO_process_SYNC+0x44>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	e7ed      	b.n	8004ce8 <CO_process_SYNC+0x16>
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	e7ee      	b.n	8004cee <CO_process_SYNC+0x1c>
 8004d10:	2001      	movs	r0, #1
 8004d12:	e7ec      	b.n	8004cee <CO_process_SYNC+0x1c>
    bool_t syncWas = false;
 8004d14:	2500      	movs	r5, #0
        }
    }

    return syncWas;
}
 8004d16:	4628      	mov	r0, r5
 8004d18:	bd38      	pop	{r3, r4, r5, pc}
                syncWas = true;
 8004d1a:	2501      	movs	r5, #1
    return syncWas;
 8004d1c:	e7fb      	b.n	8004d16 <CO_process_SYNC+0x44>

08004d1e <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8004d1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d22:	b083      	sub	sp, #12
 8004d24:	4698      	mov	r8, r3
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8004d26:	6803      	ldr	r3, [r0, #0]
 8004d28:	bb0b      	cbnz	r3, 8004d6e <CO_process_RPDO+0x50>
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	460e      	mov	r6, r1
 8004d2e:	4617      	mov	r7, r2
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8004d30:	6903      	ldr	r3, [r0, #16]
 8004d32:	b153      	cbz	r3, 8004d4a <CO_process_RPDO+0x2c>
 8004d34:	f993 9000 	ldrsb.w	r9, [r3]
 8004d38:	f1b9 0f05 	cmp.w	r9, #5
 8004d3c:	bf14      	ite	ne
 8004d3e:	f04f 0900 	movne.w	r9, #0
 8004d42:	f04f 0901 	moveq.w	r9, #1

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8004d46:	2400      	movs	r4, #0
 8004d48:	e00f      	b.n	8004d6a <CO_process_RPDO+0x4c>
 8004d4a:	f04f 0900 	mov.w	r9, #0
 8004d4e:	e7f3      	b.n	8004d38 <CO_process_RPDO+0x1a>
        CO_RPDO_process(&co->RPDO[i],
 8004d50:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004d52:	9600      	str	r6, [sp, #0]
 8004d54:	464b      	mov	r3, r9
 8004d56:	4642      	mov	r2, r8
 8004d58:	4639      	mov	r1, r7
 8004d5a:	f44f 7cba 	mov.w	ip, #372	; 0x174
 8004d5e:	fb0c 0004 	mla	r0, ip, r4, r0
 8004d62:	f7fd fd19 	bl	8002798 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8004d66:	3401      	adds	r4, #1
 8004d68:	b224      	sxth	r4, r4
 8004d6a:	2c03      	cmp	r4, #3
 8004d6c:	ddf0      	ble.n	8004d50 <CO_process_RPDO+0x32>
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8004d6e:	b003      	add	sp, #12
 8004d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004d74 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8004d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	4698      	mov	r8, r3
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8004d7c:	6803      	ldr	r3, [r0, #0]
 8004d7e:	bb0b      	cbnz	r3, 8004dc4 <CO_process_TPDO+0x50>
 8004d80:	4605      	mov	r5, r0
 8004d82:	460e      	mov	r6, r1
 8004d84:	4617      	mov	r7, r2
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8004d86:	6903      	ldr	r3, [r0, #16]
 8004d88:	b153      	cbz	r3, 8004da0 <CO_process_TPDO+0x2c>
 8004d8a:	f993 9000 	ldrsb.w	r9, [r3]
 8004d8e:	f1b9 0f05 	cmp.w	r9, #5
 8004d92:	bf14      	ite	ne
 8004d94:	f04f 0900 	movne.w	r9, #0
 8004d98:	f04f 0901 	moveq.w	r9, #1

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8004d9c:	2400      	movs	r4, #0
 8004d9e:	e00f      	b.n	8004dc0 <CO_process_TPDO+0x4c>
 8004da0:	f04f 0900 	mov.w	r9, #0
 8004da4:	e7f3      	b.n	8004d8e <CO_process_TPDO+0x1a>
        CO_TPDO_process(&co->TPDO[i],
 8004da6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004da8:	9600      	str	r6, [sp, #0]
 8004daa:	464b      	mov	r3, r9
 8004dac:	4642      	mov	r2, r8
 8004dae:	4639      	mov	r1, r7
 8004db0:	f44f 7cb6 	mov.w	ip, #364	; 0x16c
 8004db4:	fb0c 0004 	mla	r0, ip, r4, r0
 8004db8:	f7fd feec 	bl	8002b94 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8004dbc:	3401      	adds	r4, #1
 8004dbe:	b224      	sxth	r4, r4
 8004dc0:	2c03      	cmp	r4, #3
 8004dc2:	ddf0      	ble.n	8004da6 <CO_process_TPDO+0x32>
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8004dc4:	b003      	add	sp, #12
 8004dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004dca <CO_eeprom_init>:
uint8_t I2C1_DEVICE_ADDRESS = 0x50 << 1;

bool_t CO_eeprom_init(void *storageModule){
	return 1;

}
 8004dca:	2001      	movs	r0, #1
 8004dcc:	4770      	bx	lr
	...

08004dd0 <CO_eeprom_getAddr>:

size_t CO_eeprom_getAddr(void *storageModule, bool_t isAuto,
                         size_t len, bool_t *overflow){

	size_t address;
	address = eepromAddrNextAuto;
 8004dd0:	4904      	ldr	r1, [pc, #16]	; (8004de4 <CO_eeprom_getAddr+0x14>)
 8004dd2:	6808      	ldr	r0, [r1, #0]
	eepromAddrNextAuto += len;
 8004dd4:	4402      	add	r2, r0
 8004dd6:	600a      	str	r2, [r1, #0]
	if(eepromAddrNextAuto > EEPROM_CAPACITY){
 8004dd8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004ddc:	d901      	bls.n	8004de2 <CO_eeprom_getAddr+0x12>
		*overflow = true;
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
	}

	return address;
}
 8004de2:	4770      	bx	lr
 8004de4:	20000514 	.word	0x20000514

08004de8 <CO_eeprom_readBlock>:

void CO_eeprom_readBlock(void *storageModule, uint8_t *data, size_t eepromAddr, size_t len) {
 8004de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	460f      	mov	r7, r1
 8004df0:	4615      	mov	r5, r2
 8004df2:	461e      	mov	r6, r3

    // Оставшиеся байты для чтения
    uint16_t bytesReadLeft = EEPROM_PAGE_SIZE;

    // Адрес в массиве
    uint16_t bytesRemaining = 0;
 8004df4:	f04f 0800 	mov.w	r8, #0

    // Буфер для чтения одного блока
    uint8_t buff[EEPROM_PAGE_SIZE];

    while (len > 0) {
 8004df8:	e047      	b.n	8004e8a <CO_eeprom_readBlock+0xa2>

    	// Сдвиг адреса устройства
    	if(eepromAddr >= 0 && eepromAddr < 256){
    		I2C1_DEVICE_ADDRESS = 0x50<<1;
    	}
    	else if(eepromAddr >= 256 && eepromAddr < 512){
 8004dfa:	f5a5 7380 	sub.w	r3, r5, #256	; 0x100
 8004dfe:	2bff      	cmp	r3, #255	; 0xff
 8004e00:	d803      	bhi.n	8004e0a <CO_eeprom_readBlock+0x22>
    		I2C1_DEVICE_ADDRESS = 0x51<<1;
 8004e02:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <CO_eeprom_readBlock+0xd0>)
 8004e04:	22a2      	movs	r2, #162	; 0xa2
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e045      	b.n	8004e96 <CO_eeprom_readBlock+0xae>
    	}
    	else if(eepromAddr >= 512 && eepromAddr < 768){
 8004e0a:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	d803      	bhi.n	8004e1a <CO_eeprom_readBlock+0x32>
    		I2C1_DEVICE_ADDRESS = 0x52<<1;
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <CO_eeprom_readBlock+0xd0>)
 8004e14:	22a4      	movs	r2, #164	; 0xa4
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e03d      	b.n	8004e96 <CO_eeprom_readBlock+0xae>
    	}
    	else if(eepromAddr >= 768 && eepromAddr < 1024){
 8004e1a:	f5a5 7340 	sub.w	r3, r5, #768	; 0x300
 8004e1e:	2bff      	cmp	r3, #255	; 0xff
 8004e20:	d839      	bhi.n	8004e96 <CO_eeprom_readBlock+0xae>
    		I2C1_DEVICE_ADDRESS = 0x53<<1;
 8004e22:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <CO_eeprom_readBlock+0xd0>)
 8004e24:	22a6      	movs	r2, #166	; 0xa6
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e035      	b.n	8004e96 <CO_eeprom_readBlock+0xae>

        if (eepromAddr % EEPROM_PAGE_SIZE != 0 && len > bytesReadLeft) {
            blockAddr = (eepromAddr / EEPROM_PAGE_SIZE + 1) * EEPROM_PAGE_SIZE;
            bytesReadLeft = blockAddr - eepromAddr;
        }
        else if (eepromAddr % EEPROM_PAGE_SIZE == 0 && len > bytesReadLeft) {
 8004e2a:	b90b      	cbnz	r3, 8004e30 <CO_eeprom_readBlock+0x48>
 8004e2c:	2e10      	cmp	r6, #16
 8004e2e:	d803      	bhi.n	8004e38 <CO_eeprom_readBlock+0x50>
            blockAddr = eepromAddr + EEPROM_PAGE_SIZE;
            bytesReadLeft = blockAddr - eepromAddr;
        }
        else if (len < bytesReadLeft) {
 8004e30:	2e0f      	cmp	r6, #15
 8004e32:	d803      	bhi.n	8004e3c <CO_eeprom_readBlock+0x54>
            bytesReadLeft = len;
 8004e34:	b2b4      	uxth	r4, r6
 8004e36:	e002      	b.n	8004e3e <CO_eeprom_readBlock+0x56>
            bytesReadLeft = blockAddr - eepromAddr;
 8004e38:	2410      	movs	r4, #16
 8004e3a:	e000      	b.n	8004e3e <CO_eeprom_readBlock+0x56>
 8004e3c:	2410      	movs	r4, #16
        }

        HAL_GPIO_WritePin(I2C_WP_GPIO_Port, I2C_WP_Pin, GPIO_PIN_SET);
 8004e3e:	2201      	movs	r2, #1
 8004e40:	2120      	movs	r1, #32
 8004e42:	481e      	ldr	r0, [pc, #120]	; (8004ebc <CO_eeprom_readBlock+0xd4>)
 8004e44:	f003 f82d 	bl	8007ea2 <HAL_GPIO_WritePin>
        while (HAL_I2C_IsDeviceReady(&hi2c1, I2C1_DEVICE_ADDRESS, 3, 5) != HAL_OK) {}
 8004e48:	2305      	movs	r3, #5
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	481a      	ldr	r0, [pc, #104]	; (8004eb8 <CO_eeprom_readBlock+0xd0>)
 8004e4e:	7801      	ldrb	r1, [r0, #0]
 8004e50:	481b      	ldr	r0, [pc, #108]	; (8004ec0 <CO_eeprom_readBlock+0xd8>)
 8004e52:	f003 fdf9 	bl	8008a48 <HAL_I2C_IsDeviceReady>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d1f6      	bne.n	8004e48 <CO_eeprom_readBlock+0x60>

        HAL_StatusTypeDef readstatus = HAL_I2C_Mem_Read(&hi2c1, I2C1_DEVICE_ADDRESS, eepromAddr,
 8004e5a:	2364      	movs	r3, #100	; 0x64
 8004e5c:	9302      	str	r3, [sp, #8]
 8004e5e:	9401      	str	r4, [sp, #4]
 8004e60:	ab04      	add	r3, sp, #16
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	2301      	movs	r3, #1
 8004e66:	b2aa      	uxth	r2, r5
 8004e68:	4913      	ldr	r1, [pc, #76]	; (8004eb8 <CO_eeprom_readBlock+0xd0>)
 8004e6a:	7809      	ldrb	r1, [r1, #0]
 8004e6c:	4814      	ldr	r0, [pc, #80]	; (8004ec0 <CO_eeprom_readBlock+0xd8>)
 8004e6e:	f003 fc47 	bl	8008700 <HAL_I2C_Mem_Read>
                                                        I2C_MEMADD_SIZE_8BIT, buff, bytesReadLeft, 100);
        if (readstatus != HAL_OK) {
 8004e72:	b9e8      	cbnz	r0, 8004eb0 <CO_eeprom_readBlock+0xc8>
            break;
        }

        memcpy(&data[bytesRemaining], buff, bytesReadLeft);
 8004e74:	4622      	mov	r2, r4
 8004e76:	a904      	add	r1, sp, #16
 8004e78:	eb07 0008 	add.w	r0, r7, r8
 8004e7c:	f005 f98a 	bl	800a194 <memcpy>

        len -= bytesReadLeft;
 8004e80:	1b36      	subs	r6, r6, r4
        eepromAddr += bytesReadLeft;
 8004e82:	4425      	add	r5, r4
        bytesRemaining += bytesReadLeft;
 8004e84:	4444      	add	r4, r8
 8004e86:	fa1f f884 	uxth.w	r8, r4
    while (len > 0) {
 8004e8a:	b18e      	cbz	r6, 8004eb0 <CO_eeprom_readBlock+0xc8>
    	if(eepromAddr >= 0 && eepromAddr < 256){
 8004e8c:	2dff      	cmp	r5, #255	; 0xff
 8004e8e:	d8b4      	bhi.n	8004dfa <CO_eeprom_readBlock+0x12>
    		I2C1_DEVICE_ADDRESS = 0x50<<1;
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <CO_eeprom_readBlock+0xd0>)
 8004e92:	22a0      	movs	r2, #160	; 0xa0
 8004e94:	701a      	strb	r2, [r3, #0]
        if (eepromAddr % EEPROM_PAGE_SIZE != 0 && len > bytesReadLeft) {
 8004e96:	f015 030f 	ands.w	r3, r5, #15
 8004e9a:	d0c6      	beq.n	8004e2a <CO_eeprom_readBlock+0x42>
 8004e9c:	2e10      	cmp	r6, #16
 8004e9e:	d9c4      	bls.n	8004e2a <CO_eeprom_readBlock+0x42>
            blockAddr = (eepromAddr / EEPROM_PAGE_SIZE + 1) * EEPROM_PAGE_SIZE;
 8004ea0:	092c      	lsrs	r4, r5, #4
 8004ea2:	3401      	adds	r4, #1
 8004ea4:	0124      	lsls	r4, r4, #4
 8004ea6:	b2a4      	uxth	r4, r4
            bytesReadLeft = blockAddr - eepromAddr;
 8004ea8:	b2a8      	uxth	r0, r5
 8004eaa:	1a20      	subs	r0, r4, r0
 8004eac:	b284      	uxth	r4, r0
 8004eae:	e7c6      	b.n	8004e3e <CO_eeprom_readBlock+0x56>
        bytesReadLeft = EEPROM_PAGE_SIZE;
    }
}
 8004eb0:	b008      	add	sp, #32
 8004eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	40010c00 	.word	0x40010c00
 8004ec0:	20000664 	.word	0x20000664

08004ec4 <CO_eeprom_writeBlock>:

bool_t CO_eeprom_writeBlock(void *storageModule, uint8_t *data,
                            size_t eepromAddr, size_t len){
 8004ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec8:	b08b      	sub	sp, #44	; 0x2c
 8004eca:	9105      	str	r1, [sp, #20]
 8004ecc:	4615      	mov	r5, r2
 8004ece:	461e      	mov	r6, r3
	uint16_t bytes_remaining = 0;

	// Буфер для записи одной страницы
	uint8_t buff[16];

	for(uint8_t i = 0; i<16; i++){
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e007      	b.n	8004ee4 <CO_eeprom_writeBlock+0x20>
		buff[i] = 0;
 8004ed4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004ed8:	446a      	add	r2, sp
 8004eda:	2100      	movs	r1, #0
 8004edc:	f802 1c10 	strb.w	r1, [r2, #-16]
	for(uint8_t i = 0; i<16; i++){
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b0f      	cmp	r3, #15
 8004ee6:	d9f5      	bls.n	8004ed4 <CO_eeprom_writeBlock+0x10>
	uint16_t bytes_remaining = 0;
 8004ee8:	2700      	movs	r7, #0
	uint16_t bytesLeft = 16;
 8004eea:	2410      	movs	r4, #16
 8004eec:	e065      	b.n	8004fba <CO_eeprom_writeBlock+0xf6>

		// Сдвиг адреса устройства
		if(eepromAddr >= 0 && eepromAddr < 256){
			I2C1_DEVICE_ADDRESS = 0x50<<1;
		}
		else if(eepromAddr >= 256 && eepromAddr < 512){
 8004eee:	f5a5 7380 	sub.w	r3, r5, #256	; 0x100
 8004ef2:	2bff      	cmp	r3, #255	; 0xff
 8004ef4:	d803      	bhi.n	8004efe <CO_eeprom_writeBlock+0x3a>
			I2C1_DEVICE_ADDRESS = 0x51<<1;
 8004ef6:	4b40      	ldr	r3, [pc, #256]	; (8004ff8 <CO_eeprom_writeBlock+0x134>)
 8004ef8:	22a2      	movs	r2, #162	; 0xa2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e063      	b.n	8004fc6 <CO_eeprom_writeBlock+0x102>
		}
		else if(eepromAddr >= 512 && eepromAddr < 768){
 8004efe:	f5a5 7300 	sub.w	r3, r5, #512	; 0x200
 8004f02:	2bff      	cmp	r3, #255	; 0xff
 8004f04:	d803      	bhi.n	8004f0e <CO_eeprom_writeBlock+0x4a>
			I2C1_DEVICE_ADDRESS = 0x52<<1;
 8004f06:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <CO_eeprom_writeBlock+0x134>)
 8004f08:	22a4      	movs	r2, #164	; 0xa4
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e05b      	b.n	8004fc6 <CO_eeprom_writeBlock+0x102>
		}
		else if(eepromAddr >= 768 && eepromAddr < 1024){
 8004f0e:	f5a5 7340 	sub.w	r3, r5, #768	; 0x300
 8004f12:	2bff      	cmp	r3, #255	; 0xff
 8004f14:	d857      	bhi.n	8004fc6 <CO_eeprom_writeBlock+0x102>
			I2C1_DEVICE_ADDRESS = 0x53<<1;
 8004f16:	4b38      	ldr	r3, [pc, #224]	; (8004ff8 <CO_eeprom_writeBlock+0x134>)
 8004f18:	22a6      	movs	r2, #166	; 0xa6
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e053      	b.n	8004fc6 <CO_eeprom_writeBlock+0x102>
		if (eepromAddr % EEPROM_PAGE_SIZE != 0 && len > bytesLeft){
			pageadr = (eepromAddr / EEPROM_PAGE_SIZE + 1) * EEPROM_PAGE_SIZE;
			bytesLeft = pageadr - eepromAddr;

		}
		else if (eepromAddr % EEPROM_PAGE_SIZE == 0 && len > EEPROM_PAGE_SIZE){
 8004f1e:	b90b      	cbnz	r3, 8004f24 <CO_eeprom_writeBlock+0x60>
 8004f20:	2e10      	cmp	r6, #16
 8004f22:	d85d      	bhi.n	8004fe0 <CO_eeprom_writeBlock+0x11c>
			pageadr = eepromAddr + EEPROM_PAGE_SIZE;
			bytesLeft = pageadr - eepromAddr;
		}
		else if (len < bytesLeft ){
 8004f24:	42b4      	cmp	r4, r6
 8004f26:	d900      	bls.n	8004f2a <CO_eeprom_writeBlock+0x66>
			bytesLeft = len;
 8004f28:	b2b4      	uxth	r4, r6
		}

		memcpy(&buff, &data[bytes_remaining], bytesLeft);
 8004f2a:	9b05      	ldr	r3, [sp, #20]
 8004f2c:	eb03 0b07 	add.w	fp, r3, r7
 8004f30:	46a1      	mov	r9, r4
 8004f32:	f10d 0818 	add.w	r8, sp, #24
 8004f36:	4622      	mov	r2, r4
 8004f38:	4659      	mov	r1, fp
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f005 f92a 	bl	800a194 <memcpy>

		HAL_GPIO_WritePin(I2C_WP_GPIO_Port, I2C_WP_Pin, GPIO_PIN_RESET);
 8004f40:	2200      	movs	r2, #0
 8004f42:	2120      	movs	r1, #32
 8004f44:	482d      	ldr	r0, [pc, #180]	; (8004ffc <CO_eeprom_writeBlock+0x138>)
 8004f46:	f002 ffac 	bl	8007ea2 <HAL_GPIO_WritePin>
		HAL_StatusTypeDef writestatus = HAL_I2C_Mem_Write(&hi2c1, I2C1_DEVICE_ADDRESS, eepromAddr, I2C_MEMADD_SIZE_8BIT, buff,
 8004f4a:	fa1f fa85 	uxth.w	sl, r5
 8004f4e:	2364      	movs	r3, #100	; 0x64
 8004f50:	9302      	str	r3, [sp, #8]
 8004f52:	9401      	str	r4, [sp, #4]
 8004f54:	f8cd 8000 	str.w	r8, [sp]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4652      	mov	r2, sl
 8004f5c:	4926      	ldr	r1, [pc, #152]	; (8004ff8 <CO_eeprom_writeBlock+0x134>)
 8004f5e:	7809      	ldrb	r1, [r1, #0]
 8004f60:	4827      	ldr	r0, [pc, #156]	; (8005000 <CO_eeprom_writeBlock+0x13c>)
 8004f62:	f003 fb1b 	bl	800859c <HAL_I2C_Mem_Write>
 8004f66:	4680      	mov	r8, r0
				bytesLeft, 100);
		while (HAL_I2C_IsDeviceReady(&hi2c1, I2C1_DEVICE_ADDRESS, 3, 5)!= HAL_OK){}
 8004f68:	2305      	movs	r3, #5
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	4922      	ldr	r1, [pc, #136]	; (8004ff8 <CO_eeprom_writeBlock+0x134>)
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4823      	ldr	r0, [pc, #140]	; (8005000 <CO_eeprom_writeBlock+0x13c>)
 8004f72:	f003 fd69 	bl	8008a48 <HAL_I2C_IsDeviceReady>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d1f6      	bne.n	8004f68 <CO_eeprom_writeBlock+0xa4>
        if (writestatus != HAL_OK) {
 8004f7a:	f1b8 0f00 	cmp.w	r8, #0
 8004f7e:	d135      	bne.n	8004fec <CO_eeprom_writeBlock+0x128>
        	return 0;
        }


		// Проверка на корректность записанных данных
		HAL_GPIO_WritePin(I2C_WP_GPIO_Port, I2C_WP_Pin, GPIO_PIN_SET);
 8004f80:	2201      	movs	r2, #1
 8004f82:	2120      	movs	r1, #32
 8004f84:	481d      	ldr	r0, [pc, #116]	; (8004ffc <CO_eeprom_writeBlock+0x138>)
 8004f86:	f002 ff8c 	bl	8007ea2 <HAL_GPIO_WritePin>
		HAL_StatusTypeDef readstatus = HAL_I2C_Mem_Read(&hi2c1, I2C1_DEVICE_ADDRESS, eepromAddr, I2C_MEMADD_SIZE_8BIT, buff,
 8004f8a:	2364      	movs	r3, #100	; 0x64
 8004f8c:	9302      	str	r3, [sp, #8]
 8004f8e:	9401      	str	r4, [sp, #4]
 8004f90:	ab06      	add	r3, sp, #24
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2301      	movs	r3, #1
 8004f96:	4652      	mov	r2, sl
 8004f98:	4917      	ldr	r1, [pc, #92]	; (8004ff8 <CO_eeprom_writeBlock+0x134>)
 8004f9a:	7809      	ldrb	r1, [r1, #0]
 8004f9c:	4818      	ldr	r0, [pc, #96]	; (8005000 <CO_eeprom_writeBlock+0x13c>)
 8004f9e:	f003 fbaf 	bl	8008700 <HAL_I2C_Mem_Read>
				bytesLeft, 100);
        if (readstatus != HAL_OK) {
 8004fa2:	bb28      	cbnz	r0, 8004ff0 <CO_eeprom_writeBlock+0x12c>
        	return 0;
        }
		if(memcmp(&data[bytes_remaining], buff, bytesLeft) != 0){
 8004fa4:	464a      	mov	r2, r9
 8004fa6:	a906      	add	r1, sp, #24
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f005 f8e3 	bl	800a174 <memcmp>
 8004fae:	bb08      	cbnz	r0, 8004ff4 <CO_eeprom_writeBlock+0x130>
			return 0;
		}

		len-=bytesLeft;
 8004fb0:	eba6 0609 	sub.w	r6, r6, r9
		eepromAddr+=bytesLeft;
 8004fb4:	444d      	add	r5, r9
		bytes_remaining += bytesLeft;
 8004fb6:	4427      	add	r7, r4
 8004fb8:	b2bf      	uxth	r7, r7
	while(len > 0){
 8004fba:	b19e      	cbz	r6, 8004fe4 <CO_eeprom_writeBlock+0x120>
		if(eepromAddr >= 0 && eepromAddr < 256){
 8004fbc:	2dff      	cmp	r5, #255	; 0xff
 8004fbe:	d896      	bhi.n	8004eee <CO_eeprom_writeBlock+0x2a>
			I2C1_DEVICE_ADDRESS = 0x50<<1;
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <CO_eeprom_writeBlock+0x134>)
 8004fc2:	22a0      	movs	r2, #160	; 0xa0
 8004fc4:	701a      	strb	r2, [r3, #0]
		if (eepromAddr % EEPROM_PAGE_SIZE != 0 && len > bytesLeft){
 8004fc6:	f015 030f 	ands.w	r3, r5, #15
 8004fca:	d0a8      	beq.n	8004f1e <CO_eeprom_writeBlock+0x5a>
 8004fcc:	42b4      	cmp	r4, r6
 8004fce:	d2a6      	bcs.n	8004f1e <CO_eeprom_writeBlock+0x5a>
			pageadr = (eepromAddr / EEPROM_PAGE_SIZE + 1) * EEPROM_PAGE_SIZE;
 8004fd0:	092c      	lsrs	r4, r5, #4
 8004fd2:	3401      	adds	r4, #1
 8004fd4:	0124      	lsls	r4, r4, #4
 8004fd6:	b2a4      	uxth	r4, r4
			bytesLeft = pageadr - eepromAddr;
 8004fd8:	b2ab      	uxth	r3, r5
 8004fda:	1ae4      	subs	r4, r4, r3
 8004fdc:	b2a4      	uxth	r4, r4
 8004fde:	e7a4      	b.n	8004f2a <CO_eeprom_writeBlock+0x66>
			bytesLeft = pageadr - eepromAddr;
 8004fe0:	2410      	movs	r4, #16
 8004fe2:	e7a2      	b.n	8004f2a <CO_eeprom_writeBlock+0x66>

	}

	return 1;
 8004fe4:	2001      	movs	r0, #1
}
 8004fe6:	b00b      	add	sp, #44	; 0x2c
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	return 0;
 8004fec:	2000      	movs	r0, #0
 8004fee:	e7fa      	b.n	8004fe6 <CO_eeprom_writeBlock+0x122>
        	return 0;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e7f8      	b.n	8004fe6 <CO_eeprom_writeBlock+0x122>
			return 0;
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	e7f6      	b.n	8004fe6 <CO_eeprom_writeBlock+0x122>
 8004ff8:	20000000 	.word	0x20000000
 8004ffc:	40010c00 	.word	0x40010c00
 8005000:	20000664 	.word	0x20000664

08005004 <CO_eeprom_getCrcBlock>:

uint16_t CO_eeprom_getCrcBlock(void *storageModule,
                               size_t eepromAddr, size_t len){
	return 0;
}
 8005004:	2000      	movs	r0, #0
 8005006:	4770      	bx	lr

08005008 <OD_write_1010>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1010(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* verify arguments */
    if (stream == NULL || stream->subIndex == 0 || buf == NULL || count != 4
 800500c:	2800      	cmp	r0, #0
 800500e:	d045      	beq.n	800509c <OD_write_1010+0x94>
 8005010:	461f      	mov	r7, r3
 8005012:	4606      	mov	r6, r0
 8005014:	7c43      	ldrb	r3, [r0, #17]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d043      	beq.n	80050a2 <OD_write_1010+0x9a>
 800501a:	2900      	cmp	r1, #0
 800501c:	d044      	beq.n	80050a8 <OD_write_1010+0xa0>
 800501e:	2a04      	cmp	r2, #4
 8005020:	d145      	bne.n	80050ae <OD_write_1010+0xa6>
        || countWritten == NULL
 8005022:	2f00      	cmp	r7, #0
 8005024:	d048      	beq.n	80050b8 <OD_write_1010+0xb0>
    ) {
        return ODR_DEV_INCOMPAT;
    }

    CO_storage_t *storage = stream->object;
 8005026:	6845      	ldr	r5, [r0, #4]

    if (stream->subIndex == 0 || storage->store == NULL || !storage->enabled) {
 8005028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d047      	beq.n	80050be <OD_write_1010+0xb6>
 800502e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005030:	2b00      	cmp	r3, #0
 8005032:	d047      	beq.n	80050c4 <OD_write_1010+0xbc>
        return ODR_READONLY;
    }

    if (CO_getUint32(buf) != 0x65766173) {
 8005034:	680a      	ldr	r2, [r1, #0]
 8005036:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <OD_write_1010+0xd0>)
 8005038:	429a      	cmp	r2, r3
 800503a:	d146      	bne.n	80050ca <OD_write_1010+0xc2>

    /* loop through entries and store relevant */
    uint8_t found = 0;
    ODR_t returnCode = ODR_OK;

    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 800503c:	2400      	movs	r4, #0
    ODR_t returnCode = ODR_OK;
 800503e:	46a0      	mov	r8, r4
    uint8_t found = 0;
 8005040:	4622      	mov	r2, r4
 8005042:	e003      	b.n	800504c <OD_write_1010+0x44>

        if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
            if (found == 0) found = 1;
            if ((entry->attr & CO_storage_cmd) != 0) {
                ODR_t code = storage->store(entry, storage->CANmodule);
                if (code != ODR_OK) returnCode = code;
 8005044:	4680      	mov	r8, r0
                found = 2;
 8005046:	2202      	movs	r2, #2
    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 8005048:	3401      	adds	r4, #1
 800504a:	b2e4      	uxtb	r4, r4
 800504c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8005050:	42a3      	cmp	r3, r4
 8005052:	d917      	bls.n	8005084 <OD_write_1010+0x7c>
        CO_storage_entry_t *entry = &storage->entries[i];
 8005054:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005056:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800505a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
 800505e:	7c73      	ldrb	r3, [r6, #17]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d002      	beq.n	800506a <OD_write_1010+0x62>
 8005064:	7a01      	ldrb	r1, [r0, #8]
 8005066:	428b      	cmp	r3, r1
 8005068:	d1ee      	bne.n	8005048 <OD_write_1010+0x40>
            if (found == 0) found = 1;
 800506a:	b902      	cbnz	r2, 800506e <OD_write_1010+0x66>
 800506c:	2201      	movs	r2, #1
            if ((entry->attr & CO_storage_cmd) != 0) {
 800506e:	7a43      	ldrb	r3, [r0, #9]
 8005070:	f013 0f01 	tst.w	r3, #1
 8005074:	d0e8      	beq.n	8005048 <OD_write_1010+0x40>
                ODR_t code = storage->store(entry, storage->CANmodule);
 8005076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005078:	6a29      	ldr	r1, [r5, #32]
 800507a:	4798      	blx	r3
                if (code != ODR_OK) returnCode = code;
 800507c:	2800      	cmp	r0, #0
 800507e:	d1e1      	bne.n	8005044 <OD_write_1010+0x3c>
                found = 2;
 8005080:	2202      	movs	r2, #2
 8005082:	e7e1      	b.n	8005048 <OD_write_1010+0x40>
            }
        }
    }

    if (found != 2)
 8005084:	2a02      	cmp	r2, #2
 8005086:	d003      	beq.n	8005090 <OD_write_1010+0x88>
        returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 8005088:	bb12      	cbnz	r2, 80050d0 <OD_write_1010+0xc8>
 800508a:	f04f 080e 	mov.w	r8, #14
 800508e:	e010      	b.n	80050b2 <OD_write_1010+0xaa>

    if (returnCode == ODR_OK) *countWritten = sizeof(uint32_t);
 8005090:	f1b8 0f00 	cmp.w	r8, #0
 8005094:	d10d      	bne.n	80050b2 <OD_write_1010+0xaa>
 8005096:	2304      	movs	r3, #4
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	e00a      	b.n	80050b2 <OD_write_1010+0xaa>
        return ODR_DEV_INCOMPAT;
 800509c:	f04f 0809 	mov.w	r8, #9
 80050a0:	e007      	b.n	80050b2 <OD_write_1010+0xaa>
 80050a2:	f04f 0809 	mov.w	r8, #9
 80050a6:	e004      	b.n	80050b2 <OD_write_1010+0xaa>
 80050a8:	f04f 0809 	mov.w	r8, #9
 80050ac:	e001      	b.n	80050b2 <OD_write_1010+0xaa>
 80050ae:	f04f 0809 	mov.w	r8, #9
    return returnCode;
}
 80050b2:	4640      	mov	r0, r8
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ODR_DEV_INCOMPAT;
 80050b8:	f04f 0809 	mov.w	r8, #9
 80050bc:	e7f9      	b.n	80050b2 <OD_write_1010+0xaa>
        return ODR_READONLY;
 80050be:	f04f 0804 	mov.w	r8, #4
 80050c2:	e7f6      	b.n	80050b2 <OD_write_1010+0xaa>
 80050c4:	f04f 0804 	mov.w	r8, #4
 80050c8:	e7f3      	b.n	80050b2 <OD_write_1010+0xaa>
        return ODR_DATA_TRANSF;
 80050ca:	f04f 0815 	mov.w	r8, #21
 80050ce:	e7f0      	b.n	80050b2 <OD_write_1010+0xaa>
        returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 80050d0:	f04f 0804 	mov.w	r8, #4
 80050d4:	e7ed      	b.n	80050b2 <OD_write_1010+0xaa>
 80050d6:	bf00      	nop
 80050d8:	65766173 	.word	0x65766173

080050dc <OD_write_1011>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1011(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80050dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* verify arguments */
    if (stream == NULL || stream->subIndex == 0 || buf == NULL || count != 4
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d045      	beq.n	8005170 <OD_write_1011+0x94>
 80050e4:	461f      	mov	r7, r3
 80050e6:	4606      	mov	r6, r0
 80050e8:	7c43      	ldrb	r3, [r0, #17]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d043      	beq.n	8005176 <OD_write_1011+0x9a>
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d044      	beq.n	800517c <OD_write_1011+0xa0>
 80050f2:	2a04      	cmp	r2, #4
 80050f4:	d145      	bne.n	8005182 <OD_write_1011+0xa6>
        || countWritten == NULL
 80050f6:	2f00      	cmp	r7, #0
 80050f8:	d048      	beq.n	800518c <OD_write_1011+0xb0>
    ) {
        return ODR_DEV_INCOMPAT;
    }

    CO_storage_t *storage = stream->object;
 80050fa:	6845      	ldr	r5, [r0, #4]

    if (stream->subIndex == 0 || storage->restore == NULL || !storage->enabled){
 80050fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d047      	beq.n	8005192 <OD_write_1011+0xb6>
 8005102:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005104:	2b00      	cmp	r3, #0
 8005106:	d047      	beq.n	8005198 <OD_write_1011+0xbc>
        return ODR_READONLY;
    }

    if (CO_getUint32(buf) != 0x64616F6C) {
 8005108:	680a      	ldr	r2, [r1, #0]
 800510a:	4b28      	ldr	r3, [pc, #160]	; (80051ac <OD_write_1011+0xd0>)
 800510c:	429a      	cmp	r2, r3
 800510e:	d146      	bne.n	800519e <OD_write_1011+0xc2>

    /* loop through entries and store relevant */
    uint8_t found = 0;
    ODR_t returnCode = ODR_OK;

    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 8005110:	2400      	movs	r4, #0
    ODR_t returnCode = ODR_OK;
 8005112:	46a0      	mov	r8, r4
    uint8_t found = 0;
 8005114:	4622      	mov	r2, r4
 8005116:	e003      	b.n	8005120 <OD_write_1011+0x44>

        if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
            if (found == 0) found = 1;
            if ((entry->attr & CO_storage_restore) != 0) {
                ODR_t code = storage->restore(entry, storage->CANmodule);
                if (code != ODR_OK) returnCode = code;
 8005118:	4680      	mov	r8, r0
                found = 2;
 800511a:	2202      	movs	r2, #2
    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 800511c:	3401      	adds	r4, #1
 800511e:	b2e4      	uxtb	r4, r4
 8005120:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8005124:	42a3      	cmp	r3, r4
 8005126:	d917      	bls.n	8005158 <OD_write_1011+0x7c>
        CO_storage_entry_t *entry = &storage->entries[i];
 8005128:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800512a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800512e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
 8005132:	7c73      	ldrb	r3, [r6, #17]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d002      	beq.n	800513e <OD_write_1011+0x62>
 8005138:	7a01      	ldrb	r1, [r0, #8]
 800513a:	428b      	cmp	r3, r1
 800513c:	d1ee      	bne.n	800511c <OD_write_1011+0x40>
            if (found == 0) found = 1;
 800513e:	b902      	cbnz	r2, 8005142 <OD_write_1011+0x66>
 8005140:	2201      	movs	r2, #1
            if ((entry->attr & CO_storage_restore) != 0) {
 8005142:	7a43      	ldrb	r3, [r0, #9]
 8005144:	f013 0f04 	tst.w	r3, #4
 8005148:	d0e8      	beq.n	800511c <OD_write_1011+0x40>
                ODR_t code = storage->restore(entry, storage->CANmodule);
 800514a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800514c:	6a29      	ldr	r1, [r5, #32]
 800514e:	4798      	blx	r3
                if (code != ODR_OK) returnCode = code;
 8005150:	2800      	cmp	r0, #0
 8005152:	d1e1      	bne.n	8005118 <OD_write_1011+0x3c>
                found = 2;
 8005154:	2202      	movs	r2, #2
 8005156:	e7e1      	b.n	800511c <OD_write_1011+0x40>
            }
        }
    }

    if (found != 2)
 8005158:	2a02      	cmp	r2, #2
 800515a:	d003      	beq.n	8005164 <OD_write_1011+0x88>
        returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 800515c:	bb12      	cbnz	r2, 80051a4 <OD_write_1011+0xc8>
 800515e:	f04f 080e 	mov.w	r8, #14
 8005162:	e010      	b.n	8005186 <OD_write_1011+0xaa>

    if (returnCode == ODR_OK) *countWritten = sizeof(uint32_t);
 8005164:	f1b8 0f00 	cmp.w	r8, #0
 8005168:	d10d      	bne.n	8005186 <OD_write_1011+0xaa>
 800516a:	2304      	movs	r3, #4
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	e00a      	b.n	8005186 <OD_write_1011+0xaa>
        return ODR_DEV_INCOMPAT;
 8005170:	f04f 0809 	mov.w	r8, #9
 8005174:	e007      	b.n	8005186 <OD_write_1011+0xaa>
 8005176:	f04f 0809 	mov.w	r8, #9
 800517a:	e004      	b.n	8005186 <OD_write_1011+0xaa>
 800517c:	f04f 0809 	mov.w	r8, #9
 8005180:	e001      	b.n	8005186 <OD_write_1011+0xaa>
 8005182:	f04f 0809 	mov.w	r8, #9
    return returnCode;
}
 8005186:	4640      	mov	r0, r8
 8005188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ODR_DEV_INCOMPAT;
 800518c:	f04f 0809 	mov.w	r8, #9
 8005190:	e7f9      	b.n	8005186 <OD_write_1011+0xaa>
        return ODR_READONLY;
 8005192:	f04f 0804 	mov.w	r8, #4
 8005196:	e7f6      	b.n	8005186 <OD_write_1011+0xaa>
 8005198:	f04f 0804 	mov.w	r8, #4
 800519c:	e7f3      	b.n	8005186 <OD_write_1011+0xaa>
        return ODR_DATA_TRANSF;
 800519e:	f04f 0815 	mov.w	r8, #21
 80051a2:	e7f0      	b.n	8005186 <OD_write_1011+0xaa>
        returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 80051a4:	f04f 0804 	mov.w	r8, #4
 80051a8:	e7ed      	b.n	8005186 <OD_write_1011+0xaa>
 80051aa:	bf00      	nop
 80051ac:	64616f6c 	.word	0x64616f6c

080051b0 <CO_storage_init>:
                                                  CO_CANmodule_t *CANmodule),
                                 CO_storage_entry_t *entries,
                                 uint8_t entriesCount)
{
    /* verify arguments */
    if (storage == NULL) {
 80051b0:	b1f0      	cbz	r0, 80051f0 <CO_storage_init+0x40>
{
 80051b2:	b410      	push	{r4}
 80051b4:	4604      	mov	r4, r0
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* Configure object variables */
    storage->CANmodule = CANmodule;
 80051b6:	6201      	str	r1, [r0, #32]
    storage->store = store;
 80051b8:	9901      	ldr	r1, [sp, #4]
 80051ba:	6241      	str	r1, [r0, #36]	; 0x24
    storage->restore = restore;
 80051bc:	9902      	ldr	r1, [sp, #8]
 80051be:	6281      	str	r1, [r0, #40]	; 0x28
    storage->entries = entries;
 80051c0:	9903      	ldr	r1, [sp, #12]
 80051c2:	62c1      	str	r1, [r0, #44]	; 0x2c
    storage->entriesCount = entriesCount;
 80051c4:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80051c8:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30

    /* configure extensions */
    if (OD_1010_StoreParameters != NULL) {
 80051cc:	b12a      	cbz	r2, 80051da <CO_storage_init+0x2a>
        storage->OD_1010_extension.object = storage;
 80051ce:	6000      	str	r0, [r0, #0]
        storage->OD_1010_extension.read = OD_readOriginal;
 80051d0:	490a      	ldr	r1, [pc, #40]	; (80051fc <CO_storage_init+0x4c>)
 80051d2:	6041      	str	r1, [r0, #4]
        storage->OD_1010_extension.write = OD_write_1010;
 80051d4:	490a      	ldr	r1, [pc, #40]	; (8005200 <CO_storage_init+0x50>)
 80051d6:	6081      	str	r1, [r0, #8]
    entry->extension = extension;
 80051d8:	6090      	str	r0, [r2, #8]
        OD_extension_init(OD_1010_StoreParameters, &storage->OD_1010_extension);
    }

    if (OD_1011_RestoreDefaultParameters != NULL) {
 80051da:	b163      	cbz	r3, 80051f6 <CO_storage_init+0x46>
        storage->OD_1011_extension.object = storage;
 80051dc:	6124      	str	r4, [r4, #16]
        storage->OD_1011_extension.read = OD_readOriginal;
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <CO_storage_init+0x4c>)
 80051e0:	6162      	str	r2, [r4, #20]
        storage->OD_1011_extension.write = OD_write_1011;
 80051e2:	4a08      	ldr	r2, [pc, #32]	; (8005204 <CO_storage_init+0x54>)
 80051e4:	61a2      	str	r2, [r4, #24]
        OD_extension_init(OD_1011_RestoreDefaultParameters,
 80051e6:	3410      	adds	r4, #16
 80051e8:	609c      	str	r4, [r3, #8]
                          &storage->OD_1011_extension);
    }

    return CO_ERROR_NO;
 80051ea:	2000      	movs	r0, #0
}
 80051ec:	bc10      	pop	{r4}
 80051ee:	4770      	bx	lr
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80051f4:	4770      	bx	lr
    return CO_ERROR_NO;
 80051f6:	2000      	movs	r0, #0
 80051f8:	e7f8      	b.n	80051ec <CO_storage_init+0x3c>
 80051fa:	bf00      	nop
 80051fc:	08001a29 	.word	0x08001a29
 8005200:	08005009 	.word	0x08005009
 8005204:	080050dd 	.word	0x080050dd

08005208 <restoreEeprom>:
 *
 * For more information see file CO_storage.h, CO_storage_entry_t.
 */
static ODR_t restoreEeprom(CO_storage_entry_t *entry,
                           CO_CANmodule_t *CANmodule)
{
 8005208:	b530      	push	{r4, r5, lr}
 800520a:	b083      	sub	sp, #12
 800520c:	4604      	mov	r4, r0
    (void) CANmodule;
    bool_t writeOk;

    /* Write empty signature */
    uint32_t signature = 0xFFFFFFFF;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	9301      	str	r3, [sp, #4]
    writeOk = CO_eeprom_writeBlock(entry->storageModule,
 8005214:	2304      	movs	r3, #4
 8005216:	6942      	ldr	r2, [r0, #20]
 8005218:	eb0d 0103 	add.w	r1, sp, r3
 800521c:	68c0      	ldr	r0, [r0, #12]
 800521e:	f7ff fe51 	bl	8004ec4 <CO_eeprom_writeBlock>
 8005222:	4605      	mov	r5, r0
                                   entry->eepromAddrSignature,
                                   sizeof(signature));

    /* verify signature and protection */
    uint32_t signatureRead;
    CO_eeprom_readBlock(entry->storageModule,
 8005224:	2304      	movs	r3, #4
 8005226:	6962      	ldr	r2, [r4, #20]
 8005228:	4669      	mov	r1, sp
 800522a:	68e0      	ldr	r0, [r4, #12]
 800522c:	f7ff fddc 	bl	8004de8 <CO_eeprom_readBlock>
                        (uint8_t *)&signatureRead,
                        entry->eepromAddrSignature,
                        sizeof(signatureRead));
    if(signature != signatureRead || !writeOk) {
 8005230:	9a01      	ldr	r2, [sp, #4]
 8005232:	9b00      	ldr	r3, [sp, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d103      	bne.n	8005240 <restoreEeprom+0x38>
 8005238:	b125      	cbz	r5, 8005244 <restoreEeprom+0x3c>
        return ODR_HW;
    }

    return ODR_OK;
 800523a:	2000      	movs	r0, #0
}
 800523c:	b003      	add	sp, #12
 800523e:	bd30      	pop	{r4, r5, pc}
        return ODR_HW;
 8005240:	200a      	movs	r0, #10
 8005242:	e7fb      	b.n	800523c <restoreEeprom+0x34>
 8005244:	200a      	movs	r0, #10
 8005246:	e7f9      	b.n	800523c <restoreEeprom+0x34>

08005248 <storeEeprom>:
static ODR_t storeEeprom(CO_storage_entry_t *entry, CO_CANmodule_t *CANmodule) {
 8005248:	b530      	push	{r4, r5, lr}
 800524a:	b083      	sub	sp, #12
 800524c:	4604      	mov	r4, r0
 800524e:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005250:	f3ef 8310 	mrs	r3, PRIMASK
    CO_LOCK_OD(CANmodule);
 8005254:	634b      	str	r3, [r1, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8005256:	b672      	cpsid	i
    writeOk = CO_eeprom_writeBlock(entry->storageModule, entry->addr,
 8005258:	6843      	ldr	r3, [r0, #4]
 800525a:	6982      	ldr	r2, [r0, #24]
 800525c:	6801      	ldr	r1, [r0, #0]
 800525e:	68c0      	ldr	r0, [r0, #12]
 8005260:	f7ff fe30 	bl	8004ec4 <CO_eeprom_writeBlock>
    CO_UNLOCK_OD(CANmodule);
 8005264:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	f383 8810 	msr	PRIMASK, r3
    uint16_t crc_read = CO_eeprom_getCrcBlock(entry->storageModule,
 800526a:	6862      	ldr	r2, [r4, #4]
 800526c:	69a1      	ldr	r1, [r4, #24]
 800526e:	68e0      	ldr	r0, [r4, #12]
 8005270:	f7ff fec8 	bl	8005004 <CO_eeprom_getCrcBlock>
    uint32_t signature = (((uint32_t)entry->crc) << 16) | signatureOfEntry;
 8005274:	8a22      	ldrh	r2, [r4, #16]
 8005276:	88a3      	ldrh	r3, [r4, #4]
 8005278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800527c:	9301      	str	r3, [sp, #4]
    writeOk = CO_eeprom_writeBlock(entry->storageModule,
 800527e:	2304      	movs	r3, #4
 8005280:	6962      	ldr	r2, [r4, #20]
 8005282:	eb0d 0103 	add.w	r1, sp, r3
 8005286:	68e0      	ldr	r0, [r4, #12]
 8005288:	f7ff fe1c 	bl	8004ec4 <CO_eeprom_writeBlock>
 800528c:	4605      	mov	r5, r0
    CO_eeprom_readBlock(entry->storageModule,
 800528e:	2304      	movs	r3, #4
 8005290:	6962      	ldr	r2, [r4, #20]
 8005292:	4669      	mov	r1, sp
 8005294:	68e0      	ldr	r0, [r4, #12]
 8005296:	f7ff fda7 	bl	8004de8 <CO_eeprom_readBlock>
    if(signature != signatureRead || !writeOk) {
 800529a:	9a01      	ldr	r2, [sp, #4]
 800529c:	9b00      	ldr	r3, [sp, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d103      	bne.n	80052aa <storeEeprom+0x62>
 80052a2:	b125      	cbz	r5, 80052ae <storeEeprom+0x66>
    return ODR_OK;
 80052a4:	2000      	movs	r0, #0
}
 80052a6:	b003      	add	sp, #12
 80052a8:	bd30      	pop	{r4, r5, pc}
        return ODR_HW;
 80052aa:	200a      	movs	r0, #10
 80052ac:	e7fb      	b.n	80052a6 <storeEeprom+0x5e>
 80052ae:	200a      	movs	r0, #10
 80052b0:	e7f9      	b.n	80052a6 <storeEeprom+0x5e>
	...

080052b4 <CO_storageEeprom_init>:
                                       OD_entry_t *OD_1010_StoreParameters,
                                       OD_entry_t *OD_1011_RestoreDefaultParam,
                                       CO_storage_entry_t *entries,
                                       uint8_t entriesCount,
                                       uint32_t *storageInitError)
{
 80052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	b08d      	sub	sp, #52	; 0x34
 80052ba:	af04      	add	r7, sp, #16
 80052bc:	60fa      	str	r2, [r7, #12]
 80052be:	461d      	mov	r5, r3
 80052c0:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 80052c2:	f897 a050 	ldrb.w	sl, [r7, #80]	; 0x50
 80052c6:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
    CO_ReturnError_t ret;
    bool_t eepromOvf = false;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]

    /* verify arguments */
    if (storage == NULL || entries == NULL || entriesCount == 0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f000 80a3 	beq.w	800541c <CO_storageEeprom_init+0x168>
 80052d6:	460c      	mov	r4, r1
 80052d8:	2e00      	cmp	r6, #0
 80052da:	f000 80a3 	beq.w	8005424 <CO_storageEeprom_init+0x170>
 80052de:	f1ba 0f00 	cmp.w	sl, #0
 80052e2:	f000 80a3 	beq.w	800542c <CO_storageEeprom_init+0x178>
        || storageInitError == NULL
 80052e6:	f1b9 0f00 	cmp.w	r9, #0
 80052ea:	f000 80a3 	beq.w	8005434 <CO_storageEeprom_init+0x180>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    storage->enabled = false;
 80052ee:	6343      	str	r3, [r0, #52]	; 0x34

    /* Initialize storage hardware */
    if (!CO_eeprom_init(storageModule)) {
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7ff fd6a 	bl	8004dca <CO_eeprom_init>
 80052f6:	b198      	cbz	r0, 8005320 <CO_storageEeprom_init+0x6c>
        *storageInitError = 0xFFFFFFFF;
        return CO_ERROR_DATA_CORRUPT;
    }

    /* initialize storage and OD extensions */
    ret = CO_storage_init(storage,
 80052f8:	f8cd a00c 	str.w	sl, [sp, #12]
 80052fc:	9602      	str	r6, [sp, #8]
 80052fe:	4b4f      	ldr	r3, [pc, #316]	; (800543c <CO_storageEeprom_init+0x188>)
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <CO_storageEeprom_init+0x18c>)
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005308:	462a      	mov	r2, r5
 800530a:	4621      	mov	r1, r4
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff4f 	bl	80051b0 <CO_storage_init>
                          OD_1011_RestoreDefaultParam,
                          storeEeprom,
                          restoreEeprom,
                          entries,
                          entriesCount);
    if (ret != CO_ERROR_NO) {
 8005312:	6138      	str	r0, [r7, #16]
 8005314:	b160      	cbz	r0, 8005330 <CO_storageEeprom_init+0x7c>
        }
    } /* for (entries) */

    storage->enabled = true;
    return ret;
}
 8005316:	6938      	ldr	r0, [r7, #16]
 8005318:	3724      	adds	r7, #36	; 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *storageInitError = 0xFFFFFFFF;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	f8c9 3000 	str.w	r3, [r9]
        return CO_ERROR_DATA_CORRUPT;
 8005328:	f06f 030c 	mvn.w	r3, #12
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e7f2      	b.n	8005316 <CO_storageEeprom_init+0x62>
    uint32_t signatures[entriesCount];
 8005330:	ea4f 048a 	mov.w	r4, sl, lsl #2
 8005334:	1de3      	adds	r3, r4, #7
 8005336:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800533a:	ebad 0d03 	sub.w	sp, sp, r3
 800533e:	f10d 0b10 	add.w	fp, sp, #16
    size_t signaturesAddress = CO_eeprom_getAddr(storageModule,
 8005342:	f107 031c 	add.w	r3, r7, #28
 8005346:	4622      	mov	r2, r4
 8005348:	2100      	movs	r1, #0
 800534a:	68fd      	ldr	r5, [r7, #12]
 800534c:	4628      	mov	r0, r5
 800534e:	f7ff fd3f 	bl	8004dd0 <CO_eeprom_getAddr>
 8005352:	4602      	mov	r2, r0
 8005354:	60b8      	str	r0, [r7, #8]
    CO_eeprom_readBlock(storageModule,
 8005356:	4623      	mov	r3, r4
 8005358:	4659      	mov	r1, fp
 800535a:	4628      	mov	r0, r5
 800535c:	f7ff fd44 	bl	8004de8 <CO_eeprom_readBlock>
    *storageInitError = 0;
 8005360:	2500      	movs	r5, #0
 8005362:	f8c9 5000 	str.w	r5, [r9]
    for (uint8_t i = 0; i < entriesCount; i++) {
 8005366:	e021      	b.n	80053ac <CO_storageEeprom_init+0xf8>
            *storageInitError = i;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f8c9 3000 	str.w	r3, [r9]
            return CO_ERROR_ILLEGAL_ARGUMENT;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	e7cf      	b.n	8005316 <CO_storageEeprom_init+0x62>
            *storageInitError = i;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f8c9 3000 	str.w	r3, [r9]
            return CO_ERROR_OUT_OF_MEMORY;
 800537c:	f06f 0301 	mvn.w	r3, #1
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	e7c8      	b.n	8005316 <CO_storageEeprom_init+0x62>
            CO_eeprom_readBlock(entry->storageModule, entry->addr,
 8005384:	4602      	mov	r2, r0
 8005386:	f856 1008 	ldr.w	r1, [r6, r8]
 800538a:	68e0      	ldr	r0, [r4, #12]
 800538c:	f7ff fd2c 	bl	8004de8 <CO_eeprom_readBlock>
        if (dataCorrupt) {
 8005390:	e00a      	b.n	80053a8 <CO_storageEeprom_init+0xf4>
            *storageInitError |= ((uint32_t) 1) << errorBit;
 8005392:	2301      	movs	r3, #1
 8005394:	fa03 f202 	lsl.w	r2, r3, r2
 8005398:	f8d9 3000 	ldr.w	r3, [r9]
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c9 3000 	str.w	r3, [r9]
            ret = CO_ERROR_DATA_CORRUPT;
 80053a2:	f06f 030c 	mvn.w	r3, #12
 80053a6:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < entriesCount; i++) {
 80053a8:	3501      	adds	r5, #1
 80053aa:	b2ed      	uxtb	r5, r5
 80053ac:	4555      	cmp	r5, sl
 80053ae:	d231      	bcs.n	8005414 <CO_storageEeprom_init+0x160>
        CO_storage_entry_t *entry = &entries[i];
 80053b0:	617d      	str	r5, [r7, #20]
 80053b2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 80053b6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80053ba:	eb06 0484 	add.w	r4, r6, r4, lsl #2
        bool_t isAuto = (entry->attr & CO_storage_auto) != 0;
 80053be:	7a61      	ldrb	r1, [r4, #9]
 80053c0:	f3c1 0140 	ubfx	r1, r1, #1, #1
        if (entry->addr == NULL || entry->len == 0 || entry->subIndexOD < 2) {
 80053c4:	f856 3008 	ldr.w	r3, [r6, r8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0cd      	beq.n	8005368 <CO_storageEeprom_init+0xb4>
 80053cc:	6862      	ldr	r2, [r4, #4]
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d0ca      	beq.n	8005368 <CO_storageEeprom_init+0xb4>
 80053d2:	7a23      	ldrb	r3, [r4, #8]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d9c7      	bls.n	8005368 <CO_storageEeprom_init+0xb4>
        entry->eepromAddrSignature = signaturesAddress + sizeof(uint32_t) * i;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80053e0:	6163      	str	r3, [r4, #20]
        entry->eepromAddr = CO_eeprom_getAddr(storageModule,
 80053e2:	f107 031c 	add.w	r3, r7, #28
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fcf2 	bl	8004dd0 <CO_eeprom_getAddr>
 80053ec:	61a0      	str	r0, [r4, #24]
        entry->offset = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61e3      	str	r3, [r4, #28]
        if (eepromOvf) {
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1be      	bne.n	8005376 <CO_storageEeprom_init+0xc2>
        uint32_t signature = signatures[i];
 80053f8:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
        uint16_t signatureInEeprom = (uint16_t)signature;
 80053fc:	b299      	uxth	r1, r3
        entry->crc = (uint16_t)(signature >> 16);
 80053fe:	0c1b      	lsrs	r3, r3, #16
 8005400:	8223      	strh	r3, [r4, #16]
        uint16_t signatureOfEntry = (uint16_t)entry->len;
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	b29a      	uxth	r2, r3
        if (signatureInEeprom != signatureOfEntry) {
 8005406:	4291      	cmp	r1, r2
 8005408:	d0bc      	beq.n	8005384 <CO_storageEeprom_init+0xd0>
            uint32_t errorBit = entry->subIndexOD;
 800540a:	7a22      	ldrb	r2, [r4, #8]
            if (errorBit > 31) errorBit = 31;
 800540c:	2a1f      	cmp	r2, #31
 800540e:	d9c0      	bls.n	8005392 <CO_storageEeprom_init+0xde>
 8005410:	221f      	movs	r2, #31
 8005412:	e7be      	b.n	8005392 <CO_storageEeprom_init+0xde>
    storage->enabled = true;
 8005414:	2301      	movs	r3, #1
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6353      	str	r3, [r2, #52]	; 0x34
    return ret;
 800541a:	e77c      	b.n	8005316 <CO_storageEeprom_init+0x62>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e778      	b.n	8005316 <CO_storageEeprom_init+0x62>
 8005424:	f04f 33ff 	mov.w	r3, #4294967295
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	e774      	b.n	8005316 <CO_storageEeprom_init+0x62>
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e770      	b.n	8005316 <CO_storageEeprom_init+0x62>
 8005434:	f04f 33ff 	mov.w	r3, #4294967295
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	e76c      	b.n	8005316 <CO_storageEeprom_init+0x62>
 800543c:	08005209 	.word	0x08005209
 8005440:	08005249 	.word	0x08005249

08005444 <canopen_app_resetCommunication>:
    canopen_app_resetCommunication();
    return 0;
}

int
canopen_app_resetCommunication() {
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	b08e      	sub	sp, #56	; 0x38
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8005448:	485d      	ldr	r0, [pc, #372]	; (80055c0 <canopen_app_resetCommunication+0x17c>)
 800544a:	f005 f849 	bl	800a4e0 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 800544e:	4c5d      	ldr	r4, [pc, #372]	; (80055c4 <canopen_app_resetCommunication+0x180>)
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2600      	movs	r6, #0
 8005456:	615e      	str	r6, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8005458:	4d5b      	ldr	r5, [pc, #364]	; (80055c8 <canopen_app_resetCommunication+0x184>)
 800545a:	6828      	ldr	r0, [r5, #0]
 800545c:	f000 fa00 	bl	8005860 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	6858      	ldr	r0, [r3, #4]
 8005464:	f000 fa88 	bl	8005978 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8005468:	4632      	mov	r2, r6
 800546a:	6829      	ldr	r1, [r5, #0]
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	f7ff f9db 	bl	8004828 <CO_CANinit>
 8005472:	4b56      	ldr	r3, [pc, #344]	; (80055cc <canopen_app_resetCommunication+0x188>)
 8005474:	7018      	strb	r0, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005476:	2800      	cmp	r0, #0
 8005478:	d16b      	bne.n	8005552 <canopen_app_resetCommunication+0x10e>
        log_printf("Error: CAN initialization failed: %d\n", err);
        return 1;
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800547a:	4b55      	ldr	r3, [pc, #340]	; (80055d0 <canopen_app_resetCommunication+0x18c>)
 800547c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547e:	920a      	str	r2, [sp, #40]	; 0x28
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8005480:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8005482:	920b      	str	r2, [sp, #44]	; 0x2c
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8005484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8005486:	920c      	str	r2, [sp, #48]	; 0x30
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8005488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800548a:	930d      	str	r3, [sp, #52]	; 0x34
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 800548c:	4b4e      	ldr	r3, [pc, #312]	; (80055c8 <canopen_app_resetCommunication+0x184>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	1c93      	adds	r3, r2, #2
 8005492:	a90a      	add	r1, sp, #40	; 0x28
 8005494:	484b      	ldr	r0, [pc, #300]	; (80055c4 <canopen_app_resetCommunication+0x180>)
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	f7ff f9e2 	bl	8004860 <CO_LSSinit>
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <canopen_app_resetCommunication+0x188>)
 800549e:	7018      	strb	r0, [r3, #0]
    if (err != CO_ERROR_NO) {
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d15d      	bne.n	8005560 <canopen_app_resetCommunication+0x11c>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
        return 2;
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 80054a4:	4b48      	ldr	r3, [pc, #288]	; (80055c8 <canopen_app_resetCommunication+0x184>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	7811      	ldrb	r1, [r2, #0]
 80054aa:	7051      	strb	r1, [r2, #1]
    uint32_t errInfo = 0;
 80054ac:	2100      	movs	r1, #0
 80054ae:	9109      	str	r1, [sp, #36]	; 0x24
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 80054b0:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 80054b2:	aa09      	add	r2, sp, #36	; 0x24
 80054b4:	9207      	str	r2, [sp, #28]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	9306      	str	r3, [sp, #24]
 80054ba:	9105      	str	r1, [sp, #20]
 80054bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054c6:	9203      	str	r2, [sp, #12]
 80054c8:	9302      	str	r3, [sp, #8]
 80054ca:	f242 1311 	movw	r3, #8465	; 0x2111
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	9100      	str	r1, [sp, #0]
 80054d2:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <canopen_app_resetCommunication+0x190>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	460a      	mov	r2, r1
 80054d8:	483a      	ldr	r0, [pc, #232]	; (80055c4 <canopen_app_resetCommunication+0x180>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	f7ff f9de 	bl	800489c <CO_CANopenInit>
 80054e0:	4b3a      	ldr	r3, [pc, #232]	; (80055cc <canopen_app_resetCommunication+0x188>)
 80054e2:	7018      	strb	r0, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80054e4:	b110      	cbz	r0, 80054ec <canopen_app_resetCommunication+0xa8>
 80054e6:	f110 0f13 	cmn.w	r0, #19
 80054ea:	d13f      	bne.n	800556c <canopen_app_resetCommunication+0x128>
            log_printf("Error: CANopen initialization failed: %d\n", err);
        }
        return 3;
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80054ec:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <canopen_app_resetCommunication+0x180>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <canopen_app_resetCommunication+0x184>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	69c1      	ldr	r1, [r0, #28]
 80054f8:	aa09      	add	r2, sp, #36	; 0x24
 80054fa:	9200      	str	r2, [sp, #0]
 80054fc:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <canopen_app_resetCommunication+0x190>)
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	f7ff fa9a 	bl	8004a38 <CO_CANopenInitPDO>
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <canopen_app_resetCommunication+0x188>)
 8005506:	7018      	strb	r0, [r3, #0]
    if (err != CO_ERROR_NO) {
 8005508:	2800      	cmp	r0, #0
 800550a:	d13d      	bne.n	8005588 <canopen_app_resetCommunication+0x144>
        }
        return 4;
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 800550c:	4b2e      	ldr	r3, [pc, #184]	; (80055c8 <canopen_app_resetCommunication+0x184>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6858      	ldr	r0, [r3, #4]
 8005512:	f003 ffad 	bl	8009470 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8005516:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <canopen_app_resetCommunication+0x180>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	2a00      	cmp	r2, #0
 800551e:	d14a      	bne.n	80055b6 <canopen_app_resetCommunication+0x172>

#if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
        if (storageInitError != 0) {
 8005520:	4a2d      	ldr	r2, [pc, #180]	; (80055d8 <canopen_app_resetCommunication+0x194>)
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	2a00      	cmp	r2, #0
 8005526:	d13d      	bne.n	80055a4 <canopen_app_resetCommunication+0x160>
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8005528:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <canopen_app_resetCommunication+0x180>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6858      	ldr	r0, [r3, #4]
 800552e:	f000 f99e 	bl	800586e <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8005532:	482a      	ldr	r0, [pc, #168]	; (80055dc <canopen_app_resetCommunication+0x198>)
 8005534:	f004 ffd4 	bl	800a4e0 <puts>
    fflush(stdout);
 8005538:	4b29      	ldr	r3, [pc, #164]	; (80055e0 <canopen_app_resetCommunication+0x19c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6898      	ldr	r0, [r3, #8]
 800553e:	f004 fce1 	bl	8009f04 <fflush>
    time_old = time_current = HAL_GetTick();
 8005542:	f001 fb71 	bl	8006c28 <HAL_GetTick>
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <canopen_app_resetCommunication+0x1a0>)
 8005548:	6018      	str	r0, [r3, #0]
 800554a:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <canopen_app_resetCommunication+0x1a4>)
 800554c:	6018      	str	r0, [r3, #0]
    return 0;
 800554e:	2000      	movs	r0, #0
 8005550:	e004      	b.n	800555c <canopen_app_resetCommunication+0x118>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8005552:	4601      	mov	r1, r0
 8005554:	4825      	ldr	r0, [pc, #148]	; (80055ec <canopen_app_resetCommunication+0x1a8>)
 8005556:	f004 ff3d 	bl	800a3d4 <iprintf>
        return 1;
 800555a:	2001      	movs	r0, #1
}
 800555c:	b00e      	add	sp, #56	; 0x38
 800555e:	bd70      	pop	{r4, r5, r6, pc}
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8005560:	4601      	mov	r1, r0
 8005562:	4823      	ldr	r0, [pc, #140]	; (80055f0 <canopen_app_resetCommunication+0x1ac>)
 8005564:	f004 ff36 	bl	800a3d4 <iprintf>
        return 2;
 8005568:	2002      	movs	r0, #2
 800556a:	e7f7      	b.n	800555c <canopen_app_resetCommunication+0x118>
        if (err == CO_ERROR_OD_PARAMETERS) {
 800556c:	f110 0f0c 	cmn.w	r0, #12
 8005570:	d005      	beq.n	800557e <canopen_app_resetCommunication+0x13a>
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8005572:	4601      	mov	r1, r0
 8005574:	481f      	ldr	r0, [pc, #124]	; (80055f4 <canopen_app_resetCommunication+0x1b0>)
 8005576:	f004 ff2d 	bl	800a3d4 <iprintf>
        return 3;
 800557a:	2003      	movs	r0, #3
 800557c:	e7ee      	b.n	800555c <canopen_app_resetCommunication+0x118>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800557e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005580:	481d      	ldr	r0, [pc, #116]	; (80055f8 <canopen_app_resetCommunication+0x1b4>)
 8005582:	f004 ff27 	bl	800a3d4 <iprintf>
 8005586:	e7f8      	b.n	800557a <canopen_app_resetCommunication+0x136>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8005588:	f110 0f0c 	cmn.w	r0, #12
 800558c:	d005      	beq.n	800559a <canopen_app_resetCommunication+0x156>
            log_printf("Error: PDO initialization failed: %d\n", err);
 800558e:	4601      	mov	r1, r0
 8005590:	481a      	ldr	r0, [pc, #104]	; (80055fc <canopen_app_resetCommunication+0x1b8>)
 8005592:	f004 ff1f 	bl	800a3d4 <iprintf>
        return 4;
 8005596:	2004      	movs	r0, #4
 8005598:	e7e0      	b.n	800555c <canopen_app_resetCommunication+0x118>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800559a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800559c:	4816      	ldr	r0, [pc, #88]	; (80055f8 <canopen_app_resetCommunication+0x1b4>)
 800559e:	f004 ff19 	bl	800a3d4 <iprintf>
 80055a2:	e7f8      	b.n	8005596 <canopen_app_resetCommunication+0x152>
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
 80055a4:	69d8      	ldr	r0, [r3, #28]
 80055a6:	9200      	str	r2, [sp, #0]
 80055a8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80055ac:	222f      	movs	r2, #47	; 0x2f
 80055ae:	2101      	movs	r1, #1
 80055b0:	f7fb fe1a 	bl	80011e8 <CO_error>
 80055b4:	e7b8      	b.n	8005528 <canopen_app_resetCommunication+0xe4>
        log_printf("CANopenNode - Node-id not initialized\n");
 80055b6:	4812      	ldr	r0, [pc, #72]	; (8005600 <canopen_app_resetCommunication+0x1bc>)
 80055b8:	f004 ff92 	bl	800a4e0 <puts>
 80055bc:	e7b4      	b.n	8005528 <canopen_app_resetCommunication+0xe4>
 80055be:	bf00      	nop
 80055c0:	0800af60 	.word	0x0800af60
 80055c4:	20000518 	.word	0x20000518
 80055c8:	2000051c 	.word	0x2000051c
 80055cc:	20000520 	.word	0x20000520
 80055d0:	20000230 	.word	0x20000230
 80055d4:	20000028 	.word	0x20000028
 80055d8:	2000055c 	.word	0x2000055c
 80055dc:	0800b080 	.word	0x0800b080
 80055e0:	20000494 	.word	0x20000494
 80055e4:	20000560 	.word	0x20000560
 80055e8:	20000564 	.word	0x20000564
 80055ec:	0800af88 	.word	0x0800af88
 80055f0:	0800afb0 	.word	0x0800afb0
 80055f4:	0800b004 	.word	0x0800b004
 80055f8:	0800afdc 	.word	0x0800afdc
 80055fc:	0800b030 	.word	0x0800b030
 8005600:	0800b058 	.word	0x0800b058

08005604 <canopen_app_init>:
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8005604:	b500      	push	{lr}
 8005606:	b087      	sub	sp, #28
    canopenNodeSTM32 = _canopenNodeSTM32;
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <canopen_app_init+0x7c>)
 800560a:	6018      	str	r0, [r3, #0]
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800560c:	a905      	add	r1, sp, #20
 800560e:	2000      	movs	r0, #0
 8005610:	f7ff f861 	bl	80046d6 <CO_new>
 8005614:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <canopen_app_init+0x80>)
 8005616:	6018      	str	r0, [r3, #0]
    if (CO == NULL) {
 8005618:	b330      	cbz	r0, 8005668 <canopen_app_init+0x64>
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 800561a:	9905      	ldr	r1, [sp, #20]
 800561c:	481a      	ldr	r0, [pc, #104]	; (8005688 <canopen_app_init+0x84>)
 800561e:	f004 fed9 	bl	800a3d4 <iprintf>
    canopenNodeSTM32->canOpenStack = CO;
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <canopen_app_init+0x7c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a17      	ldr	r2, [pc, #92]	; (8005684 <canopen_app_init+0x80>)
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	615a      	str	r2, [r3, #20]
    err = CO_storageEeprom_init(&storage, CO->CANmodule, NULL, OD_ENTRY_H1010_storeParameters,
 800562c:	4b17      	ldr	r3, [pc, #92]	; (800568c <canopen_app_init+0x88>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	6851      	ldr	r1, [r2, #4]
 8005634:	4a16      	ldr	r2, [pc, #88]	; (8005690 <canopen_app_init+0x8c>)
 8005636:	9203      	str	r2, [sp, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	9202      	str	r2, [sp, #8]
 800563c:	4a15      	ldr	r2, [pc, #84]	; (8005694 <canopen_app_init+0x90>)
 800563e:	9201      	str	r2, [sp, #4]
 8005640:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005644:	9200      	str	r2, [sp, #0]
 8005646:	3348      	adds	r3, #72	; 0x48
 8005648:	2200      	movs	r2, #0
 800564a:	4813      	ldr	r0, [pc, #76]	; (8005698 <canopen_app_init+0x94>)
 800564c:	f7ff fe32 	bl	80052b4 <CO_storageEeprom_init>
 8005650:	4b12      	ldr	r3, [pc, #72]	; (800569c <canopen_app_init+0x98>)
 8005652:	7018      	strb	r0, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_DATA_CORRUPT) {
 8005654:	b110      	cbz	r0, 800565c <canopen_app_init+0x58>
 8005656:	f110 0f0d 	cmn.w	r0, #13
 800565a:	d10a      	bne.n	8005672 <canopen_app_init+0x6e>
    canopen_app_resetCommunication();
 800565c:	f7ff fef2 	bl	8005444 <canopen_app_resetCommunication>
    return 0;
 8005660:	2000      	movs	r0, #0
}
 8005662:	b007      	add	sp, #28
 8005664:	f85d fb04 	ldr.w	pc, [sp], #4
        log_printf("Error: Can't allocate memory\n");
 8005668:	480d      	ldr	r0, [pc, #52]	; (80056a0 <canopen_app_init+0x9c>)
 800566a:	f004 ff39 	bl	800a4e0 <puts>
        return 1;
 800566e:	2001      	movs	r0, #1
 8005670:	e7f7      	b.n	8005662 <canopen_app_init+0x5e>
        log_printf("Error: Storage %d\n", storageInitError);
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <canopen_app_init+0x8c>)
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	480b      	ldr	r0, [pc, #44]	; (80056a4 <canopen_app_init+0xa0>)
 8005678:	f004 feac 	bl	800a3d4 <iprintf>
        return 2;
 800567c:	2002      	movs	r0, #2
 800567e:	e7f0      	b.n	8005662 <canopen_app_init+0x5e>
 8005680:	2000051c 	.word	0x2000051c
 8005684:	20000518 	.word	0x20000518
 8005688:	0800b0bc 	.word	0x0800b0bc
 800568c:	20000028 	.word	0x20000028
 8005690:	2000055c 	.word	0x2000055c
 8005694:	20000004 	.word	0x20000004
 8005698:	20000524 	.word	0x20000524
 800569c:	20000520 	.word	0x20000520
 80056a0:	0800b09c 	.word	0x0800b09c
 80056a4:	0800b0e4 	.word	0x0800b0e4

080056a8 <canopen_app_process>:

void
canopen_app_process() {
 80056a8:	b510      	push	{r4, lr}
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 80056aa:	f001 fabd 	bl	8006c28 <HAL_GetTick>
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <canopen_app_process+0x7c>)
 80056b0:	6018      	str	r0, [r3, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 80056b2:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <canopen_app_process+0x80>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4290      	cmp	r0, r2
 80056b8:	d100      	bne.n	80056bc <canopen_app_process+0x14>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 80056ba:	bd10      	pop	{r4, pc}
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 80056bc:	1a82      	subs	r2, r0, r2
        time_old = time_current;
 80056be:	6018      	str	r0, [r3, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 80056c0:	4c1a      	ldr	r4, [pc, #104]	; (800572c <canopen_app_process+0x84>)
 80056c2:	2300      	movs	r3, #0
 80056c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056c8:	fb01 f202 	mul.w	r2, r1, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	6820      	ldr	r0, [r4, #0]
 80056d0:	f7ff fa3a 	bl	8004b48 <CO_process>
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 80056d4:	6821      	ldr	r1, [r4, #0]
 80056d6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80056d8:	7a5b      	ldrb	r3, [r3, #9]
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <canopen_app_process+0x88>)
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	7453      	strb	r3, [r2, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 80056e2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80056e4:	7a9b      	ldrb	r3, [r3, #10]
 80056e6:	09db      	lsrs	r3, r3, #7
 80056e8:	7413      	strb	r3, [r2, #16]
        if (reset_status == CO_RESET_COMM) {
 80056ea:	2801      	cmp	r0, #1
 80056ec:	d007      	beq.n	80056fe <canopen_app_process+0x56>
        } else if (reset_status == CO_RESET_APP) {
 80056ee:	2802      	cmp	r0, #2
 80056f0:	d1e3      	bne.n	80056ba <canopen_app_process+0x12>
            log_printf("CANopenNode Device Reset\n");
 80056f2:	4810      	ldr	r0, [pc, #64]	; (8005734 <canopen_app_process+0x8c>)
 80056f4:	f004 fef4 	bl	800a4e0 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 80056f8:	f002 fa94 	bl	8007c24 <HAL_NVIC_SystemReset>
}
 80056fc:	e7dd      	b.n	80056ba <canopen_app_process+0x12>
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 80056fe:	6850      	ldr	r0, [r2, #4]
 8005700:	f003 feea 	bl	80094d8 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8005704:	4c0a      	ldr	r4, [pc, #40]	; (8005730 <canopen_app_process+0x88>)
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	f000 f8aa 	bl	8005860 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 800570c:	4b07      	ldr	r3, [pc, #28]	; (800572c <canopen_app_process+0x84>)
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	f7fe ffa8 	bl	8004664 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8005714:	4808      	ldr	r0, [pc, #32]	; (8005738 <canopen_app_process+0x90>)
 8005716:	f004 fee3 	bl	800a4e0 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	f7ff ff72 	bl	8005604 <canopen_app_init>
 8005720:	e7cb      	b.n	80056ba <canopen_app_process+0x12>
 8005722:	bf00      	nop
 8005724:	20000560 	.word	0x20000560
 8005728:	20000564 	.word	0x20000564
 800572c:	20000518 	.word	0x20000518
 8005730:	2000051c 	.word	0x2000051c
 8005734:	0800b120 	.word	0x0800b120
 8005738:	0800b0f8 	.word	0x0800b0f8

0800573c <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 800573c:	b538      	push	{r3, r4, r5, lr}
    CO_LOCK_OD(CO->CANmodule);
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <canopen_app_interrupt+0x58>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	6852      	ldr	r2, [r2, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005744:	f3ef 8110 	mrs	r1, PRIMASK
 8005748:	6351      	str	r1, [r2, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800574a:	b672      	cpsid	i
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	6803      	ldr	r3, [r0, #0]
 8005750:	b913      	cbnz	r3, 8005758 <canopen_app_interrupt+0x1c>
 8005752:	6843      	ldr	r3, [r0, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	b933      	cbnz	r3, 8005766 <canopen_app_interrupt+0x2a>
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <canopen_app_interrupt+0x58>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	bd38      	pop	{r3, r4, r5, pc}
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8005766:	2200      	movs	r2, #0
 8005768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800576c:	f7ff fab1 	bl	8004cd2 <CO_process_SYNC>
 8005770:	4604      	mov	r4, r0
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8005772:	4d08      	ldr	r5, [pc, #32]	; (8005794 <canopen_app_interrupt+0x58>)
 8005774:	2300      	movs	r3, #0
 8005776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800577a:	4601      	mov	r1, r0
 800577c:	6828      	ldr	r0, [r5, #0]
 800577e:	f7ff face 	bl	8004d1e <CO_process_RPDO>
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8005782:	2300      	movs	r3, #0
 8005784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005788:	4621      	mov	r1, r4
 800578a:	6828      	ldr	r0, [r5, #0]
 800578c:	f7ff faf2 	bl	8004d74 <CO_process_TPDO>
 8005790:	e7e2      	b.n	8005758 <canopen_app_interrupt+0x1c>
 8005792:	bf00      	nop
 8005794:	20000518 	.word	0x20000518

08005798 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8005798:	b530      	push	{r4, r5, lr}
 800579a:	b083      	sub	sp, #12
 800579c:	4605      	mov	r5, r0
 800579e:	460c      	mov	r4, r1
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 80057a0:	6803      	ldr	r3, [r0, #0]
 80057a2:	6898      	ldr	r0, [r3, #8]
 80057a4:	f001 ffd8 	bl	8007758 <HAL_CAN_GetTxMailboxesFreeLevel>
 80057a8:	b910      	cbnz	r0, 80057b0 <prv_send_can_message+0x18>
    uint8_t success = 0;
 80057aa:	2000      	movs	r0, #0
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
}
 80057ac:	b003      	add	sp, #12
 80057ae:	bd30      	pop	{r4, r5, pc}
        tx_hdr.ExtId = 0u;
 80057b0:	490c      	ldr	r1, [pc, #48]	; (80057e4 <prv_send_can_message+0x4c>)
 80057b2:	2300      	movs	r3, #0
 80057b4:	604b      	str	r3, [r1, #4]
        tx_hdr.IDE = CAN_ID_STD;
 80057b6:	608b      	str	r3, [r1, #8]
        tx_hdr.DLC = buffer->DLC;
 80057b8:	7923      	ldrb	r3, [r4, #4]
 80057ba:	610b      	str	r3, [r1, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057c2:	600b      	str	r3, [r1, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 80057c4:	4622      	mov	r2, r4
 80057c6:	f852 3b05 	ldr.w	r3, [r2], #5
 80057ca:	0b9b      	lsrs	r3, r3, #14
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	60cb      	str	r3, [r1, #12]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80057d2:	6828      	ldr	r0, [r5, #0]
 80057d4:	ab01      	add	r3, sp, #4
 80057d6:	6880      	ldr	r0, [r0, #8]
 80057d8:	f001 ff49 	bl	800766e <HAL_CAN_AddTxMessage>
                  == HAL_OK;
 80057dc:	fab0 f080 	clz	r0, r0
 80057e0:	0940      	lsrs	r0, r0, #5
 80057e2:	e7e3      	b.n	80057ac <prv_send_can_message+0x14>
 80057e4:	20000588 	.word	0x20000588

080057e8 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80057e8:	b530      	push	{r4, r5, lr}
 80057ea:	b085      	sub	sp, #20
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80057ec:	f10d 0305 	add.w	r3, sp, #5
 80057f0:	4a19      	ldr	r2, [pc, #100]	; (8005858 <prv_read_can_received_msg+0x70>)
 80057f2:	f001 ffca 	bl	800778a <HAL_CAN_GetRxMessage>
 80057f6:	b988      	cbnz	r0, 800581c <prv_read_can_received_msg+0x34>
 80057f8:	4605      	mov	r5, r0
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80057fa:	4b17      	ldr	r3, [pc, #92]	; (8005858 <prv_read_can_received_msg+0x70>)
 80057fc:	681c      	ldr	r4, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d00d      	beq.n	8005820 <prv_read_can_received_msg+0x38>
 8005804:	2300      	movs	r3, #0
 8005806:	431c      	orrs	r4, r3
 8005808:	9400      	str	r4, [sp, #0]
    rcvMsg.dlc = rx_hdr.DLC;
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <prv_read_can_received_msg+0x70>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f88d 3004 	strb.w	r3, [sp, #4]

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <prv_read_can_received_msg+0x74>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	b12a      	cbz	r2, 8005826 <prv_read_can_received_msg+0x3e>
        __BKPT(0);
 800581a:	be00      	bkpt	0x0000

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
    }
}
 800581c:	b005      	add	sp, #20
 800581e:	bd30      	pop	{r4, r5, pc}
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8005820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005824:	e7ef      	b.n	8005806 <prv_read_can_received_msg+0x1e>
        buffer = CANModule_local->rxArray;
 8005826:	685a      	ldr	r2, [r3, #4]
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8005828:	891b      	ldrh	r3, [r3, #8]
 800582a:	b14b      	cbz	r3, 8005840 <prv_read_can_received_msg+0x58>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 800582c:	8811      	ldrh	r1, [r2, #0]
 800582e:	4061      	eors	r1, r4
 8005830:	8850      	ldrh	r0, [r2, #2]
 8005832:	4201      	tst	r1, r0
 8005834:	d003      	beq.n	800583e <prv_read_can_received_msg+0x56>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8005836:	3b01      	subs	r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	320c      	adds	r2, #12
 800583c:	e7f5      	b.n	800582a <prv_read_can_received_msg+0x42>
                messageFound = 1;
 800583e:	2501      	movs	r5, #1
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8005840:	2d00      	cmp	r5, #0
 8005842:	d0eb      	beq.n	800581c <prv_read_can_received_msg+0x34>
 8005844:	2a00      	cmp	r2, #0
 8005846:	d0e9      	beq.n	800581c <prv_read_can_received_msg+0x34>
 8005848:	6893      	ldr	r3, [r2, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0e6      	beq.n	800581c <prv_read_can_received_msg+0x34>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 800584e:	4669      	mov	r1, sp
 8005850:	6850      	ldr	r0, [r2, #4]
 8005852:	4798      	blx	r3
 8005854:	e7e2      	b.n	800581c <prv_read_can_received_msg+0x34>
 8005856:	bf00      	nop
 8005858:	2000056c 	.word	0x2000056c
 800585c:	20000568 	.word	0x20000568

08005860 <CO_CANsetConfigurationMode>:
    if (CANptr != NULL) {
 8005860:	b120      	cbz	r0, 800586c <CO_CANsetConfigurationMode+0xc>
CO_CANsetConfigurationMode(void* CANptr) {
 8005862:	b508      	push	{r3, lr}
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8005864:	6880      	ldr	r0, [r0, #8]
 8005866:	f001 fed1 	bl	800760c <HAL_CAN_Stop>
}
 800586a:	bd08      	pop	{r3, pc}
 800586c:	4770      	bx	lr

0800586e <CO_CANsetNormalMode>:
    if (CANmodule->CANptr != NULL) {
 800586e:	6803      	ldr	r3, [r0, #0]
 8005870:	b143      	cbz	r3, 8005884 <CO_CANsetNormalMode+0x16>
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8005872:	b510      	push	{r4, lr}
 8005874:	4604      	mov	r4, r0
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8005876:	6898      	ldr	r0, [r3, #8]
 8005878:	f001 fe9a 	bl	80075b0 <HAL_CAN_Start>
 800587c:	b908      	cbnz	r0, 8005882 <CO_CANsetNormalMode+0x14>
            CANmodule->CANnormal = true;
 800587e:	2301      	movs	r3, #1
 8005880:	6163      	str	r3, [r4, #20]
}
 8005882:	bd10      	pop	{r4, pc}
 8005884:	4770      	bx	lr
	...

08005888 <CO_CANmodule_init>:
                  uint16_t txSize, uint16_t CANbitRate) {
 8005888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588a:	b08b      	sub	sp, #44	; 0x2c
 800588c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800588e:	f8bd e044 	ldrh.w	lr, [sp, #68]	; 0x44
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8005892:	2800      	cmp	r0, #0
 8005894:	d05c      	beq.n	8005950 <CO_CANmodule_init+0xc8>
 8005896:	460d      	mov	r5, r1
 8005898:	4604      	mov	r4, r0
 800589a:	2a00      	cmp	r2, #0
 800589c:	d05b      	beq.n	8005956 <CO_CANmodule_init+0xce>
 800589e:	2e00      	cmp	r6, #0
 80058a0:	d05c      	beq.n	800595c <CO_CANmodule_init+0xd4>
    CANmodule->CANptr = CANptr;
 80058a2:	6021      	str	r1, [r4, #0]
    CANModule_local = CANmodule;
 80058a4:	4932      	ldr	r1, [pc, #200]	; (8005970 <CO_CANmodule_init+0xe8>)
 80058a6:	6008      	str	r0, [r1, #0]
    CANmodule->rxArray = rxArray;
 80058a8:	6042      	str	r2, [r0, #4]
    CANmodule->rxSize = rxSize;
 80058aa:	8103      	strh	r3, [r0, #8]
    CANmodule->txArray = txArray;
 80058ac:	60c6      	str	r6, [r0, #12]
    CANmodule->txSize = txSize;
 80058ae:	f8a0 e010 	strh.w	lr, [r0, #16]
    CANmodule->CANerrorStatus = 0;
 80058b2:	2000      	movs	r0, #0
 80058b4:	8260      	strh	r0, [r4, #18]
    CANmodule->CANnormal = false;
 80058b6:	6160      	str	r0, [r4, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80058b8:	61a0      	str	r0, [r4, #24]
    CANmodule->bufferInhibitFlag = false;
 80058ba:	61e0      	str	r0, [r4, #28]
    CANmodule->firstCANtxMessage = true;
 80058bc:	2101      	movs	r1, #1
 80058be:	6221      	str	r1, [r4, #32]
    CANmodule->CANtxCount = 0U;
 80058c0:	84a0      	strh	r0, [r4, #36]	; 0x24
    CANmodule->errOld = 0U;
 80058c2:	62a0      	str	r0, [r4, #40]	; 0x28
    for (uint16_t i = 0U; i < rxSize; i++) {
 80058c4:	e011      	b.n	80058ea <CO_CANmodule_init+0x62>
        rxArray[i].ident = 0U;
 80058c6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80058ca:	ea4f 078c 	mov.w	r7, ip, lsl #2
 80058ce:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80058d2:	2100      	movs	r1, #0
 80058d4:	53d1      	strh	r1, [r2, r7]
        rxArray[i].mask = 0xFFFFU;
 80058d6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80058da:	f8ac 7002 	strh.w	r7, [ip, #2]
        rxArray[i].object = NULL;
 80058de:	f8cc 1004 	str.w	r1, [ip, #4]
        rxArray[i].CANrx_callback = NULL;
 80058e2:	f8cc 1008 	str.w	r1, [ip, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 80058e6:	3001      	adds	r0, #1
 80058e8:	b280      	uxth	r0, r0
 80058ea:	4298      	cmp	r0, r3
 80058ec:	d3eb      	bcc.n	80058c6 <CO_CANmodule_init+0x3e>
    for (uint16_t i = 0U; i < txSize; i++) {
 80058ee:	2300      	movs	r3, #0
 80058f0:	e007      	b.n	8005902 <CO_CANmodule_init+0x7a>
        txArray[i].bufferFull = false;
 80058f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80058f6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80058fa:	2100      	movs	r1, #0
 80058fc:	6111      	str	r1, [r2, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 80058fe:	3301      	adds	r3, #1
 8005900:	b29b      	uxth	r3, r3
 8005902:	4573      	cmp	r3, lr
 8005904:	d3f5      	bcc.n	80058f2 <CO_CANmodule_init+0x6a>
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8005906:	68eb      	ldr	r3, [r5, #12]
 8005908:	4798      	blx	r3
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	4b18      	ldr	r3, [pc, #96]	; (8005974 <CO_CANmodule_init+0xec>)
 8005912:	429a      	cmp	r2, r3
 8005914:	d019      	beq.n	800594a <CO_CANmodule_init+0xc2>
        FilterConfig.FilterBank = 14;
 8005916:	230e      	movs	r3, #14
 8005918:	9305      	str	r3, [sp, #20]
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800591a:	2300      	movs	r3, #0
 800591c:	9306      	str	r3, [sp, #24]
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800591e:	2201      	movs	r2, #1
 8005920:	9207      	str	r2, [sp, #28]
    FilterConfig.FilterIdHigh = 0x0;
 8005922:	9300      	str	r3, [sp, #0]
    FilterConfig.FilterIdLow = 0x0;
 8005924:	9301      	str	r3, [sp, #4]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8005926:	9302      	str	r3, [sp, #8]
    FilterConfig.FilterMaskIdLow = 0x0;
 8005928:	9303      	str	r3, [sp, #12]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800592a:	9304      	str	r3, [sp, #16]
    FilterConfig.FilterActivation = ENABLE;
 800592c:	9208      	str	r2, [sp, #32]
    FilterConfig.SlaveStartFilterBank = 14;
 800592e:	230e      	movs	r3, #14
 8005930:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8005932:	4669      	mov	r1, sp
 8005934:	68a8      	ldr	r0, [r5, #8]
 8005936:	f001 fdb5 	bl	80074a4 <HAL_CAN_ConfigFilter>
 800593a:	b990      	cbnz	r0, 8005962 <CO_CANmodule_init+0xda>
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 800593c:	2113      	movs	r1, #19
 800593e:	68a8      	ldr	r0, [r5, #8]
 8005940:	f001 ffd8 	bl	80078f4 <HAL_CAN_ActivateNotification>
 8005944:	b980      	cbnz	r0, 8005968 <CO_CANmodule_init+0xe0>
}
 8005946:	b00b      	add	sp, #44	; 0x2c
 8005948:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FilterConfig.FilterBank = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	9305      	str	r3, [sp, #20]
 800594e:	e7e4      	b.n	800591a <CO_CANmodule_init+0x92>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	e7f7      	b.n	8005946 <CO_CANmodule_init+0xbe>
 8005956:	f04f 30ff 	mov.w	r0, #4294967295
 800595a:	e7f4      	b.n	8005946 <CO_CANmodule_init+0xbe>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	e7f1      	b.n	8005946 <CO_CANmodule_init+0xbe>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	e7ee      	b.n	8005946 <CO_CANmodule_init+0xbe>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	e7eb      	b.n	8005946 <CO_CANmodule_init+0xbe>
 800596e:	bf00      	nop
 8005970:	20000568 	.word	0x20000568
 8005974:	40006400 	.word	0x40006400

08005978 <CO_CANmodule_disable>:
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8005978:	b130      	cbz	r0, 8005988 <CO_CANmodule_disable+0x10>
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 800597a:	b508      	push	{r3, lr}
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 800597c:	6803      	ldr	r3, [r0, #0]
 800597e:	b113      	cbz	r3, 8005986 <CO_CANmodule_disable+0xe>
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8005980:	6898      	ldr	r0, [r3, #8]
 8005982:	f001 fe43 	bl	800760c <HAL_CAN_Stop>
}
 8005986:	bd08      	pop	{r3, pc}
 8005988:	4770      	bx	lr
	...

0800598c <CO_CANrxBufferInit>:
                   void (*CANrx_callback)(void* object, void* message)) {
 800598c:	b530      	push	{r4, r5, lr}
 800598e:	9c04      	ldr	r4, [sp, #16]
 8005990:	9d05      	ldr	r5, [sp, #20]
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8005992:	b320      	cbz	r0, 80059de <CO_CANrxBufferInit+0x52>
 8005994:	4684      	mov	ip, r0
 8005996:	b32c      	cbz	r4, 80059e4 <CO_CANrxBufferInit+0x58>
 8005998:	b33d      	cbz	r5, 80059ea <CO_CANrxBufferInit+0x5e>
 800599a:	8900      	ldrh	r0, [r0, #8]
 800599c:	4288      	cmp	r0, r1
 800599e:	d927      	bls.n	80059f0 <CO_CANrxBufferInit+0x64>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 80059a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80059a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80059a8:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80059ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        buffer->object = object;
 80059b0:	604c      	str	r4, [r1, #4]
        buffer->CANrx_callback = CANrx_callback;
 80059b2:	608d      	str	r5, [r1, #8]
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 80059b4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80059b8:	9c03      	ldr	r4, [sp, #12]
 80059ba:	b174      	cbz	r4, 80059da <CO_CANrxBufferInit+0x4e>
 80059bc:	4c0f      	ldr	r4, [pc, #60]	; (80059fc <CO_CANrxBufferInit+0x70>)
 80059be:	4322      	orrs	r2, r4
 80059c0:	f820 200e 	strh.w	r2, [r0, lr]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 80059c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059cc:	804b      	strh	r3, [r1, #2]
        if (CANmodule->useCANrxFilters) {
 80059ce:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80059d2:	b183      	cbz	r3, 80059f6 <CO_CANrxBufferInit+0x6a>
            __NOP();
 80059d4:	bf00      	nop
    CO_ReturnError_t ret = CO_ERROR_NO;
 80059d6:	2000      	movs	r0, #0
 80059d8:	e00e      	b.n	80059f8 <CO_CANrxBufferInit+0x6c>
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 80059da:	2400      	movs	r4, #0
 80059dc:	e7ef      	b.n	80059be <CO_CANrxBufferInit+0x32>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80059de:	f04f 30ff 	mov.w	r0, #4294967295
 80059e2:	e009      	b.n	80059f8 <CO_CANrxBufferInit+0x6c>
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	e006      	b.n	80059f8 <CO_CANrxBufferInit+0x6c>
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	e003      	b.n	80059f8 <CO_CANrxBufferInit+0x6c>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e000      	b.n	80059f8 <CO_CANrxBufferInit+0x6c>
    CO_ReturnError_t ret = CO_ERROR_NO;
 80059f6:	2000      	movs	r0, #0
}
 80059f8:	bd30      	pop	{r4, r5, pc}
 80059fa:	bf00      	nop
 80059fc:	ffff8000 	.word	0xffff8000

08005a00 <CO_CANtxBufferInit>:
    if (CANmodule != NULL && index < CANmodule->txSize) {
 8005a00:	4684      	mov	ip, r0
 8005a02:	b1e0      	cbz	r0, 8005a3e <CO_CANtxBufferInit+0x3e>
 8005a04:	8a00      	ldrh	r0, [r0, #16]
 8005a06:	4288      	cmp	r0, r1
 8005a08:	d91a      	bls.n	8005a40 <CO_CANtxBufferInit+0x40>
                   bool_t syncFlag) {
 8005a0a:	b410      	push	{r4}
        buffer = &CANmodule->txArray[index];
 8005a0c:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8005a10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a14:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8005a18:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8005a1c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005a20:	b10b      	cbz	r3, 8005a26 <CO_CANtxBufferInit+0x26>
 8005a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a26:	431a      	orrs	r2, r3
 8005a28:	f844 200c 	str.w	r2, [r4, ip]
        buffer->DLC = noOfBytes;
 8005a2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a30:	7103      	strb	r3, [r0, #4]
        buffer->bufferFull = false;
 8005a32:	2300      	movs	r3, #0
 8005a34:	6103      	str	r3, [r0, #16]
        buffer->syncFlag = syncFlag;
 8005a36:	9b02      	ldr	r3, [sp, #8]
 8005a38:	6143      	str	r3, [r0, #20]
}
 8005a3a:	bc10      	pop	{r4}
 8005a3c:	4770      	bx	lr
 8005a3e:	4770      	bx	lr
    CO_CANtx_t* buffer = NULL;
 8005a40:	2000      	movs	r0, #0
}
 8005a42:	4770      	bx	lr

08005a44 <CO_CANsend>:
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4604      	mov	r4, r0
 8005a48:	460d      	mov	r5, r1
    if (buffer->bufferFull) {
 8005a4a:	690b      	ldr	r3, [r1, #16]
 8005a4c:	b143      	cbz	r3, 8005a60 <CO_CANsend+0x1c>
        if (!CANmodule->firstCANtxMessage) {
 8005a4e:	6a03      	ldr	r3, [r0, #32]
 8005a50:	b9bb      	cbnz	r3, 8005a82 <CO_CANsend+0x3e>
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8005a52:	8a43      	ldrh	r3, [r0, #18]
 8005a54:	f043 0308 	orr.w	r3, r3, #8
 8005a58:	8243      	strh	r3, [r0, #18]
        err = CO_ERROR_TX_OVERFLOW;
 8005a5a:	f06f 0608 	mvn.w	r6, #8
 8005a5e:	e000      	b.n	8005a62 <CO_CANsend+0x1e>
    CO_ReturnError_t err = CO_ERROR_NO;
 8005a60:	2600      	movs	r6, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a62:	f3ef 8310 	mrs	r3, PRIMASK
    CO_LOCK_CAN_SEND(CANmodule);
 8005a66:	62e3      	str	r3, [r4, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8005a68:	b672      	cpsid	i
    if (prv_send_can_message(CANmodule, buffer)) {
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f7ff fe93 	bl	8005798 <prv_send_can_message>
 8005a72:	b148      	cbz	r0, 8005a88 <CO_CANsend+0x44>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8005a74:	696b      	ldr	r3, [r5, #20]
 8005a76:	61e3      	str	r3, [r4, #28]
    CO_UNLOCK_CAN_SEND(CANmodule);
 8005a78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7a:	f383 8810 	msr	PRIMASK, r3
}
 8005a7e:	4630      	mov	r0, r6
 8005a80:	bd70      	pop	{r4, r5, r6, pc}
        err = CO_ERROR_TX_OVERFLOW;
 8005a82:	f06f 0608 	mvn.w	r6, #8
 8005a86:	e7ec      	b.n	8005a62 <CO_CANsend+0x1e>
        buffer->bufferFull = true;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	612b      	str	r3, [r5, #16]
        CANmodule->CANtxCount++;
 8005a8c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3301      	adds	r3, #1
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	84a3      	strh	r3, [r4, #36]	; 0x24
 8005a96:	e7ef      	b.n	8005a78 <CO_CANsend+0x34>

08005a98 <CO_CANclearPendingSyncPDOs>:
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8005a98:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9a:	f3ef 8310 	mrs	r3, PRIMASK
    CO_LOCK_CAN_SEND(CANmodule);
 8005a9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8005aa0:	b672      	cpsid	i
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8005aa2:	69c4      	ldr	r4, [r0, #28]
 8005aa4:	b114      	cbz	r4, 8005aac <CO_CANclearPendingSyncPDOs+0x14>
        CANmodule->bufferInhibitFlag = false;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61c3      	str	r3, [r0, #28]
        tpdoDeleted = 1U;
 8005aaa:	2401      	movs	r4, #1
    if (CANmodule->CANtxCount > 0) {
 8005aac:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b1c3      	cbz	r3, 8005ae4 <CO_CANclearPendingSyncPDOs+0x4c>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8005ab2:	8a03      	ldrh	r3, [r0, #16]
 8005ab4:	e001      	b.n	8005aba <CO_CANclearPendingSyncPDOs+0x22>
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	b19b      	cbz	r3, 8005ae4 <CO_CANclearPendingSyncPDOs+0x4c>
            if (CANmodule->txArray[i].bufferFull) {
 8005abc:	68c2      	ldr	r2, [r0, #12]
 8005abe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005ac2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005ac6:	6911      	ldr	r1, [r2, #16]
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	d0f4      	beq.n	8005ab6 <CO_CANclearPendingSyncPDOs+0x1e>
                if (CANmodule->txArray[i].syncFlag) {
 8005acc:	6951      	ldr	r1, [r2, #20]
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	d0f1      	beq.n	8005ab6 <CO_CANclearPendingSyncPDOs+0x1e>
                    CANmodule->txArray[i].bufferFull = false;
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6111      	str	r1, [r2, #16]
                    CANmodule->CANtxCount--;
 8005ad6:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8005ad8:	b292      	uxth	r2, r2
 8005ada:	3a01      	subs	r2, #1
 8005adc:	b292      	uxth	r2, r2
 8005ade:	8482      	strh	r2, [r0, #36]	; 0x24
                    tpdoDeleted = 2U;
 8005ae0:	2402      	movs	r4, #2
 8005ae2:	e7e8      	b.n	8005ab6 <CO_CANclearPendingSyncPDOs+0x1e>
    CO_UNLOCK_CAN_SEND(CANmodule);
 8005ae4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae6:	f383 8810 	msr	PRIMASK, r3
    if (tpdoDeleted) {
 8005aea:	b11c      	cbz	r4, 8005af4 <CO_CANclearPendingSyncPDOs+0x5c>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8005aec:	8a43      	ldrh	r3, [r0, #18]
 8005aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af2:	8243      	strh	r3, [r0, #18]
}
 8005af4:	bc10      	pop	{r4}
 8005af6:	4770      	bx	lr

08005af8 <CO_CANmodule_process>:
    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8005af8:	6803      	ldr	r3, [r0, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	f002 0107 	and.w	r1, r2, #7
    if (CANmodule->errOld != err) {
 8005b04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b06:	428b      	cmp	r3, r1
 8005b08:	d007      	beq.n	8005b1a <CO_CANmodule_process+0x22>
        uint16_t status = CANmodule->CANerrorStatus;
 8005b0a:	8a43      	ldrh	r3, [r0, #18]
        CANmodule->errOld = err;
 8005b0c:	6281      	str	r1, [r0, #40]	; 0x28
        if (err & CAN_ESR_BOFF) {
 8005b0e:	f012 0f04 	tst.w	r2, #4
 8005b12:	d003      	beq.n	8005b1c <CO_CANmodule_process+0x24>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8005b14:	f043 0304 	orr.w	r3, r3, #4
        CANmodule->CANerrorStatus = status;
 8005b18:	8243      	strh	r3, [r0, #18]
}
 8005b1a:	4770      	bx	lr
            status &= 0xFFFF
 8005b1c:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8005b20:	f023 0303 	bic.w	r3, r3, #3
 8005b24:	b29b      	uxth	r3, r3
            if (err & CAN_ESR_EWGF) {
 8005b26:	f012 0f01 	tst.w	r2, #1
 8005b2a:	d003      	beq.n	8005b34 <CO_CANmodule_process+0x3c>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8005b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b30:	f043 0301 	orr.w	r3, r3, #1
            if (err & CAN_ESR_EPVF) {
 8005b34:	f012 0f02 	tst.w	r2, #2
 8005b38:	d0ee      	beq.n	8005b18 <CO_CANmodule_process+0x20>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8005b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b3e:	f043 0302 	orr.w	r3, r3, #2
 8005b42:	e7e9      	b.n	8005b18 <CO_CANmodule_process+0x20>

08005b44 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8005b44:	b508      	push	{r3, lr}
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8005b46:	2200      	movs	r2, #0
 8005b48:	4611      	mov	r1, r2
 8005b4a:	f7ff fe4d 	bl	80057e8 <prv_read_can_received_msg>
}
 8005b4e:	bd08      	pop	{r3, pc}

08005b50 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8005b50:	b508      	push	{r3, lr}
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2101      	movs	r1, #1
 8005b56:	f7ff fe47 	bl	80057e8 <prv_read_can_received_msg>
}
 8005b5a:	bd08      	pop	{r3, pc}

08005b5c <CO_CANinterrupt_TX>:
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6203      	str	r3, [r0, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8005b60:	61c3      	str	r3, [r0, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8005b62:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	b32b      	cbz	r3, 8005bb4 <CO_CANinterrupt_TX+0x58>
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4606      	mov	r6, r0
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8005b6c:	68c5      	ldr	r5, [r0, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6e:	f3ef 8310 	mrs	r3, PRIMASK
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8005b72:	62c3      	str	r3, [r0, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8005b74:	b672      	cpsid	i
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8005b76:	8a04      	ldrh	r4, [r0, #16]
 8005b78:	e002      	b.n	8005b80 <CO_CANinterrupt_TX+0x24>
 8005b7a:	3c01      	subs	r4, #1
 8005b7c:	b2a4      	uxth	r4, r4
 8005b7e:	3518      	adds	r5, #24
 8005b80:	b194      	cbz	r4, 8005ba8 <CO_CANinterrupt_TX+0x4c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8005b82:	692b      	ldr	r3, [r5, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f8      	beq.n	8005b7a <CO_CANinterrupt_TX+0x1e>
                if (prv_send_can_message(CANmodule, buffer)) {
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff fe04 	bl	8005798 <prv_send_can_message>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d0f2      	beq.n	8005b7a <CO_CANinterrupt_TX+0x1e>
                    buffer->bufferFull = false;
 8005b94:	2300      	movs	r3, #0
 8005b96:	612b      	str	r3, [r5, #16]
                    CANmodule->CANtxCount--;
 8005b98:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	84b3      	strh	r3, [r6, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8005ba2:	696b      	ldr	r3, [r5, #20]
 8005ba4:	61f3      	str	r3, [r6, #28]
 8005ba6:	e7e8      	b.n	8005b7a <CO_CANinterrupt_TX+0x1e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
            CANmodule->CANtxCount = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	84b3      	strh	r3, [r6, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8005bac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bae:	f383 8810 	msr	PRIMASK, r3
    }
}
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8005bb8:	b508      	push	{r3, lr}
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8005bba:	2101      	movs	r1, #1
 8005bbc:	4b02      	ldr	r3, [pc, #8]	; (8005bc8 <HAL_CAN_TxMailbox0CompleteCallback+0x10>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	f7ff ffcc 	bl	8005b5c <CO_CANinterrupt_TX>
}
 8005bc4:	bd08      	pop	{r3, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000568 	.word	0x20000568

08005bcc <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8005bcc:	b508      	push	{r3, lr}
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <HAL_CAN_TxMailbox1CompleteCallback+0x10>)
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	f7ff ffc2 	bl	8005b5c <CO_CANinterrupt_TX>
}
 8005bd8:	bd08      	pop	{r3, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000568 	.word	0x20000568

08005be0 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8005be0:	b508      	push	{r3, lr}
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8005be2:	2101      	movs	r1, #1
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <HAL_CAN_TxMailbox2CompleteCallback+0x10>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	f7ff ffb8 	bl	8005b5c <CO_CANinterrupt_TX>
}
 8005bec:	bd08      	pop	{r3, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000568 	.word	0x20000568
 8005bf4:	00000000 	.word	0x00000000

08005bf8 <HAL_ADCEx_InjectedConvCpltCallback>:

uint8_t bufferIndex = 0;
// Прерывания от АЦП в инжектированные каналы
// Считывается напряжение аккумулятора, выходное напряжение и нагрузка
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(hadc->Instance == ADC1)
 8005bfa:	6802      	ldr	r2, [r0, #0]
 8005bfc:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d000      	beq.n	8005c04 <HAL_ADCEx_InjectedConvCpltCallback+0xc>

		if(sampleCount >= 10){
		   flagADC = 1;
		}
    }
}
 8005c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        adcData[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8005c04:	4d4d      	ldr	r5, [pc, #308]	; (8005d3c <HAL_ADCEx_InjectedConvCpltCallback+0x144>)
 8005c06:	2101      	movs	r1, #1
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f001 fa7f 	bl	800710c <HAL_ADCEx_InjectedGetValue>
 8005c0e:	4c4c      	ldr	r4, [pc, #304]	; (8005d40 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8005c10:	6020      	str	r0, [r4, #0]
        adcData[1] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8005c12:	2102      	movs	r1, #2
 8005c14:	4628      	mov	r0, r5
 8005c16:	f001 fa79 	bl	800710c <HAL_ADCEx_InjectedGetValue>
 8005c1a:	6060      	str	r0, [r4, #4]
        adcData[2] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f001 fa74 	bl	800710c <HAL_ADCEx_InjectedGetValue>
 8005c24:	4605      	mov	r5, r0
 8005c26:	60a0      	str	r0, [r4, #8]
        voltageAKBBuffer[bufferIndex]  = adcData[0];
 8005c28:	6821      	ldr	r1, [r4, #0]
 8005c2a:	4846      	ldr	r0, [pc, #280]	; (8005d44 <HAL_ADCEx_InjectedConvCpltCallback+0x14c>)
 8005c2c:	7803      	ldrb	r3, [r0, #0]
 8005c2e:	4a46      	ldr	r2, [pc, #280]	; (8005d48 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 8005c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        voltageOutBuffer[bufferIndex]  = adcData[1];
 8005c34:	6866      	ldr	r6, [r4, #4]
 8005c36:	4a45      	ldr	r2, [pc, #276]	; (8005d4c <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 8005c38:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
        currentBuffer[bufferIndex]  = adcData[2];
 8005c3c:	4a44      	ldr	r2, [pc, #272]	; (8005d50 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 8005c3e:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
        sampleCount++;
 8005c42:	4a44      	ldr	r2, [pc, #272]	; (8005d54 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 8005c44:	7814      	ldrb	r4, [r2, #0]
 8005c46:	3401      	adds	r4, #1
 8005c48:	b2e4      	uxtb	r4, r4
 8005c4a:	7014      	strb	r4, [r2, #0]
        bufferIndex = (bufferIndex + 1) % NUM_SAMPLES;
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a42      	ldr	r2, [pc, #264]	; (8005d58 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 8005c50:	fb82 1203 	smull	r1, r2, r2, r3
 8005c54:	f002 01fc 	and.w	r1, r2, #252	; 0xfc
 8005c58:	eb01 02a2 	add.w	r2, r1, r2, asr #2
 8005c5c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8005c60:	7003      	strb	r3, [r0, #0]
        for(uint8_t i = 0; i < NUM_SAMPLES; i++){
 8005c62:	2300      	movs	r3, #0
 8005c64:	e016      	b.n	8005c94 <HAL_ADCEx_InjectedConvCpltCallback+0x9c>
        	voltageAKBSum += voltageAKBBuffer[i];
 8005c66:	4a38      	ldr	r2, [pc, #224]	; (8005d48 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 8005c68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005c6c:	493b      	ldr	r1, [pc, #236]	; (8005d5c <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 8005c6e:	8808      	ldrh	r0, [r1, #0]
 8005c70:	4402      	add	r2, r0
 8005c72:	800a      	strh	r2, [r1, #0]
            voltageOutSum += voltageOutBuffer[i];
 8005c74:	4a35      	ldr	r2, [pc, #212]	; (8005d4c <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 8005c76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005c7a:	4939      	ldr	r1, [pc, #228]	; (8005d60 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 8005c7c:	8808      	ldrh	r0, [r1, #0]
 8005c7e:	4402      	add	r2, r0
 8005c80:	800a      	strh	r2, [r1, #0]
            currentSum += currentBuffer[i];
 8005c82:	4a33      	ldr	r2, [pc, #204]	; (8005d50 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 8005c84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005c88:	4936      	ldr	r1, [pc, #216]	; (8005d64 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 8005c8a:	8808      	ldrh	r0, [r1, #0]
 8005c8c:	4402      	add	r2, r0
 8005c8e:	800a      	strh	r2, [r1, #0]
        for(uint8_t i = 0; i < NUM_SAMPLES; i++){
 8005c90:	3301      	adds	r3, #1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	d9e6      	bls.n	8005c66 <HAL_ADCEx_InjectedConvCpltCallback+0x6e>
        voltageAKB = voltageAKBSum / NUM_SAMPLES;
 8005c98:	4f30      	ldr	r7, [pc, #192]	; (8005d5c <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 8005c9a:	8838      	ldrh	r0, [r7, #0]
 8005c9c:	4b32      	ldr	r3, [pc, #200]	; (8005d68 <HAL_ADCEx_InjectedConvCpltCallback+0x170>)
 8005c9e:	fba3 3000 	umull	r3, r0, r3, r0
 8005ca2:	08c0      	lsrs	r0, r0, #3
 8005ca4:	f7fa ff34 	bl	8000b10 <__aeabi_i2f>
 8005ca8:	4b30      	ldr	r3, [pc, #192]	; (8005d6c <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8005caa:	6018      	str	r0, [r3, #0]
        voltageAKBSum = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	803b      	strh	r3, [r7, #0]
        voltageOutSum = 0;
 8005cb0:	4a2b      	ldr	r2, [pc, #172]	; (8005d60 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 8005cb2:	8013      	strh	r3, [r2, #0]
        currentSum = 0;
 8005cb4:	4a2b      	ldr	r2, [pc, #172]	; (8005d64 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 8005cb6:	8013      	strh	r3, [r2, #0]
        voltageOut = adcData[1] * VOLTAGE_REF / ADC_UNITS * COEF_V_OUT;
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7fa fb93 	bl	80003e4 <__aeabi_ui2d>
 8005cbe:	a31a      	add	r3, pc, #104	; (adr r3, 8005d28 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f7fa fc08 	bl	80004d8 <__aeabi_dmul>
 8005cc8:	a319      	add	r3, pc, #100	; (adr r3, 8005d30 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fd2d 	bl	800072c <__aeabi_ddiv>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8005cd6:	f7fa fbff 	bl	80004d8 <__aeabi_dmul>
 8005cda:	f7fa fe0f 	bl	80008fc <__aeabi_d2f>
 8005cde:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <HAL_ADCEx_InjectedConvCpltCallback+0x17c>)
 8005ce0:	6018      	str	r0, [r3, #0]
		current = (adcData[2] * VOLTAGE_REF / ADC_UNITS) * CURRENT_MAX / 3;
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7fa fb7e 	bl	80003e4 <__aeabi_ui2d>
 8005ce8:	a30f      	add	r3, pc, #60	; (adr r3, 8005d28 <HAL_ADCEx_InjectedConvCpltCallback+0x130>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f7fa fbf3 	bl	80004d8 <__aeabi_dmul>
 8005cf2:	a30f      	add	r3, pc, #60	; (adr r3, 8005d30 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f7fa fd18 	bl	800072c <__aeabi_ddiv>
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 8005d00:	f7fa fbea 	bl	80004d8 <__aeabi_dmul>
 8005d04:	2200      	movs	r2, #0
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8005d08:	f7fa fd10 	bl	800072c <__aeabi_ddiv>
 8005d0c:	f7fa fdf6 	bl	80008fc <__aeabi_d2f>
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 8005d12:	6018      	str	r0, [r3, #0]
		if(sampleCount >= 10){
 8005d14:	2c09      	cmp	r4, #9
 8005d16:	f67f af74 	bls.w	8005c02 <HAL_ADCEx_InjectedConvCpltCallback+0xa>
		   flagADC = 1;
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
}
 8005d20:	e76f      	b.n	8005c02 <HAL_ADCEx_InjectedConvCpltCallback+0xa>
 8005d22:	bf00      	nop
 8005d24:	f3af 8000 	nop.w
 8005d28:	66666666 	.word	0x66666666
 8005d2c:	400a6666 	.word	0x400a6666
 8005d30:	00000000 	.word	0x00000000
 8005d34:	40affe00 	.word	0x40affe00
 8005d38:	40012400 	.word	0x40012400
 8005d3c:	200005cc 	.word	0x200005cc
 8005d40:	200005a0 	.word	0x200005a0
 8005d44:	200005ac 	.word	0x200005ac
 8005d48:	20000604 	.word	0x20000604
 8005d4c:	20000620 	.word	0x20000620
 8005d50:	200005b4 	.word	0x200005b4
 8005d54:	200005fc 	.word	0x200005fc
 8005d58:	66666667 	.word	0x66666667
 8005d5c:	20000618 	.word	0x20000618
 8005d60:	20000634 	.word	0x20000634
 8005d64:	200005c8 	.word	0x200005c8
 8005d68:	cccccccd 	.word	0xcccccccd
 8005d6c:	20000600 	.word	0x20000600
 8005d70:	40280000 	.word	0x40280000
 8005d74:	2000061c 	.word	0x2000061c
 8005d78:	40140000 	.word	0x40140000
 8005d7c:	40080000 	.word	0x40080000
 8005d80:	200005b0 	.word	0x200005b0
 8005d84:	200005ca 	.word	0x200005ca

08005d88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005d88:	b500      	push	{lr}
 8005d8a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	9302      	str	r3, [sp, #8]
 8005d92:	9303      	str	r3, [sp, #12]
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	9305      	str	r3, [sp, #20]
 8005d98:	9306      	str	r3, [sp, #24]
 8005d9a:	9307      	str	r3, [sp, #28]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005d9c:	4823      	ldr	r0, [pc, #140]	; (8005e2c <MX_ADC1_Init+0xa4>)
 8005d9e:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <MX_ADC1_Init+0xa8>)
 8005da0:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005da6:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005da8:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005daa:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005dac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005db0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005db2:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005db4:	2301      	movs	r3, #1
 8005db6:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005db8:	f001 f844 	bl	8006e44 <HAL_ADC_Init>
 8005dbc:	bb48      	cbnz	r0, 8005e12 <MX_ADC1_Init+0x8a>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8005dca:	9303      	str	r3, [sp, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005dcc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005dd0:	9307      	str	r3, [sp, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f88d 3019 	strb.w	r3, [sp, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005dd8:	f88d 3018 	strb.w	r3, [sp, #24]
  sConfigInjected.InjectedOffset = 0;
 8005ddc:	9304      	str	r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005dde:	a901      	add	r1, sp, #4
 8005de0:	4812      	ldr	r0, [pc, #72]	; (8005e2c <MX_ADC1_Init+0xa4>)
 8005de2:	f001 f9a5 	bl	8007130 <HAL_ADCEx_InjectedConfigChannel>
 8005de6:	b9b8      	cbnz	r0, 8005e18 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8005de8:	2305      	movs	r3, #5
 8005dea:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8005dec:	2302      	movs	r3, #2
 8005dee:	9302      	str	r3, [sp, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005df0:	a901      	add	r1, sp, #4
 8005df2:	480e      	ldr	r0, [pc, #56]	; (8005e2c <MX_ADC1_Init+0xa4>)
 8005df4:	f001 f99c 	bl	8007130 <HAL_ADCEx_InjectedConfigChannel>
 8005df8:	b988      	cbnz	r0, 8005e1e <MX_ADC1_Init+0x96>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8005dfa:	2306      	movs	r3, #6
 8005dfc:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	9302      	str	r3, [sp, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005e02:	a901      	add	r1, sp, #4
 8005e04:	4809      	ldr	r0, [pc, #36]	; (8005e2c <MX_ADC1_Init+0xa4>)
 8005e06:	f001 f993 	bl	8007130 <HAL_ADCEx_InjectedConfigChannel>
 8005e0a:	b958      	cbnz	r0, 8005e24 <MX_ADC1_Init+0x9c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005e0c:	b009      	add	sp, #36	; 0x24
 8005e0e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005e12:	f000 fad3 	bl	80063bc <Error_Handler>
 8005e16:	e7d2      	b.n	8005dbe <MX_ADC1_Init+0x36>
    Error_Handler();
 8005e18:	f000 fad0 	bl	80063bc <Error_Handler>
 8005e1c:	e7e4      	b.n	8005de8 <MX_ADC1_Init+0x60>
    Error_Handler();
 8005e1e:	f000 facd 	bl	80063bc <Error_Handler>
 8005e22:	e7ea      	b.n	8005dfa <MX_ADC1_Init+0x72>
    Error_Handler();
 8005e24:	f000 faca 	bl	80063bc <Error_Handler>
}
 8005e28:	e7f0      	b.n	8005e0c <MX_ADC1_Init+0x84>
 8005e2a:	bf00      	nop
 8005e2c:	200005cc 	.word	0x200005cc
 8005e30:	40012400 	.word	0x40012400

08005e34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005e34:	b500      	push	{lr}
 8005e36:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8005e42:	6802      	ldr	r2, [r0, #0]
 8005e44:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <HAL_ADC_MspInit+0x68>)
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d002      	beq.n	8005e50 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005e4a:	b007      	add	sp, #28
 8005e4c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e50:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5a:	619a      	str	r2, [r3, #24]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005e62:	9200      	str	r2, [sp, #0]
 8005e64:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e66:	699a      	ldr	r2, [r3, #24]
 8005e68:	f042 0204 	orr.w	r2, r2, #4
 8005e6c:	619a      	str	r2, [r3, #24]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_V_AKB_Pin|ADC_V_OUT_Pin|ADC_I_Pin;
 8005e78:	2370      	movs	r3, #112	; 0x70
 8005e7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e80:	a902      	add	r1, sp, #8
 8005e82:	4807      	ldr	r0, [pc, #28]	; (8005ea0 <HAL_ADC_MspInit+0x6c>)
 8005e84:	f001 fef4 	bl	8007c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	2012      	movs	r0, #18
 8005e8e:	f001 fe83 	bl	8007b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005e92:	2012      	movs	r0, #18
 8005e94:	f001 feb8 	bl	8007c08 <HAL_NVIC_EnableIRQ>
}
 8005e98:	e7d7      	b.n	8005e4a <HAL_ADC_MspInit+0x16>
 8005e9a:	bf00      	nop
 8005e9c:	40012400 	.word	0x40012400
 8005ea0:	40010800 	.word	0x40010800

08005ea4 <HAL_GPIO_EXTI_Callback>:
	// Маска для сброса бита
	static uint16_t maskOff = 0x0;


	// Больше
	if(GPIO_Pin == KEY_P_Pin){
 8005ea4:	2801      	cmp	r0, #1
 8005ea6:	d002      	beq.n	8005eae <HAL_GPIO_EXTI_Callback+0xa>
			GPIOB->ODR &= (maskOn + SHIFT_MASK);
		}
	}

	// Меньше
	if(GPIO_Pin == KEY_M_Pin){
 8005ea8:	2802      	cmp	r0, #2
 8005eaa:	d020      	beq.n	8005eee <HAL_GPIO_EXTI_Callback+0x4a>
			GPIOB->ODR |= --maskOn;
		}


	}
}
 8005eac:	4770      	bx	lr
		buttonFlagVPlus = 1;
 8005eae:	4b20      	ldr	r3, [pc, #128]	; (8005f30 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
		if(maskOn == 0x07){
 8005eb4:	4b1f      	ldr	r3, [pc, #124]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	2b07      	cmp	r3, #7
 8005eba:	d013      	beq.n	8005ee4 <HAL_GPIO_EXTI_Callback+0x40>
		if(maskOn < 0x207){
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	f240 2206 	movw	r2, #518	; 0x206
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d8ef      	bhi.n	8005ea8 <HAL_GPIO_EXTI_Callback+0x4>
			GPIOB->ODR |= ++maskOn;
 8005ec8:	3301      	adds	r3, #1
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	4a19      	ldr	r2, [pc, #100]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005ece:	8013      	strh	r3, [r2, #0]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <HAL_GPIO_EXTI_Callback+0x94>)
 8005ed2:	68d1      	ldr	r1, [r2, #12]
 8005ed4:	4319      	orrs	r1, r3
 8005ed6:	60d1      	str	r1, [r2, #12]
			GPIOB->ODR &= (maskOn + SHIFT_MASK);
 8005ed8:	68d1      	ldr	r1, [r2, #12]
 8005eda:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8005ede:	400b      	ands	r3, r1
 8005ee0:	60d3      	str	r3, [r2, #12]
 8005ee2:	e7e1      	b.n	8005ea8 <HAL_GPIO_EXTI_Callback+0x4>
			maskOn = 0x1FF;
 8005ee4:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	e7e6      	b.n	8005ebc <HAL_GPIO_EXTI_Callback+0x18>
		buttonFlagVMinus = 1;
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <HAL_GPIO_EXTI_Callback+0x98>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= SHIFT_MASK;
 8005ef4:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <HAL_GPIO_EXTI_Callback+0x94>)
 8005ef6:	68d3      	ldr	r3, [r2, #12]
 8005ef8:	f423 7301 	bic.w	r3, r3, #516	; 0x204
 8005efc:	f023 0303 	bic.w	r3, r3, #3
 8005f00:	60d3      	str	r3, [r2, #12]
		if(maskOn == 0x200){
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0a:	d00c      	beq.n	8005f26 <HAL_GPIO_EXTI_Callback+0x82>
		if(maskOn > 0){
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0cb      	beq.n	8005eac <HAL_GPIO_EXTI_Callback+0x8>
			GPIOB->ODR |= --maskOn;
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4a06      	ldr	r2, [pc, #24]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005f1a:	8013      	strh	r3, [r2, #0]
 8005f1c:	4a06      	ldr	r2, [pc, #24]	; (8005f38 <HAL_GPIO_EXTI_Callback+0x94>)
 8005f1e:	68d1      	ldr	r1, [r2, #12]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	60d3      	str	r3, [r2, #12]
}
 8005f24:	e7c2      	b.n	8005eac <HAL_GPIO_EXTI_Callback+0x8>
			maskOn = 0x08;
 8005f26:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_GPIO_EXTI_Callback+0x90>)
 8005f28:	2208      	movs	r2, #8
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e7ee      	b.n	8005f0c <HAL_GPIO_EXTI_Callback+0x68>
 8005f2e:	bf00      	nop
 8005f30:	20000639 	.word	0x20000639
 8005f34:	20000636 	.word	0x20000636
 8005f38:	40010c00 	.word	0x40010c00
 8005f3c:	20000638 	.word	0x20000638

08005f40 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(uint16_t bitrate)
{
 8005f40:	b508      	push	{r3, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <MX_CAN_Init+0x44>)
 8005f44:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <MX_CAN_Init+0x48>)
 8005f46:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2000/bitrate;
 8005f48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f4c:	fb92 f2f0 	sdiv	r2, r2, r0
 8005f50:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005f56:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8005f58:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8005f5c:	6119      	str	r1, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005f5e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8005f62:	6159      	str	r1, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005f64:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005f66:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005f68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	76d9      	strb	r1, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005f6e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8005f70:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f9f0 	bl	8007358 <HAL_CAN_Init>
 8005f78:	b900      	cbnz	r0, 8005f7c <MX_CAN_Init+0x3c>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8005f7a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005f7c:	f000 fa1e 	bl	80063bc <Error_Handler>
}
 8005f80:	e7fb      	b.n	8005f7a <MX_CAN_Init+0x3a>
 8005f82:	bf00      	nop
 8005f84:	2000063c 	.word	0x2000063c
 8005f88:	40006400 	.word	0x40006400

08005f8c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f90:	2300      	movs	r3, #0
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	9304      	str	r3, [sp, #16]
 8005f98:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 8005f9a:	6802      	ldr	r2, [r0, #0]
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <HAL_CAN_MspInit+0x8c>)
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d001      	beq.n	8005fa6 <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005fa2:	b006      	add	sp, #24
 8005fa4:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005fa6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005fb0:	61da      	str	r2, [r3, #28]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8005fb8:	9200      	str	r2, [sp, #0]
 8005fba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	f042 0204 	orr.w	r2, r2, #4
 8005fc2:	619a      	str	r2, [r3, #24]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fd2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd4:	4c11      	ldr	r4, [pc, #68]	; (800601c <HAL_CAN_MspInit+0x90>)
 8005fd6:	a902      	add	r1, sp, #8
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f001 fe49 	bl	8007c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fe2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fec:	a902      	add	r1, sp, #8
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f001 fe3e 	bl	8007c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	2013      	movs	r0, #19
 8005ffa:	f001 fdcd 	bl	8007b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8005ffe:	2013      	movs	r0, #19
 8006000:	f001 fe02 	bl	8007c08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006004:	2200      	movs	r2, #0
 8006006:	4611      	mov	r1, r2
 8006008:	2014      	movs	r0, #20
 800600a:	f001 fdc5 	bl	8007b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800600e:	2014      	movs	r0, #20
 8006010:	f001 fdfa 	bl	8007c08 <HAL_NVIC_EnableIRQ>
}
 8006014:	e7c5      	b.n	8005fa2 <HAL_CAN_MspInit+0x16>
 8006016:	bf00      	nop
 8006018:	40006400 	.word	0x40006400
 800601c:	40010800 	.word	0x40010800

08006020 <ledOff>:


// Отключить светодиод
// 0 - красный
// 1 - зеленый
 void ledOff(uint8_t led){
 8006020:	b508      	push	{r3, lr}
	 switch (led) {
 8006022:	b110      	cbz	r0, 800602a <ledOff+0xa>
 8006024:	2801      	cmp	r0, #1
 8006026:	d007      	beq.n	8006038 <ledOff+0x18>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
	}
}
 8006028:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800602a:	2200      	movs	r2, #0
 800602c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006030:	4805      	ldr	r0, [pc, #20]	; (8006048 <ledOff+0x28>)
 8006032:	f001 ff36 	bl	8007ea2 <HAL_GPIO_WritePin>
			break;
 8006036:	e7f7      	b.n	8006028 <ledOff+0x8>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8006038:	2200      	movs	r2, #0
 800603a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800603e:	4802      	ldr	r0, [pc, #8]	; (8006048 <ledOff+0x28>)
 8006040:	f001 ff2f 	bl	8007ea2 <HAL_GPIO_WritePin>
}
 8006044:	e7f0      	b.n	8006028 <ledOff+0x8>
 8006046:	bf00      	nop
 8006048:	40011000 	.word	0x40011000

0800604c <ledOn>:

 // Включить светодиод
 // 0 - красный
 // 1 - зеленый
 void ledOn(uint8_t led){
 800604c:	b508      	push	{r3, lr}
	 switch (led) {
 800604e:	b110      	cbz	r0, 8006056 <ledOn+0xa>
 8006050:	2801      	cmp	r0, #1
 8006052:	d007      	beq.n	8006064 <ledOn+0x18>
	 			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
	 			break;
	 		default:
	 			break;
	 }
 }
 8006054:	bd08      	pop	{r3, pc}
	 			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8006056:	2201      	movs	r2, #1
 8006058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800605c:	4805      	ldr	r0, [pc, #20]	; (8006074 <ledOn+0x28>)
 800605e:	f001 ff20 	bl	8007ea2 <HAL_GPIO_WritePin>
	 			break;
 8006062:	e7f7      	b.n	8006054 <ledOn+0x8>
	 			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8006064:	2201      	movs	r2, #1
 8006066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800606a:	4802      	ldr	r0, [pc, #8]	; (8006074 <ledOn+0x28>)
 800606c:	f001 ff19 	bl	8007ea2 <HAL_GPIO_WritePin>
 }
 8006070:	e7f0      	b.n	8006054 <ledOn+0x8>
 8006072:	bf00      	nop
 8006074:	40011000 	.word	0x40011000

08006078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800607c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800607e:	2400      	movs	r4, #0
 8006080:	9404      	str	r4, [sp, #16]
 8006082:	9405      	str	r4, [sp, #20]
 8006084:	9406      	str	r4, [sp, #24]
 8006086:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006088:	4b3f      	ldr	r3, [pc, #252]	; (8006188 <MX_GPIO_Init+0x110>)
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	f042 0210 	orr.w	r2, r2, #16
 8006090:	619a      	str	r2, [r3, #24]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	f002 0210 	and.w	r2, r2, #16
 8006098:	9200      	str	r2, [sp, #0]
 800609a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	f042 0220 	orr.w	r2, r2, #32
 80060a2:	619a      	str	r2, [r3, #24]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	f002 0220 	and.w	r2, r2, #32
 80060aa:	9201      	str	r2, [sp, #4]
 80060ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	f042 0204 	orr.w	r2, r2, #4
 80060b4:	619a      	str	r2, [r3, #24]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	f002 0204 	and.w	r2, r2, #4
 80060bc:	9202      	str	r2, [sp, #8]
 80060be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	619a      	str	r2, [r3, #24]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	9303      	str	r3, [sp, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80060d2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800618c <MX_GPIO_Init+0x114>
 80060d6:	4622      	mov	r2, r4
 80060d8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80060dc:	4648      	mov	r0, r9
 80060de:	f001 fee0 	bl	8007ea2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SP1_Pin|SP2_Pin|SP3_Pin|ON_OFF_Pin
 80060e2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006190 <MX_GPIO_Init+0x118>
 80060e6:	4622      	mov	r2, r4
 80060e8:	f241 2127 	movw	r1, #4647	; 0x1227
 80060ec:	4640      	mov	r0, r8
 80060ee:	f001 fed8 	bl	8007ea2 <HAL_GPIO_WritePin>
                          |I2C_WP_Pin|SP4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART1_LATCH_Pin|TERM_RESIST_Pin, GPIO_PIN_RESET);
 80060f2:	4d28      	ldr	r5, [pc, #160]	; (8006194 <MX_GPIO_Init+0x11c>)
 80060f4:	4622      	mov	r2, r4
 80060f6:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80060fa:	4628      	mov	r0, r5
 80060fc:	f001 fed1 	bl	8007ea2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8006100:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006104:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006106:	2701      	movs	r7, #1
 8006108:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800610c:	2602      	movs	r6, #2
 800610e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006110:	a904      	add	r1, sp, #16
 8006112:	4648      	mov	r0, r9
 8006114:	f001 fdac 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_P_Pin|KEY_M_Pin;
 8006118:	2303      	movs	r3, #3
 800611a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800611c:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <MX_GPIO_Init+0x120>)
 800611e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006120:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006122:	a904      	add	r1, sp, #16
 8006124:	4628      	mov	r0, r5
 8006126:	f001 fda3 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INIT_Pin|PWR_Pin;
 800612a:	230c      	movs	r3, #12
 800612c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800612e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006132:	a904      	add	r1, sp, #16
 8006134:	4628      	mov	r0, r5
 8006136:	f001 fd9b 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SP1_Pin|SP2_Pin|SP3_Pin|ON_OFF_Pin
 800613a:	f241 2327 	movw	r3, #4647	; 0x1227
 800613e:	9304      	str	r3, [sp, #16]
                          |I2C_WP_Pin|SP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006140:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006142:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006144:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006146:	a904      	add	r1, sp, #16
 8006148:	4640      	mov	r0, r8
 800614a:	f001 fd91 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART1_LATCH_Pin|TERM_RESIST_Pin;
 800614e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8006152:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006154:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006156:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006158:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800615a:	a904      	add	r1, sp, #16
 800615c:	4628      	mov	r0, r5
 800615e:	f001 fd87 	bl	8007c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006162:	4622      	mov	r2, r4
 8006164:	4621      	mov	r1, r4
 8006166:	2006      	movs	r0, #6
 8006168:	f001 fd16 	bl	8007b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800616c:	2006      	movs	r0, #6
 800616e:	f001 fd4b 	bl	8007c08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8006172:	4622      	mov	r2, r4
 8006174:	4621      	mov	r1, r4
 8006176:	2007      	movs	r0, #7
 8006178:	f001 fd0e 	bl	8007b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800617c:	2007      	movs	r0, #7
 800617e:	f001 fd43 	bl	8007c08 <HAL_NVIC_EnableIRQ>

}
 8006182:	b009      	add	sp, #36	; 0x24
 8006184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006188:	40021000 	.word	0x40021000
 800618c:	40011000 	.word	0x40011000
 8006190:	40010c00 	.word	0x40010c00
 8006194:	40010800 	.word	0x40010800
 8006198:	10110000 	.word	0x10110000

0800619c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800619c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800619e:	480b      	ldr	r0, [pc, #44]	; (80061cc <MX_I2C1_Init+0x30>)
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <MX_I2C1_Init+0x34>)
 80061a2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <MX_I2C1_Init+0x38>)
 80061a6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80061a8:	2300      	movs	r3, #0
 80061aa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80061ac:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061b2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061b4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80061b6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061b8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061ba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80061bc:	f002 f910 	bl	80083e0 <HAL_I2C_Init>
 80061c0:	b900      	cbnz	r0, 80061c4 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80061c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80061c4:	f000 f8fa 	bl	80063bc <Error_Handler>
}
 80061c8:	e7fb      	b.n	80061c2 <MX_I2C1_Init+0x26>
 80061ca:	bf00      	nop
 80061cc:	20000664 	.word	0x20000664
 80061d0:	40005400 	.word	0x40005400
 80061d4:	000186a0 	.word	0x000186a0

080061d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80061d8:	b510      	push	{r4, lr}
 80061da:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061dc:	2300      	movs	r3, #0
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	9303      	str	r3, [sp, #12]
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 80061e6:	6802      	ldr	r2, [r0, #0]
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <HAL_I2C_MspInit+0x58>)
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d001      	beq.n	80061f2 <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80061ee:	b006      	add	sp, #24
 80061f0:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f2:	4c10      	ldr	r4, [pc, #64]	; (8006234 <HAL_I2C_MspInit+0x5c>)
 80061f4:	69a3      	ldr	r3, [r4, #24]
 80061f6:	f043 0308 	orr.w	r3, r3, #8
 80061fa:	61a3      	str	r3, [r4, #24]
 80061fc:	69a3      	ldr	r3, [r4, #24]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006206:	23c0      	movs	r3, #192	; 0xc0
 8006208:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800620a:	2312      	movs	r3, #18
 800620c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800620e:	2303      	movs	r3, #3
 8006210:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006212:	a902      	add	r1, sp, #8
 8006214:	4808      	ldr	r0, [pc, #32]	; (8006238 <HAL_I2C_MspInit+0x60>)
 8006216:	f001 fd2b 	bl	8007c70 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800621a:	69e3      	ldr	r3, [r4, #28]
 800621c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006220:	61e3      	str	r3, [r4, #28]
 8006222:	69e3      	ldr	r3, [r4, #28]
 8006224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	9b01      	ldr	r3, [sp, #4]
}
 800622c:	e7df      	b.n	80061ee <HAL_I2C_MspInit+0x16>
 800622e:	bf00      	nop
 8006230:	40005400 	.word	0x40005400
 8006234:	40021000 	.word	0x40021000
 8006238:	40010c00 	.word	0x40010c00

0800623c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Прерывания от таймеров
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800623c:	b508      	push	{r3, lr}

  // Прерывания для CANOpen
  if (htim == canopenNodeSTM32->timerHandle) {
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4283      	cmp	r3, r0
 8006246:	d000      	beq.n	800624a <HAL_TIM_PeriodElapsedCallback+0xe>
      canopen_app_interrupt();
  }
}
 8006248:	bd08      	pop	{r3, pc}
      canopen_app_interrupt();
 800624a:	f7ff fa77 	bl	800573c <canopen_app_interrupt>
}
 800624e:	e7fb      	b.n	8006248 <HAL_TIM_PeriodElapsedCallback+0xc>
 8006250:	2000051c 	.word	0x2000051c

08006254 <readIDAndBitrate>:

void readIDAndBitrate(uint8_t* id, uint16_t* bitRate){
 8006254:	b530      	push	{r4, r5, lr}
 8006256:	b087      	sub	sp, #28
 8006258:	4605      	mov	r5, r0
 800625a:	460c      	mov	r4, r1

	uint8_t data[3] = {0};
 800625c:	4b15      	ldr	r3, [pc, #84]	; (80062b4 <readIDAndBitrate+0x60>)
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006264:	2300      	movs	r3, #0
 8006266:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_GPIO_WritePin(I2C_WP_GPIO_Port, I2C_WP_Pin, GPIO_PIN_SET);
 800626a:	2201      	movs	r2, #1
 800626c:	2120      	movs	r1, #32
 800626e:	4812      	ldr	r0, [pc, #72]	; (80062b8 <readIDAndBitrate+0x64>)
 8006270:	f001 fe17 	bl	8007ea2 <HAL_GPIO_WritePin>
	while (HAL_I2C_IsDeviceReady(&hi2c1, I2C1_DEVICE_ADDRESS, 3, 5)!= HAL_OK){}
 8006274:	2305      	movs	r3, #5
 8006276:	2203      	movs	r2, #3
 8006278:	21a6      	movs	r1, #166	; 0xa6
 800627a:	4810      	ldr	r0, [pc, #64]	; (80062bc <readIDAndBitrate+0x68>)
 800627c:	f002 fbe4 	bl	8008a48 <HAL_I2C_IsDeviceReady>
 8006280:	2800      	cmp	r0, #0
 8006282:	d1f7      	bne.n	8006274 <readIDAndBitrate+0x20>
	HAL_I2C_Mem_Read(&hi2c1, I2C1_DEVICE_ADDRESS, 0x0, I2C_MEMADD_SIZE_8BIT, data, 3, 20);
 8006284:	2314      	movs	r3, #20
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	2303      	movs	r3, #3
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	ab05      	add	r3, sp, #20
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2301      	movs	r3, #1
 8006292:	2200      	movs	r2, #0
 8006294:	21a6      	movs	r1, #166	; 0xa6
 8006296:	4809      	ldr	r0, [pc, #36]	; (80062bc <readIDAndBitrate+0x68>)
 8006298:	f002 fa32 	bl	8008700 <HAL_I2C_Mem_Read>

	*id = data[0];
 800629c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80062a0:	702b      	strb	r3, [r5, #0]
	*bitRate = ((data[2] << 8) | data[1]);
 80062a2:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80062a6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80062aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062ae:	8023      	strh	r3, [r4, #0]

}
 80062b0:	b007      	add	sp, #28
 80062b2:	bd30      	pop	{r4, r5, pc}
 80062b4:	0800aee0 	.word	0x0800aee0
 80062b8:	40010c00 	.word	0x40010c00
 80062bc:	20000664 	.word	0x20000664

080062c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062c0:	b530      	push	{r4, r5, lr}
 80062c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062c4:	2228      	movs	r2, #40	; 0x28
 80062c6:	2100      	movs	r1, #0
 80062c8:	eb0d 0002 	add.w	r0, sp, r2
 80062cc:	f003 ff8a 	bl	800a1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062d0:	2400      	movs	r4, #0
 80062d2:	9405      	str	r4, [sp, #20]
 80062d4:	9406      	str	r4, [sp, #24]
 80062d6:	9407      	str	r4, [sp, #28]
 80062d8:	9408      	str	r4, [sp, #32]
 80062da:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062dc:	9401      	str	r4, [sp, #4]
 80062de:	9402      	str	r4, [sp, #8]
 80062e0:	9403      	str	r4, [sp, #12]
 80062e2:	9404      	str	r4, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80062e4:	2201      	movs	r2, #1
 80062e6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80062e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062ec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062ee:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062f0:	2502      	movs	r5, #2
 80062f2:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80062f4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80062f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80062fa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062fc:	a80a      	add	r0, sp, #40	; 0x28
 80062fe:	f002 fc83 	bl	8008c08 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006302:	230f      	movs	r3, #15
 8006304:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006306:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006308:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800630a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800630e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006310:	9409      	str	r4, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006312:	4629      	mov	r1, r5
 8006314:	a805      	add	r0, sp, #20
 8006316:	f002 fea9 	bl	800906c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800631a:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800631c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006320:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006322:	a801      	add	r0, sp, #4
 8006324:	f002 ff7e 	bl	8009224 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8006328:	b015      	add	sp, #84	; 0x54
 800632a:	bd30      	pop	{r4, r5, pc}

0800632c <main>:
{
 800632c:	b500      	push	{lr}
 800632e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8006330:	f000 fc5c 	bl	8006bec <HAL_Init>
  SystemClock_Config();
 8006334:	f7ff ffc4 	bl	80062c0 <SystemClock_Config>
  MX_GPIO_Init();
 8006338:	f7ff fe9e 	bl	8006078 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800633c:	f000 fa5c 	bl	80067f8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8006340:	f7ff fd22 	bl	8005d88 <MX_ADC1_Init>
  MX_I2C1_Init();
 8006344:	f7ff ff2a 	bl	800619c <MX_I2C1_Init>
  MX_TIM3_Init();
 8006348:	f000 f9e4 	bl	8006714 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800634c:	f000 fa3a 	bl	80067c4 <MX_USART1_UART_Init>
  uint8_t nodeID = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	f88d 301f 	strb.w	r3, [sp, #31]
  uint16_t baudrate = 0;
 8006356:	f8ad 301c 	strh.w	r3, [sp, #28]
  readIDAndBitrate(&nodeID, &baudrate);
 800635a:	a907      	add	r1, sp, #28
 800635c:	f10d 001f 	add.w	r0, sp, #31
 8006360:	f7ff ff78 	bl	8006254 <readIDAndBitrate>
  if(nodeID == 0xFF){
 8006364:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	d01b      	beq.n	80063a4 <main+0x78>
  if(baudrate == 0xFFFF){
 800636c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006374:	429a      	cmp	r2, r3
 8006376:	d019      	beq.n	80063ac <main+0x80>
  MX_CAN_Init(baudrate);
 8006378:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800637c:	f7ff fde0 	bl	8005f40 <MX_CAN_Init>
  canOpenNodeSTM32.CANHandle = &hcan;
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <main+0x88>)
 8006382:	9303      	str	r3, [sp, #12]
  canOpenNodeSTM32.timerHandle = &htim3;
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <main+0x8c>)
 8006386:	9302      	str	r3, [sp, #8]
  canOpenNodeSTM32.desiredNodeID = nodeID;
 8006388:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800638c:	f88d 3004 	strb.w	r3, [sp, #4]
  canOpenNodeSTM32.baudrate = baudrate;
 8006390:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006394:	f8ad 3006 	strh.w	r3, [sp, #6]
  canopen_app_init(&canOpenNodeSTM32);
 8006398:	a801      	add	r0, sp, #4
 800639a:	f7ff f933 	bl	8005604 <canopen_app_init>
  mainCPP();
 800639e:	f000 f87d 	bl	800649c <mainCPP>
  while (1)
 80063a2:	e7fe      	b.n	80063a2 <main+0x76>
	  nodeID = 0x1;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f88d 301f 	strb.w	r3, [sp, #31]
 80063aa:	e7df      	b.n	800636c <main+0x40>
	  baudrate = 125;
 80063ac:	237d      	movs	r3, #125	; 0x7d
 80063ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80063b2:	e7e1      	b.n	8006378 <main+0x4c>
 80063b4:	2000063c 	.word	0x2000063c
 80063b8:	200006cc 	.word	0x200006cc

080063bc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80063bc:	4770      	bx	lr
	...

080063c0 <checkAKB>:

	}

}

void checkAKB(){
 80063c0:	b510      	push	{r4, lr}
	GPIO_PinState pwrPinState = HAL_GPIO_ReadPin(PWR_GPIO_Port, PWR_Pin);
 80063c2:	2108      	movs	r1, #8
 80063c4:	480d      	ldr	r0, [pc, #52]	; (80063fc <checkAKB+0x3c>)
 80063c6:	f001 fd65 	bl	8007e94 <HAL_GPIO_ReadPin>

	// Светодиод "Аккумулятор" выключен, когда питание от сети
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, (GPIO_PinState)(!pwrPinState));
 80063ca:	4604      	mov	r4, r0
 80063cc:	fab0 f280 	clz	r2, r0
 80063d0:	0952      	lsrs	r2, r2, #5
 80063d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063d6:	480a      	ldr	r0, [pc, #40]	; (8006400 <checkAKB+0x40>)
 80063d8:	f001 fd63 	bl	8007ea2 <HAL_GPIO_WritePin>

	if(!pwrPinState && OD_PERSIST_COMM.x3F01_voltageAKB <= VOLTAGE_AKB_MIN){
 80063dc:	b934      	cbnz	r4, 80063ec <checkAKB+0x2c>
 80063de:	4909      	ldr	r1, [pc, #36]	; (8006404 <checkAKB+0x44>)
 80063e0:	4b09      	ldr	r3, [pc, #36]	; (8006408 <checkAKB+0x48>)
 80063e2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80063e6:	f7fa fd8f 	bl	8000f08 <__aeabi_fcmple>
 80063ea:	b900      	cbnz	r0, 80063ee <checkAKB+0x2e>
		HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
	}

}
 80063ec:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 80063ee:	2200      	movs	r2, #0
 80063f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80063f4:	4805      	ldr	r0, [pc, #20]	; (800640c <checkAKB+0x4c>)
 80063f6:	f001 fd54 	bl	8007ea2 <HAL_GPIO_WritePin>
}
 80063fa:	e7f7      	b.n	80063ec <checkAKB+0x2c>
 80063fc:	40010800 	.word	0x40010800
 8006400:	40011000 	.word	0x40011000
 8006404:	41300000 	.word	0x41300000
 8006408:	20000230 	.word	0x20000230
 800640c:	40010c00 	.word	0x40010c00

08006410 <calculateVoltage>:


float calculateVoltage(float coef){
 8006410:	b508      	push	{r3, lr}
 8006412:	4601      	mov	r1, r0
	float V;
	V = voltageOut * coef;
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <calculateVoltage+0x10>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	f7fa fbce 	bl	8000bb8 <__aeabi_fmul>

	return V;
}
 800641c:	bd08      	pop	{r3, pc}
 800641e:	bf00      	nop
 8006420:	2000061c 	.word	0x2000061c

08006424 <DS18B20Init>:
    	calibImax = OD_PERSIST_COMM.x2410_calibratonImax;
    	coefImax = calibImin/(current - coefImax);
    }
}

void DS18B20Init(DS18B20 *temperatureSensor){
 8006424:	b510      	push	{r4, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	4604      	mov	r4, r0
	  DS18B20_Init(temperatureSensor, &huart3);
 800642a:	4910      	ldr	r1, [pc, #64]	; (800646c <DS18B20Init+0x48>)
 800642c:	f000 faec 	bl	8006a08 <DS18B20_Init>

	  DS18B20_InitializationCommand(temperatureSensor);
 8006430:	4620      	mov	r0, r4
 8006432:	f000 faef 	bl	8006a14 <DS18B20_InitializationCommand>
	  DS18B20_ReadRom(temperatureSensor);
 8006436:	4620      	mov	r0, r4
 8006438:	f000 fafe 	bl	8006a38 <DS18B20_ReadRom>
	  DS18B20_ReadScratchpad(temperatureSensor);
 800643c:	4620      	mov	r0, r4
 800643e:	f000 fb15 	bl	8006a6c <DS18B20_ReadScratchpad>

	  uint8_t settings[3];
	  settings[0] = temperatureSensor->temperatureLimitHigh;
 8006442:	7be3      	ldrb	r3, [r4, #15]
 8006444:	f88d 3004 	strb.w	r3, [sp, #4]
	  settings[1] = temperatureSensor->temperatureLimitLow;
 8006448:	7ba3      	ldrb	r3, [r4, #14]
 800644a:	f88d 3005 	strb.w	r3, [sp, #5]
	  settings[2] = DS18B20_12_BITS_CONFIG;
 800644e:	237f      	movs	r3, #127	; 0x7f
 8006450:	f88d 3006 	strb.w	r3, [sp, #6]

	  DS18B20_InitializationCommand(temperatureSensor);
 8006454:	4620      	mov	r0, r4
 8006456:	f000 fadd 	bl	8006a14 <DS18B20_InitializationCommand>
	  DS18B20_SkipRom(temperatureSensor);
 800645a:	4620      	mov	r0, r4
 800645c:	f000 fb60 	bl	8006b20 <DS18B20_SkipRom>
	  DS18B20_WriteScratchpad(temperatureSensor, settings);
 8006460:	a901      	add	r1, sp, #4
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fb4a 	bl	8006afc <DS18B20_WriteScratchpad>
}
 8006468:	b002      	add	sp, #8
 800646a:	bd10      	pop	{r4, pc}
 800646c:	2000075c 	.word	0x2000075c

08006470 <DS18B20Read>:

void DS18B20Read(DS18B20 *temperatureSensor){
 8006470:	b510      	push	{r4, lr}
 8006472:	4604      	mov	r4, r0
	DS18B20_InitializationCommand(temperatureSensor);
 8006474:	f000 face 	bl	8006a14 <DS18B20_InitializationCommand>
    DS18B20_SkipRom(temperatureSensor);
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fb51 	bl	8006b20 <DS18B20_SkipRom>
    DS18B20_ConvertT(temperatureSensor, DS18B20_DATA);
 800647e:	2101      	movs	r1, #1
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fb5b 	bl	8006b3c <DS18B20_ConvertT>

    DS18B20_InitializationCommand(temperatureSensor);
 8006486:	4620      	mov	r0, r4
 8006488:	f000 fac4 	bl	8006a14 <DS18B20_InitializationCommand>
    DS18B20_SkipRom(temperatureSensor);
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fb47 	bl	8006b20 <DS18B20_SkipRom>
    DS18B20_ReadScratchpad(temperatureSensor);
 8006492:	4620      	mov	r0, r4
 8006494:	f000 faea 	bl	8006a6c <DS18B20_ReadScratchpad>
}
 8006498:	bd10      	pop	{r4, pc}
	...

0800649c <mainCPP>:
void mainCPP(void){
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	b086      	sub	sp, #24
	  DS18B20Init(&temperatureSensor);
 80064a0:	4668      	mov	r0, sp
 80064a2:	f7ff ffbf 	bl	8006424 <DS18B20Init>
	  HAL_ADCEx_Calibration_Start(&hadc1);
 80064a6:	4c3b      	ldr	r4, [pc, #236]	; (8006594 <mainCPP+0xf8>)
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fd4f 	bl	8006f4c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fdcc 	bl	800704c <HAL_ADCEx_InjectedStart_IT>
	HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 80064b4:	4c38      	ldr	r4, [pc, #224]	; (8006598 <mainCPP+0xfc>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064bc:	4620      	mov	r0, r4
 80064be:	f001 fcf0 	bl	8007ea2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SP1_GPIO_Port, SP1_Pin | SP2_Pin | SP3_Pin | SP4_Pin, GPIO_PIN_RESET);
 80064c2:	2200      	movs	r2, #0
 80064c4:	f240 2107 	movw	r1, #519	; 0x207
 80064c8:	4620      	mov	r0, r4
 80064ca:	f001 fcea 	bl	8007ea2 <HAL_GPIO_WritePin>
    calibV = 0.0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	4a32      	ldr	r2, [pc, #200]	; (800659c <mainCPP+0x100>)
 80064d2:	6013      	str	r3, [r2, #0]
    calibImin = 0.0;
 80064d4:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <mainCPP+0x104>)
 80064d6:	6013      	str	r3, [r2, #0]
    calibImax = 0.0;
 80064d8:	4a32      	ldr	r2, [pc, #200]	; (80065a4 <mainCPP+0x108>)
 80064da:	6013      	str	r3, [r2, #0]
	bool errorOverload = 0;
 80064dc:	2600      	movs	r6, #0
 80064de:	e011      	b.n	8006504 <mainCPP+0x68>
			HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_RESET);
 80064e0:	2200      	movs	r2, #0
 80064e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064e6:	482c      	ldr	r0, [pc, #176]	; (8006598 <mainCPP+0xfc>)
 80064e8:	f001 fcdb 	bl	8007ea2 <HAL_GPIO_WritePin>
			ledOn(0);
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7ff fdad 	bl	800604c <ledOn>
			errorOverload = 1;
 80064f2:	2601      	movs	r6, #1
 80064f4:	e034      	b.n	8006560 <mainCPP+0xc4>
	    OD_PERSIST_COMM.x3F01_voltageAKB = voltageAKB;
 80064f6:	4b2c      	ldr	r3, [pc, #176]	; (80065a8 <mainCPP+0x10c>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <mainCPP+0x110>)
 80064fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	    checkAKB();
 8006500:	f7ff ff5e 	bl	80063c0 <checkAKB>
	  	canopen_app_process();
 8006504:	f7ff f8d0 	bl	80056a8 <canopen_app_process>
	  	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8006508:	4822      	ldr	r0, [pc, #136]	; (8006594 <mainCPP+0xf8>)
 800650a:	f000 fd9f 	bl	800704c <HAL_ADCEx_InjectedStart_IT>
		DS18B20Read(&temperatureSensor);
 800650e:	4668      	mov	r0, sp
 8006510:	f7ff ffae 	bl	8006470 <DS18B20Read>
	    OD_PERSIST_COMM.x3F00_temperature = (int16_t)temperatureSensor.temperature;
 8006514:	9805      	ldr	r0, [sp, #20]
 8006516:	f7fa fd15 	bl	8000f44 <__aeabi_f2iz>
 800651a:	4c24      	ldr	r4, [pc, #144]	; (80065ac <mainCPP+0x110>)
 800651c:	f8a4 0204 	strh.w	r0, [r4, #516]	; 0x204
	    bool resistor = OD_PERSIST_COMM.x5000_resistor;
 8006520:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
	    HAL_GPIO_WritePin(TERM_RESIST_GPIO_Port, TERM_RESIST_Pin, (GPIO_PinState)resistor);
 8006524:	3a00      	subs	r2, #0
 8006526:	bf18      	it	ne
 8006528:	2201      	movne	r2, #1
 800652a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800652e:	4820      	ldr	r0, [pc, #128]	; (80065b0 <mainCPP+0x114>)
 8006530:	f001 fcb7 	bl	8007ea2 <HAL_GPIO_WritePin>
	    float V = calculateVoltage(coefV);
 8006534:	4b1f      	ldr	r3, [pc, #124]	; (80065b4 <mainCPP+0x118>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	f7ff ff6a 	bl	8006410 <calculateVoltage>
	    OD_PERSIST_COMM.x3F02_voltageOut = V;
 800653c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
	    OD_PERSIST_COMM.x3F03_current = current;
 8006540:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <mainCPP+0x11c>)
 8006542:	681d      	ldr	r5, [r3, #0]
 8006544:	f8c4 5210 	str.w	r5, [r4, #528]	; 0x210
		if((temperatureSensor.temperature > TEMP_MAX || current > CURRENT_MAX) && !errorOverload){
 8006548:	491c      	ldr	r1, [pc, #112]	; (80065bc <mainCPP+0x120>)
 800654a:	9805      	ldr	r0, [sp, #20]
 800654c:	f7fa fcf0 	bl	8000f30 <__aeabi_fcmpgt>
 8006550:	b920      	cbnz	r0, 800655c <mainCPP+0xc0>
 8006552:	491b      	ldr	r1, [pc, #108]	; (80065c0 <mainCPP+0x124>)
 8006554:	4628      	mov	r0, r5
 8006556:	f7fa fceb 	bl	8000f30 <__aeabi_fcmpgt>
 800655a:	b108      	cbz	r0, 8006560 <mainCPP+0xc4>
 800655c:	2e00      	cmp	r6, #0
 800655e:	d0bf      	beq.n	80064e0 <mainCPP+0x44>
		if (temperatureSensor.temperature <= TEMP_MAX && current <= CURRENT_MAX && errorOverload) {
 8006560:	4916      	ldr	r1, [pc, #88]	; (80065bc <mainCPP+0x120>)
 8006562:	9805      	ldr	r0, [sp, #20]
 8006564:	f7fa fcd0 	bl	8000f08 <__aeabi_fcmple>
 8006568:	2800      	cmp	r0, #0
 800656a:	d0c4      	beq.n	80064f6 <mainCPP+0x5a>
 800656c:	4914      	ldr	r1, [pc, #80]	; (80065c0 <mainCPP+0x124>)
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <mainCPP+0x11c>)
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	f7fa fcc9 	bl	8000f08 <__aeabi_fcmple>
 8006576:	2800      	cmp	r0, #0
 8006578:	d0bd      	beq.n	80064f6 <mainCPP+0x5a>
 800657a:	2e00      	cmp	r6, #0
 800657c:	d0bb      	beq.n	80064f6 <mainCPP+0x5a>
			HAL_GPIO_WritePin(ON_OFF_GPIO_Port, ON_OFF_Pin, GPIO_PIN_SET);
 800657e:	2201      	movs	r2, #1
 8006580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006584:	4804      	ldr	r0, [pc, #16]	; (8006598 <mainCPP+0xfc>)
 8006586:	f001 fc8c 	bl	8007ea2 <HAL_GPIO_WritePin>
			ledOff(0);
 800658a:	2000      	movs	r0, #0
 800658c:	f7ff fd48 	bl	8006020 <ledOff>
			errorOverload = 0;
 8006590:	2600      	movs	r6, #0
 8006592:	e7b0      	b.n	80064f6 <mainCPP+0x5a>
 8006594:	200005cc 	.word	0x200005cc
 8006598:	40010c00 	.word	0x40010c00
 800659c:	200006c0 	.word	0x200006c0
 80065a0:	200006bc 	.word	0x200006bc
 80065a4:	200006b8 	.word	0x200006b8
 80065a8:	20000600 	.word	0x20000600
 80065ac:	20000230 	.word	0x20000230
 80065b0:	40010800 	.word	0x40010800
 80065b4:	200006c4 	.word	0x200006c4
 80065b8:	200005b0 	.word	0x200005b0
 80065bc:	42b40000 	.word	0x42b40000
 80065c0:	40a00000 	.word	0x40a00000

080065c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80065c6:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <HAL_MspInit+0x3c>)
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	619a      	str	r2, [r3, #24]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	f002 0201 	and.w	r2, r2, #1
 80065d6:	9200      	str	r2, [sp, #0]
 80065d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80065e0:	61da      	str	r2, [r3, #28]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80065ec:	4a05      	ldr	r2, [pc, #20]	; (8006604 <HAL_MspInit+0x40>)
 80065ee:	6853      	ldr	r3, [r2, #4]
 80065f0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80065f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065fa:	b002      	add	sp, #8
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40021000 	.word	0x40021000
 8006604:	40010000 	.word	0x40010000

08006608 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006608:	4770      	bx	lr

0800660a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800660a:	e7fe      	b.n	800660a <HardFault_Handler>

0800660c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800660c:	e7fe      	b.n	800660c <MemManage_Handler>

0800660e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800660e:	e7fe      	b.n	800660e <BusFault_Handler>

08006610 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006610:	e7fe      	b.n	8006610 <UsageFault_Handler>

08006612 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006612:	4770      	bx	lr

08006614 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006614:	4770      	bx	lr

08006616 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006616:	4770      	bx	lr

08006618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800661a:	f000 faf9 	bl	8006c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800661e:	bd08      	pop	{r3, pc}

08006620 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006620:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_P_Pin);
 8006622:	2001      	movs	r0, #1
 8006624:	f001 fc44 	bl	8007eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006628:	bd08      	pop	{r3, pc}

0800662a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800662a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_M_Pin);
 800662c:	2002      	movs	r0, #2
 800662e:	f001 fc3f 	bl	8007eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006632:	bd08      	pop	{r3, pc}

08006634 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006634:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006636:	4802      	ldr	r0, [pc, #8]	; (8006640 <ADC1_2_IRQHandler+0xc>)
 8006638:	f000 fb12 	bl	8006c60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800663c:	bd08      	pop	{r3, pc}
 800663e:	bf00      	nop
 8006640:	200005cc 	.word	0x200005cc

08006644 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8006644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006646:	4802      	ldr	r0, [pc, #8]	; (8006650 <USB_HP_CAN1_TX_IRQHandler+0xc>)
 8006648:	f001 f96e 	bl	8007928 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800664c:	bd08      	pop	{r3, pc}
 800664e:	bf00      	nop
 8006650:	2000063c 	.word	0x2000063c

08006654 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006654:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006656:	4802      	ldr	r0, [pc, #8]	; (8006660 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8006658:	f001 f966 	bl	8007928 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800665c:	bd08      	pop	{r3, pc}
 800665e:	bf00      	nop
 8006660:	2000063c 	.word	0x2000063c

08006664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006666:	4802      	ldr	r0, [pc, #8]	; (8006670 <TIM3_IRQHandler+0xc>)
 8006668:	f002 ff53 	bl	8009512 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800666c:	bd08      	pop	{r3, pc}
 800666e:	bf00      	nop
 8006670:	200006cc 	.word	0x200006cc

08006674 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	460c      	mov	r4, r1
 8006678:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800667a:	2500      	movs	r5, #0
 800667c:	e006      	b.n	800668c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800667e:	f3af 8000 	nop.w
 8006682:	4621      	mov	r1, r4
 8006684:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006688:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800668a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800668c:	42b5      	cmp	r5, r6
 800668e:	dbf6      	blt.n	800667e <_read+0xa>
	}

return len;
}
 8006690:	4630      	mov	r0, r6
 8006692:	bd70      	pop	{r4, r5, r6, pc}

08006694 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	460c      	mov	r4, r1
 8006698:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800669a:	2500      	movs	r5, #0
 800669c:	e004      	b.n	80066a8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800669e:	f814 0b01 	ldrb.w	r0, [r4], #1
 80066a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066a6:	3501      	adds	r5, #1
 80066a8:	42b5      	cmp	r5, r6
 80066aa:	dbf8      	blt.n	800669e <_write+0xa>
	}
	return len;
}
 80066ac:	4630      	mov	r0, r6
 80066ae:	bd70      	pop	{r4, r5, r6, pc}

080066b0 <_close>:

int _close(int file)
{
	return -1;
}
 80066b0:	f04f 30ff 	mov.w	r0, #4294967295
 80066b4:	4770      	bx	lr

080066b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80066b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066ba:	604b      	str	r3, [r1, #4]
	return 0;
}
 80066bc:	2000      	movs	r0, #0
 80066be:	4770      	bx	lr

080066c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80066c0:	2001      	movs	r0, #1
 80066c2:	4770      	bx	lr

080066c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80066c4:	2000      	movs	r0, #0
 80066c6:	4770      	bx	lr

080066c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066c8:	b510      	push	{r4, lr}
 80066ca:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066cc:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <_sbrk+0x38>)
 80066ce:	490d      	ldr	r1, [pc, #52]	; (8006704 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066d0:	480d      	ldr	r0, [pc, #52]	; (8006708 <_sbrk+0x40>)
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	b140      	cbz	r0, 80066e8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066d6:	480c      	ldr	r0, [pc, #48]	; (8006708 <_sbrk+0x40>)
 80066d8:	6800      	ldr	r0, [r0, #0]
 80066da:	4403      	add	r3, r0
 80066dc:	1a52      	subs	r2, r2, r1
 80066de:	4293      	cmp	r3, r2
 80066e0:	d806      	bhi.n	80066f0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80066e2:	4a09      	ldr	r2, [pc, #36]	; (8006708 <_sbrk+0x40>)
 80066e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80066e6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80066e8:	4807      	ldr	r0, [pc, #28]	; (8006708 <_sbrk+0x40>)
 80066ea:	4c08      	ldr	r4, [pc, #32]	; (800670c <_sbrk+0x44>)
 80066ec:	6004      	str	r4, [r0, #0]
 80066ee:	e7f2      	b.n	80066d6 <_sbrk+0xe>
    errno = ENOMEM;
 80066f0:	f003 fb44 	bl	8009d7c <__errno>
 80066f4:	230c      	movs	r3, #12
 80066f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	e7f3      	b.n	80066e6 <_sbrk+0x1e>
 80066fe:	bf00      	nop
 8006700:	20005000 	.word	0x20005000
 8006704:	00000400 	.word	0x00000400
 8006708:	200006c8 	.word	0x200006c8
 800670c:	200007b8 	.word	0x200007b8

08006710 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006710:	4770      	bx	lr
	...

08006714 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006714:	b500      	push	{lr}
 8006716:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006718:	2300      	movs	r3, #0
 800671a:	9302      	str	r3, [sp, #8]
 800671c:	9303      	str	r3, [sp, #12]
 800671e:	9304      	str	r3, [sp, #16]
 8006720:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006726:	4815      	ldr	r0, [pc, #84]	; (800677c <MX_TIM3_Init+0x68>)
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <MX_TIM3_Init+0x6c>)
 800672a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 71;
 800672c:	2247      	movs	r2, #71	; 0x47
 800672e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006730:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8006732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006736:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006738:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800673e:	f002 ffdf 	bl	8009700 <HAL_TIM_Base_Init>
 8006742:	b990      	cbnz	r0, 800676a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006748:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800674a:	a902      	add	r1, sp, #8
 800674c:	480b      	ldr	r0, [pc, #44]	; (800677c <MX_TIM3_Init+0x68>)
 800674e:	f003 f80f 	bl	8009770 <HAL_TIM_ConfigClockSource>
 8006752:	b968      	cbnz	r0, 8006770 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006754:	2300      	movs	r3, #0
 8006756:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006758:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800675a:	4669      	mov	r1, sp
 800675c:	4807      	ldr	r0, [pc, #28]	; (800677c <MX_TIM3_Init+0x68>)
 800675e:	f003 f887 	bl	8009870 <HAL_TIMEx_MasterConfigSynchronization>
 8006762:	b940      	cbnz	r0, 8006776 <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006764:	b007      	add	sp, #28
 8006766:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800676a:	f7ff fe27 	bl	80063bc <Error_Handler>
 800676e:	e7e9      	b.n	8006744 <MX_TIM3_Init+0x30>
    Error_Handler();
 8006770:	f7ff fe24 	bl	80063bc <Error_Handler>
 8006774:	e7ee      	b.n	8006754 <MX_TIM3_Init+0x40>
    Error_Handler();
 8006776:	f7ff fe21 	bl	80063bc <Error_Handler>
}
 800677a:	e7f3      	b.n	8006764 <MX_TIM3_Init+0x50>
 800677c:	200006cc 	.word	0x200006cc
 8006780:	40000400 	.word	0x40000400

08006784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8006784:	6802      	ldr	r2, [r0, #0]
 8006786:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <HAL_TIM_Base_MspInit+0x3c>)
 8006788:	429a      	cmp	r2, r3
 800678a:	d000      	beq.n	800678e <HAL_TIM_Base_MspInit+0xa>
 800678c:	4770      	bx	lr
{
 800678e:	b500      	push	{lr}
 8006790:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006792:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	f042 0202 	orr.w	r2, r2, #2
 800679c:	61da      	str	r2, [r3, #28]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	9b01      	ldr	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80067a8:	2200      	movs	r2, #0
 80067aa:	4611      	mov	r1, r2
 80067ac:	201d      	movs	r0, #29
 80067ae:	f001 f9f3 	bl	8007b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80067b2:	201d      	movs	r0, #29
 80067b4:	f001 fa28 	bl	8007c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80067b8:	b003      	add	sp, #12
 80067ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80067be:	bf00      	nop
 80067c0:	40000400 	.word	0x40000400

080067c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80067c4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067c6:	480a      	ldr	r0, [pc, #40]	; (80067f0 <MX_USART1_UART_Init+0x2c>)
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <MX_USART1_UART_Init+0x30>)
 80067ca:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80067cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80067d0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067d2:	2300      	movs	r3, #0
 80067d4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067d6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067d8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067da:	220c      	movs	r2, #12
 80067dc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067de:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067e0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067e2:	f003 f90b 	bl	80099fc <HAL_UART_Init>
 80067e6:	b900      	cbnz	r0, 80067ea <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80067e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80067ea:	f7ff fde7 	bl	80063bc <Error_Handler>
}
 80067ee:	e7fb      	b.n	80067e8 <MX_USART1_UART_Init+0x24>
 80067f0:	20000714 	.word	0x20000714
 80067f4:	40013800 	.word	0x40013800

080067f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80067f8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80067fa:	480a      	ldr	r0, [pc, #40]	; (8006824 <MX_USART3_UART_Init+0x2c>)
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <MX_USART3_UART_Init+0x30>)
 80067fe:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8006800:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006804:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006806:	2300      	movs	r3, #0
 8006808:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800680a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800680c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800680e:	220c      	movs	r2, #12
 8006810:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006812:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006814:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8006816:	f003 f921 	bl	8009a5c <HAL_HalfDuplex_Init>
 800681a:	b900      	cbnz	r0, 800681e <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800681c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800681e:	f7ff fdcd 	bl	80063bc <Error_Handler>
}
 8006822:	e7fb      	b.n	800681c <MX_USART3_UART_Init+0x24>
 8006824:	2000075c 	.word	0x2000075c
 8006828:	40004800 	.word	0x40004800

0800682c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800682c:	b510      	push	{r4, lr}
 800682e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006830:	2300      	movs	r3, #0
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	9306      	str	r3, [sp, #24]
 8006838:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800683a:	6803      	ldr	r3, [r0, #0]
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <HAL_UART_MspInit+0xb4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d004      	beq.n	800684c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8006842:	4a28      	ldr	r2, [pc, #160]	; (80068e4 <HAL_UART_MspInit+0xb8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d02b      	beq.n	80068a0 <HAL_UART_MspInit+0x74>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006848:	b008      	add	sp, #32
 800684a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800684c:	4b26      	ldr	r3, [pc, #152]	; (80068e8 <HAL_UART_MspInit+0xbc>)
 800684e:	699a      	ldr	r2, [r3, #24]
 8006850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006854:	619a      	str	r2, [r3, #24]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800685c:	9200      	str	r2, [sp, #0]
 800685e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	f042 0204 	orr.w	r2, r2, #4
 8006866:	619a      	str	r2, [r3, #24]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006876:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006878:	2302      	movs	r3, #2
 800687a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800687c:	2303      	movs	r3, #3
 800687e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006880:	4c1a      	ldr	r4, [pc, #104]	; (80068ec <HAL_UART_MspInit+0xc0>)
 8006882:	a904      	add	r1, sp, #16
 8006884:	4620      	mov	r0, r4
 8006886:	f001 f9f3 	bl	8007c70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800688a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006890:	2300      	movs	r3, #0
 8006892:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006894:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006896:	a904      	add	r1, sp, #16
 8006898:	4620      	mov	r0, r4
 800689a:	f001 f9e9 	bl	8007c70 <HAL_GPIO_Init>
 800689e:	e7d3      	b.n	8006848 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80068a0:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <HAL_UART_MspInit+0xbc>)
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80068a8:	61da      	str	r2, [r3, #28]
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80068b0:	9202      	str	r2, [sp, #8]
 80068b2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	f042 0208 	orr.w	r2, r2, #8
 80068ba:	619a      	str	r2, [r3, #24]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	9303      	str	r3, [sp, #12]
 80068c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80068c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068cc:	2312      	movs	r3, #18
 80068ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068d0:	2303      	movs	r3, #3
 80068d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068d4:	a904      	add	r1, sp, #16
 80068d6:	4806      	ldr	r0, [pc, #24]	; (80068f0 <HAL_UART_MspInit+0xc4>)
 80068d8:	f001 f9ca 	bl	8007c70 <HAL_GPIO_Init>
}
 80068dc:	e7b4      	b.n	8006848 <HAL_UART_MspInit+0x1c>
 80068de:	bf00      	nop
 80068e0:	40013800 	.word	0x40013800
 80068e4:	40004800 	.word	0x40004800
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40010800 	.word	0x40010800
 80068f0:	40010c00 	.word	0x40010c00

080068f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80068f4:	f7ff ff0c 	bl	8006710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068f8:	480b      	ldr	r0, [pc, #44]	; (8006928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80068fa:	490c      	ldr	r1, [pc, #48]	; (800692c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80068fc:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80068fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006900:	e002      	b.n	8006908 <LoopCopyDataInit>

08006902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006906:	3304      	adds	r3, #4

08006908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800690a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800690c:	d3f9      	bcc.n	8006902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800690e:	4a09      	ldr	r2, [pc, #36]	; (8006934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006910:	4c09      	ldr	r4, [pc, #36]	; (8006938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006914:	e001      	b.n	800691a <LoopFillZerobss>

08006916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006918:	3204      	adds	r2, #4

0800691a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800691a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800691c:	d3fb      	bcc.n	8006916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800691e:	f003 fbf9 	bl	800a114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006922:	f7ff fd03 	bl	800632c <main>
  bx lr
 8006926:	4770      	bx	lr
  ldr r0, =_sdata
 8006928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800692c:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8006930:	0800b934 	.word	0x0800b934
  ldr r2, =_sbss
 8006934:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 8006938:	200007b8 	.word	0x200007b8

0800693c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800693c:	e7fe      	b.n	800693c <CAN1_RX1_IRQHandler>

0800693e <CalculateChecksum>:
#include "ds18b20.h"
#include "onewire.h"

// Вычисление контрольной суммы
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 800693e:	b500      	push	{lr}
 8006940:	4686      	mov	lr, r0
  uint8_t checksum = 0;
 8006942:	2000      	movs	r0, #0
  while (length--)
 8006944:	460b      	mov	r3, r1
 8006946:	3901      	subs	r1, #1
 8006948:	b2c9      	uxtb	r1, r1
 800694a:	b1a3      	cbz	r3, 8006976 <CalculateChecksum+0x38>
  {
    uint8_t currentByte = *data++;
 800694c:	f81e cb01 	ldrb.w	ip, [lr], #1
    for (uint8_t i = 8; i; i--)
 8006950:	2308      	movs	r3, #8
 8006952:	e003      	b.n	800695c <CalculateChecksum+0x1e>
      checksum >>= 1;
      if (temp)
      {
        checksum ^= 0x8C;
      }
      currentByte >>= 1;
 8006954:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (uint8_t i = 8; i; i--)
 8006958:	3b01      	subs	r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f1      	beq.n	8006944 <CalculateChecksum+0x6>
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 8006960:	ea80 020c 	eor.w	r2, r0, ip
      if (temp)
 8006964:	f012 0f01 	tst.w	r2, #1
 8006968:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800696c:	d0f2      	beq.n	8006954 <CalculateChecksum+0x16>
        checksum ^= 0x8C;
 800696e:	f080 008c 	eor.w	r0, r0, #140	; 0x8c
 8006972:	b2c0      	uxtb	r0, r0
 8006974:	e7ee      	b.n	8006954 <CalculateChecksum+0x16>
    }
  }
  return checksum;
}
 8006976:	f85d fb04 	ldr.w	pc, [sp], #4

0800697a <ExecuteCommand>:
static DS18B20_Command writeScratchpad = {.code = 0x4E, .rxBytesNum = 0, .txBytesNum = 3};
static DS18B20_Command convertT = {.code = 0x44, .rxBytesNum = 0, .txBytesNum = 0};

// Вспомогательная функция для отправки команды
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 800697a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697c:	b083      	sub	sp, #12
 800697e:	9101      	str	r1, [sp, #4]
  if (sensor->isConnected == 0)
 8006980:	7843      	ldrb	r3, [r0, #1]
 8006982:	b91b      	cbnz	r3, 800698c <ExecuteCommand+0x12>
  {
    return DS18B20_ERROR;
 8006984:	2701      	movs	r7, #1
      OneWire_ProcessByte(sensor->uart, data[i]);
    }
  }

  return DS18B20_OK;
}
 8006986:	4638      	mov	r0, r7
 8006988:	b003      	add	sp, #12
 800698a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698c:	4605      	mov	r5, r0
 800698e:	4616      	mov	r6, r2
  OneWire_ProcessByte(sensor->uart, command.code);
 8006990:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8006994:	6840      	ldr	r0, [r0, #4]
 8006996:	f003 f9ca 	bl	8009d2e <OneWire_ProcessByte>
  if (command.rxBytesNum != 0)
 800699a:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800699e:	b9b7      	cbnz	r7, 80069ce <ExecuteCommand+0x54>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 80069a0:	463c      	mov	r4, r7
 80069a2:	e01c      	b.n	80069de <ExecuteCommand+0x64>
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 80069a4:	21ff      	movs	r1, #255	; 0xff
 80069a6:	6868      	ldr	r0, [r5, #4]
 80069a8:	f003 f9c1 	bl	8009d2e <OneWire_ProcessByte>
 80069ac:	5530      	strb	r0, [r6, r4]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80069ae:	3401      	adds	r4, #1
 80069b0:	b2e4      	uxtb	r4, r4
 80069b2:	42a7      	cmp	r7, r4
 80069b4:	d8f6      	bhi.n	80069a4 <ExecuteCommand+0x2a>
    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 80069b6:	1e79      	subs	r1, r7, #1
 80069b8:	b2c9      	uxtb	r1, r1
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ffbf 	bl	800693e <CalculateChecksum>
    if (checkSum != data[command.rxBytesNum - 1])
 80069c0:	443e      	add	r6, r7
 80069c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069c6:	4283      	cmp	r3, r0
 80069c8:	d10e      	bne.n	80069e8 <ExecuteCommand+0x6e>
  return DS18B20_OK;
 80069ca:	2700      	movs	r7, #0
 80069cc:	e7db      	b.n	8006986 <ExecuteCommand+0xc>
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80069ce:	2400      	movs	r4, #0
 80069d0:	e7ef      	b.n	80069b2 <ExecuteCommand+0x38>
      OneWire_ProcessByte(sensor->uart, data[i]);
 80069d2:	5d31      	ldrb	r1, [r6, r4]
 80069d4:	6868      	ldr	r0, [r5, #4]
 80069d6:	f003 f9aa 	bl	8009d2e <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 80069da:	3401      	adds	r4, #1
 80069dc:	b2e4      	uxtb	r4, r4
 80069de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80069e2:	42a3      	cmp	r3, r4
 80069e4:	d8f5      	bhi.n	80069d2 <ExecuteCommand+0x58>
 80069e6:	e7ce      	b.n	8006986 <ExecuteCommand+0xc>
      return DS18B20_ERROR;
 80069e8:	2701      	movs	r7, #1
 80069ea:	e7cc      	b.n	8006986 <ExecuteCommand+0xc>

080069ec <WaitForConversionFinished>:
  return DS18B20_OK;
}


static void WaitForConversionFinished(DS18B20 *sensor)
{
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4604      	mov	r4, r0
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 80069f0:	2101      	movs	r1, #1
 80069f2:	6840      	ldr	r0, [r0, #4]
 80069f4:	f003 f97d 	bl	8009cf2 <OneWire_ProcessBit>
  while(data != 0xFF)
 80069f8:	e003      	b.n	8006a02 <WaitForConversionFinished+0x16>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 80069fa:	2101      	movs	r1, #1
 80069fc:	6860      	ldr	r0, [r4, #4]
 80069fe:	f003 f978 	bl	8009cf2 <OneWire_ProcessBit>
  while(data != 0xFF)
 8006a02:	28ff      	cmp	r0, #255	; 0xff
 8006a04:	d1f9      	bne.n	80069fa <WaitForConversionFinished+0xe>
  }
}
 8006a06:	bd10      	pop	{r4, pc}

08006a08 <DS18B20_Init>:
  sensor->isConnected = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	7043      	strb	r3, [r0, #1]
  sensor->uart = huart;
 8006a0c:	6041      	str	r1, [r0, #4]
  sensor->isInitialized = 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	7003      	strb	r3, [r0, #0]
}
 8006a12:	4770      	bx	lr

08006a14 <DS18B20_InitializationCommand>:
  if (sensor->isInitialized == 0)
 8006a14:	7803      	ldrb	r3, [r0, #0]
 8006a16:	b90b      	cbnz	r3, 8006a1c <DS18B20_InitializationCommand+0x8>
    return DS18B20_ERROR;
 8006a18:	2001      	movs	r0, #1
}
 8006a1a:	4770      	bx	lr
{
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4604      	mov	r4, r0
  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 8006a20:	6840      	ldr	r0, [r0, #4]
 8006a22:	f003 f93b 	bl	8009c9c <OneWire_Reset>
  if (status == ONEWIRE_OK)
 8006a26:	b910      	cbnz	r0, 8006a2e <DS18B20_InitializationCommand+0x1a>
    sensor->isConnected = 1;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	7063      	strb	r3, [r4, #1]
}
 8006a2c:	bd10      	pop	{r4, pc}
    sensor->isConnected = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	7063      	strb	r3, [r4, #1]
    return DS18B20_ERROR;
 8006a32:	2001      	movs	r0, #1
 8006a34:	e7fa      	b.n	8006a2c <DS18B20_InitializationCommand+0x18>
	...

08006a38 <DS18B20_ReadRom>:
{
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	4604      	mov	r4, r0
  result = ExecuteCommand(sensor, readRom, rxData);
 8006a3e:	466a      	mov	r2, sp
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <DS18B20_ReadRom+0x30>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	f7ff ff99 	bl	800697a <ExecuteCommand>
  if (result != DS18B20_OK)
 8006a48:	b960      	cbnz	r0, 8006a64 <DS18B20_ReadRom+0x2c>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	e008      	b.n	8006a60 <DS18B20_ReadRom+0x28>
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	f103 0109 	add.w	r1, r3, #9
 8006a54:	4469      	add	r1, sp
 8006a56:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8006a5a:	4423      	add	r3, r4
 8006a5c:	7219      	strb	r1, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8006a5e:	b2d3      	uxtb	r3, r2
 8006a60:	2b05      	cmp	r3, #5
 8006a62:	d9f4      	bls.n	8006a4e <DS18B20_ReadRom+0x16>
}
 8006a64:	b002      	add	sp, #8
 8006a66:	bd10      	pop	{r4, pc}
 8006a68:	0800b85c 	.word	0x0800b85c

08006a6c <DS18B20_ReadScratchpad>:
{
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	4604      	mov	r4, r0
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 8006a72:	aa01      	add	r2, sp, #4
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <DS18B20_ReadScratchpad+0x8c>)
 8006a76:	6819      	ldr	r1, [r3, #0]
 8006a78:	f7ff ff7f 	bl	800697a <ExecuteCommand>
  if (result != DS18B20_OK)
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	bb80      	cbnz	r0, 8006ae2 <DS18B20_ReadScratchpad+0x76>
  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8006a80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006a84:	73e3      	strb	r3, [r4, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 8006a86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a8a:	73a3      	strb	r3, [r4, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 8006a8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006a90:	7422      	strb	r2, [r4, #16]
  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8006a92:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006a96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006a9a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  if (sign != 0)
 8006a9e:	f413 4678 	ands.w	r6, r3, #63488	; 0xf800
 8006aa2:	d001      	beq.n	8006aa8 <DS18B20_ReadScratchpad+0x3c>
    tRegValue = (0xFFFF - tRegValue + 1);
 8006aa4:	425b      	negs	r3, r3
 8006aa6:	b29b      	uxth	r3, r3
  switch (sensor->configRegister)
 8006aa8:	2a5f      	cmp	r2, #95	; 0x5f
 8006aaa:	d01d      	beq.n	8006ae8 <DS18B20_ReadScratchpad+0x7c>
 8006aac:	d807      	bhi.n	8006abe <DS18B20_ReadScratchpad+0x52>
 8006aae:	2a1f      	cmp	r2, #31
 8006ab0:	d00a      	beq.n	8006ac8 <DS18B20_ReadScratchpad+0x5c>
 8006ab2:	2a3f      	cmp	r2, #63	; 0x3f
 8006ab4:	d11c      	bne.n	8006af0 <DS18B20_ReadScratchpad+0x84>
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 8006ab6:	f240 70fc 	movw	r0, #2044	; 0x7fc
 8006aba:	4018      	ands	r0, r3
      break;
 8006abc:	e006      	b.n	8006acc <DS18B20_ReadScratchpad+0x60>
  switch (sensor->configRegister)
 8006abe:	2a7f      	cmp	r2, #127	; 0x7f
 8006ac0:	d116      	bne.n	8006af0 <DS18B20_ReadScratchpad+0x84>
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8006ac2:	f3c3 000a 	ubfx	r0, r3, #0, #11
      break;
 8006ac6:	e001      	b.n	8006acc <DS18B20_ReadScratchpad+0x60>
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 8006ac8:	f403 60ff 	and.w	r0, r3, #2040	; 0x7f8
  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 8006acc:	f7fa f81c 	bl	8000b08 <__aeabi_ui2f>
 8006ad0:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8006ad4:	f7fa f870 	bl	8000bb8 <__aeabi_fmul>
 8006ad8:	6160      	str	r0, [r4, #20]
  if (sign != 0)
 8006ada:	b116      	cbz	r6, 8006ae2 <DS18B20_ReadScratchpad+0x76>
    sensor->temperature *= (-1);
 8006adc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006ae0:	6160      	str	r0, [r4, #20]
}
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	b004      	add	sp, #16
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 8006ae8:	f240 70fe 	movw	r0, #2046	; 0x7fe
 8006aec:	4018      	ands	r0, r3
      break;
 8006aee:	e7ed      	b.n	8006acc <DS18B20_ReadScratchpad+0x60>
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8006af0:	f3c3 000a 	ubfx	r0, r3, #0, #11
      break;
 8006af4:	e7ea      	b.n	8006acc <DS18B20_ReadScratchpad+0x60>
 8006af6:	bf00      	nop
 8006af8:	0800b860 	.word	0x0800b860

08006afc <DS18B20_WriteScratchpad>:
{
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4605      	mov	r5, r0
 8006b00:	460c      	mov	r4, r1
  result = ExecuteCommand(sensor, writeScratchpad, data);
 8006b02:	460a      	mov	r2, r1
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <DS18B20_WriteScratchpad+0x20>)
 8006b06:	6819      	ldr	r1, [r3, #0]
 8006b08:	f7ff ff37 	bl	800697a <ExecuteCommand>
  if (result != DS18B20_OK)
 8006b0c:	b928      	cbnz	r0, 8006b1a <DS18B20_WriteScratchpad+0x1e>
  sensor->temperatureLimitHigh = data[0];
 8006b0e:	7823      	ldrb	r3, [r4, #0]
 8006b10:	73eb      	strb	r3, [r5, #15]
  sensor->temperatureLimitLow = data[1];
 8006b12:	7863      	ldrb	r3, [r4, #1]
 8006b14:	73ab      	strb	r3, [r5, #14]
  sensor->configRegister = data[2];
 8006b16:	78a3      	ldrb	r3, [r4, #2]
 8006b18:	742b      	strb	r3, [r5, #16]
}
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	0800b868 	.word	0x0800b868

08006b20 <DS18B20_SkipRom>:
{
 8006b20:	b500      	push	{lr}
 8006b22:	b083      	sub	sp, #12
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 8006b24:	f10d 0207 	add.w	r2, sp, #7
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <DS18B20_SkipRom+0x18>)
 8006b2a:	6819      	ldr	r1, [r3, #0]
 8006b2c:	f7ff ff25 	bl	800697a <ExecuteCommand>
}
 8006b30:	b003      	add	sp, #12
 8006b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b36:	bf00      	nop
 8006b38:	0800b864 	.word	0x0800b864

08006b3c <DS18B20_ConvertT>:
/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	4606      	mov	r6, r0
 8006b42:	460c      	mov	r4, r1
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 8006b44:	f10d 0207 	add.w	r2, sp, #7
 8006b48:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <DS18B20_ConvertT+0x60>)
 8006b4a:	6819      	ldr	r1, [r3, #0]
 8006b4c:	f7ff ff15 	bl	800697a <ExecuteCommand>
 8006b50:	4605      	mov	r5, r0
  if (waitCondition == DS18B20_DATA)
 8006b52:	2c01      	cmp	r4, #1
 8006b54:	d004      	beq.n	8006b60 <DS18B20_ConvertT+0x24>
  {
    WaitForConversionFinished(sensor);
  }
  if (waitCondition == DS18B20_DELAY)
 8006b56:	2c02      	cmp	r4, #2
 8006b58:	d006      	beq.n	8006b68 <DS18B20_ConvertT+0x2c>
        break;
    }
    HAL_Delay(delayValueMs);
  }
  return result;
}
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
    WaitForConversionFinished(sensor);
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff ff43 	bl	80069ec <WaitForConversionFinished>
 8006b66:	e7f6      	b.n	8006b56 <DS18B20_ConvertT+0x1a>
    switch (sensor->configRegister)
 8006b68:	7c33      	ldrb	r3, [r6, #16]
 8006b6a:	2b5f      	cmp	r3, #95	; 0x5f
 8006b6c:	d00d      	beq.n	8006b8a <DS18B20_ConvertT+0x4e>
 8006b6e:	d807      	bhi.n	8006b80 <DS18B20_ConvertT+0x44>
 8006b70:	2b1f      	cmp	r3, #31
 8006b72:	d00d      	beq.n	8006b90 <DS18B20_ConvertT+0x54>
 8006b74:	2b3f      	cmp	r3, #63	; 0x3f
 8006b76:	d10d      	bne.n	8006b94 <DS18B20_ConvertT+0x58>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 8006b78:	20bc      	movs	r0, #188	; 0xbc
    HAL_Delay(delayValueMs);
 8006b7a:	f000 f85b 	bl	8006c34 <HAL_Delay>
 8006b7e:	e7ec      	b.n	8006b5a <DS18B20_ConvertT+0x1e>
    switch (sensor->configRegister)
 8006b80:	2b7f      	cmp	r3, #127	; 0x7f
 8006b82:	d109      	bne.n	8006b98 <DS18B20_ConvertT+0x5c>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 8006b84:	f240 20ee 	movw	r0, #750	; 0x2ee
 8006b88:	e7f7      	b.n	8006b7a <DS18B20_ConvertT+0x3e>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 8006b8a:	f240 1077 	movw	r0, #375	; 0x177
 8006b8e:	e7f4      	b.n	8006b7a <DS18B20_ConvertT+0x3e>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 8006b90:	205e      	movs	r0, #94	; 0x5e
 8006b92:	e7f2      	b.n	8006b7a <DS18B20_ConvertT+0x3e>
    switch (sensor->configRegister)
 8006b94:	2000      	movs	r0, #0
 8006b96:	e7f0      	b.n	8006b7a <DS18B20_ConvertT+0x3e>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e7ee      	b.n	8006b7a <DS18B20_ConvertT+0x3e>
 8006b9c:	0800b858 	.word	0x0800b858

08006ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <HAL_InitTick+0x40>)
 8006ba6:	7818      	ldrb	r0, [r3, #0]
 8006ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bac:	fbb3 f3f0 	udiv	r3, r3, r0
 8006bb0:	4a0c      	ldr	r2, [pc, #48]	; (8006be4 <HAL_InitTick+0x44>)
 8006bb2:	6810      	ldr	r0, [r2, #0]
 8006bb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8006bb8:	f001 f846 	bl	8007c48 <HAL_SYSTICK_Config>
 8006bbc:	b968      	cbnz	r0, 8006bda <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bbe:	2c0f      	cmp	r4, #15
 8006bc0:	d901      	bls.n	8006bc6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	e00a      	b.n	8006bdc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f04f 30ff 	mov.w	r0, #4294967295
 8006bce:	f000 ffe3 	bl	8007b98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <HAL_InitTick+0x48>)
 8006bd4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e000      	b.n	8006bdc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8006bda:	2001      	movs	r0, #1
}
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	bf00      	nop
 8006be0:	2000048c 	.word	0x2000048c
 8006be4:	20000488 	.word	0x20000488
 8006be8:	20000490 	.word	0x20000490

08006bec <HAL_Init>:
{
 8006bec:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bee:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <HAL_Init+0x20>)
 8006bf0:	6813      	ldr	r3, [r2, #0]
 8006bf2:	f043 0310 	orr.w	r3, r3, #16
 8006bf6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bf8:	2003      	movs	r0, #3
 8006bfa:	f000 ffbb 	bl	8007b74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bfe:	200f      	movs	r0, #15
 8006c00:	f7ff ffce 	bl	8006ba0 <HAL_InitTick>
  HAL_MspInit();
 8006c04:	f7ff fcde 	bl	80065c4 <HAL_MspInit>
}
 8006c08:	2000      	movs	r0, #0
 8006c0a:	bd08      	pop	{r3, pc}
 8006c0c:	40022000 	.word	0x40022000

08006c10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006c10:	4a03      	ldr	r2, [pc, #12]	; (8006c20 <HAL_IncTick+0x10>)
 8006c12:	6811      	ldr	r1, [r2, #0]
 8006c14:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <HAL_IncTick+0x14>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	440b      	add	r3, r1
 8006c1a:	6013      	str	r3, [r2, #0]
}
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	200007a4 	.word	0x200007a4
 8006c24:	2000048c 	.word	0x2000048c

08006c28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006c28:	4b01      	ldr	r3, [pc, #4]	; (8006c30 <HAL_GetTick+0x8>)
 8006c2a:	6818      	ldr	r0, [r3, #0]
}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	200007a4 	.word	0x200007a4

08006c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006c38:	f7ff fff6 	bl	8006c28 <HAL_GetTick>
 8006c3c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c3e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006c42:	d002      	beq.n	8006c4a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c44:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <HAL_Delay+0x24>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c4a:	f7ff ffed 	bl	8006c28 <HAL_GetTick>
 8006c4e:	1b40      	subs	r0, r0, r5
 8006c50:	42a0      	cmp	r0, r4
 8006c52:	d3fa      	bcc.n	8006c4a <HAL_Delay+0x16>
  {
  }
}
 8006c54:	bd38      	pop	{r3, r4, r5, pc}
 8006c56:	bf00      	nop
 8006c58:	2000048c 	.word	0x2000048c

08006c5c <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006c5c:	4770      	bx	lr

08006c5e <HAL_ADC_LevelOutOfWindowCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006c5e:	4770      	bx	lr

08006c60 <HAL_ADC_IRQHandler>:
{
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8006c64:	6803      	ldr	r3, [r0, #0]
 8006c66:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006c68:	685d      	ldr	r5, [r3, #4]
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8006c6a:	f015 0f20 	tst.w	r5, #32
 8006c6e:	d017      	beq.n	8006ca0 <HAL_ADC_IRQHandler+0x40>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8006c70:	f016 0f02 	tst.w	r6, #2
 8006c74:	d014      	beq.n	8006ca0 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c76:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006c78:	f012 0f10 	tst.w	r2, #16
 8006c7c:	d103      	bne.n	8006c86 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006c7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c84:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8006c8c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8006c90:	d033      	beq.n	8006cfa <HAL_ADC_IRQHandler+0x9a>
      HAL_ADC_ConvCpltCallback(hadc);
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff ffe2 	bl	8006c5c <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	f06f 0212 	mvn.w	r2, #18
 8006c9e:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8006ca0:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006ca4:	d022      	beq.n	8006cec <HAL_ADC_IRQHandler+0x8c>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8006ca6:	f016 0f04 	tst.w	r6, #4
 8006caa:	d01f      	beq.n	8006cec <HAL_ADC_IRQHandler+0x8c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006cac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cae:	f013 0f10 	tst.w	r3, #16
 8006cb2:	d103      	bne.n	8006cbc <HAL_ADC_IRQHandler+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006cb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006cba:	62a3      	str	r3, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006cbc:	6822      	ldr	r2, [r4, #0]
 8006cbe:	6893      	ldr	r3, [r2, #8]
 8006cc0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006cc4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8006cc8:	d02e      	beq.n	8006d28 <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006cca:	6853      	ldr	r3, [r2, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006ccc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006cd0:	d105      	bne.n	8006cde <HAL_ADC_IRQHandler+0x7e>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006cd2:	6893      	ldr	r3, [r2, #8]
 8006cd4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006cd8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006cdc:	d021      	beq.n	8006d22 <HAL_ADC_IRQHandler+0xc2>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7fe ff8a 	bl	8005bf8 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	f06f 020c 	mvn.w	r2, #12
 8006cea:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8006cec:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cf0:	d002      	beq.n	8006cf8 <HAL_ADC_IRQHandler+0x98>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8006cf2:	f016 0f01 	tst.w	r6, #1
 8006cf6:	d128      	bne.n	8006d4a <HAL_ADC_IRQHandler+0xea>
}
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006cfa:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	d1c8      	bne.n	8006c92 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	f022 0220 	bic.w	r2, r2, #32
 8006d06:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d0e:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d12:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006d16:	d1bc      	bne.n	8006c92 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d20:	e7b7      	b.n	8006c92 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8006d22:	7b23      	ldrb	r3, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1da      	bne.n	8006cde <HAL_ADC_IRQHandler+0x7e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006d28:	6853      	ldr	r3, [r2, #4]
 8006d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2e:	6053      	str	r3, [r2, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006d30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d36:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d3e:	d1ce      	bne.n	8006cde <HAL_ADC_IRQHandler+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d48:	e7c9      	b.n	8006cde <HAL_ADC_IRQHandler+0x7e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d50:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d52:	4620      	mov	r0, r4
 8006d54:	f7ff ff83 	bl	8006c5e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	f06f 0201 	mvn.w	r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
}
 8006d60:	e7ca      	b.n	8006cf8 <HAL_ADC_IRQHandler+0x98>
	...

08006d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006d64:	b530      	push	{r4, r5, lr}
 8006d66:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006d6c:	6803      	ldr	r3, [r0, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	f012 0f01 	tst.w	r2, #1
 8006d74:	d133      	bne.n	8006dde <ADC_Enable+0x7a>
 8006d76:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d80:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <ADC_Enable+0x80>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a18      	ldr	r2, [pc, #96]	; (8006de8 <ADC_Enable+0x84>)
 8006d86:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8a:	0c9b      	lsrs	r3, r3, #18
 8006d8c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8006d8e:	e002      	b.n	8006d96 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8006d90:	9b01      	ldr	r3, [sp, #4]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f9      	bne.n	8006d90 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d9c:	f7ff ff44 	bl	8006c28 <HAL_GetTick>
 8006da0:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f013 0f01 	tst.w	r3, #1
 8006daa:	d116      	bne.n	8006dda <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006dac:	f7ff ff3c 	bl	8006c28 <HAL_GetTick>
 8006db0:	1b43      	subs	r3, r0, r5
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d9f5      	bls.n	8006da2 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f013 0f01 	tst.w	r3, #1
 8006dbe:	d1f0      	bne.n	8006da2 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006dc2:	f043 0310 	orr.w	r3, r3, #16
 8006dc6:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	62e3      	str	r3, [r4, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

          return HAL_ERROR;
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	e002      	b.n	8006de0 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e000      	b.n	8006de0 <ADC_Enable+0x7c>
 8006dde:	2000      	movs	r0, #0
}
 8006de0:	b003      	add	sp, #12
 8006de2:	bd30      	pop	{r4, r5, pc}
 8006de4:	20000488 	.word	0x20000488
 8006de8:	431bde83 	.word	0x431bde83

08006dec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006dec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006dee:	6803      	ldr	r3, [r0, #0]
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	f012 0f01 	tst.w	r2, #1
 8006df6:	d101      	bne.n	8006dfc <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006df8:	2000      	movs	r0, #0
}
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	f022 0201 	bic.w	r2, r2, #1
 8006e04:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006e06:	f7ff ff0f 	bl	8006c28 <HAL_GetTick>
 8006e0a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f013 0f01 	tst.w	r3, #1
 8006e14:	d013      	beq.n	8006e3e <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006e16:	f7ff ff07 	bl	8006c28 <HAL_GetTick>
 8006e1a:	1b43      	subs	r3, r0, r5
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d9f5      	bls.n	8006e0c <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f013 0f01 	tst.w	r3, #1
 8006e28:	d0f0      	beq.n	8006e0c <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e2c:	f043 0310 	orr.w	r3, r3, #16
 8006e30:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e7dd      	b.n	8006dfa <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e7db      	b.n	8006dfa <ADC_ConversionStop_Disable+0xe>
	...

08006e44 <HAL_ADC_Init>:
  if(hadc == NULL)
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d07b      	beq.n	8006f40 <HAL_ADC_Init+0xfc>
{
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d04d      	beq.n	8006eee <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7ff ffca 	bl	8006dec <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006e58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e5a:	f013 0310 	ands.w	r3, r3, #16
 8006e5e:	d169      	bne.n	8006f34 <HAL_ADC_Init+0xf0>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d167      	bne.n	8006f34 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8006e64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e66:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006e6a:	f022 0202 	bic.w	r2, r2, #2
 8006e6e:	f042 0202 	orr.w	r2, r2, #2
 8006e72:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006e74:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006e76:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006e78:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006e7a:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006e7c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006e80:	68a5      	ldr	r5, [r4, #8]
 8006e82:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006e86:	d002      	beq.n	8006e8e <HAL_ADC_Init+0x4a>
 8006e88:	2d01      	cmp	r5, #1
 8006e8a:	d036      	beq.n	8006efa <HAL_ADC_Init+0xb6>
 8006e8c:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e8e:	7d26      	ldrb	r6, [r4, #20]
 8006e90:	2e01      	cmp	r6, #1
 8006e92:	d035      	beq.n	8006f00 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8006e94:	6826      	ldr	r6, [r4, #0]
 8006e96:	6871      	ldr	r1, [r6, #4]
 8006e98:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8006e9c:	4329      	orrs	r1, r5
 8006e9e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8006ea0:	6825      	ldr	r5, [r4, #0]
 8006ea2:	68ae      	ldr	r6, [r5, #8]
 8006ea4:	4927      	ldr	r1, [pc, #156]	; (8006f44 <HAL_ADC_Init+0x100>)
 8006ea6:	4031      	ands	r1, r6
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006eac:	68a1      	ldr	r1, [r4, #8]
 8006eae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006eb2:	d001      	beq.n	8006eb8 <HAL_ADC_Init+0x74>
 8006eb4:	2901      	cmp	r1, #1
 8006eb6:	d102      	bne.n	8006ebe <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8006ebe:	6825      	ldr	r5, [r4, #0]
 8006ec0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8006ec2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	6899      	ldr	r1, [r3, #8]
 8006ece:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <HAL_ADC_Init+0x104>)
 8006ed0:	400b      	ands	r3, r1
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d025      	beq.n	8006f22 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8006ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ed8:	f023 0312 	bic.w	r3, r3, #18
 8006edc:	f043 0310 	orr.w	r3, r3, #16
 8006ee0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ee2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ee4:	f043 0301 	orr.w	r3, r3, #1
 8006ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8006eea:	2001      	movs	r0, #1
 8006eec:	e027      	b.n	8006f3e <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8006eee:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8006ef0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8006ef4:	f7fe ff9e 	bl	8005e34 <HAL_ADC_MspInit>
 8006ef8:	e7ab      	b.n	8006e52 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006efa:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006efe:	e7c6      	b.n	8006e8e <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006f00:	b931      	cbnz	r1, 8006f10 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006f02:	69a1      	ldr	r1, [r4, #24]
 8006f04:	3901      	subs	r1, #1
 8006f06:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8006f0a:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8006f0e:	e7c1      	b.n	8006e94 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006f12:	f041 0120 	orr.w	r1, r1, #32
 8006f16:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006f1a:	f041 0101 	orr.w	r1, r1, #1
 8006f1e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006f20:	e7b8      	b.n	8006e94 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8006f22:	2300      	movs	r3, #0
 8006f24:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8006f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f28:	f023 0303 	bic.w	r3, r3, #3
 8006f2c:	f043 0301 	orr.w	r3, r3, #1
 8006f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f32:	e004      	b.n	8006f3e <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f36:	f043 0310 	orr.w	r3, r3, #16
 8006f3a:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8006f3c:	2001      	movs	r0, #1
}
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006f40:	2001      	movs	r0, #1
}
 8006f42:	4770      	bx	lr
 8006f44:	ffe1f7fd 	.word	0xffe1f7fd
 8006f48:	ff1f0efe 	.word	0xff1f0efe

08006f4c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f54:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d072      	beq.n	8007042 <HAL_ADCEx_Calibration_Start+0xf6>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006f64:	f7ff ff42 	bl	8006dec <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7ff fefb 	bl	8006d64 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8006f6e:	4605      	mov	r5, r0
 8006f70:	b128      	cbz	r0, 8006f7e <HAL_ADCEx_Calibration_Start+0x32>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f72:	2300      	movs	r3, #0
 8006f74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8006f78:	4628      	mov	r0, r5
 8006f7a:	b002      	add	sp, #8
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
     ADC_STATE_CLR_SET(hadc->State,
 8006f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f84:	f023 0302 	bic.w	r3, r3, #2
 8006f88:	f043 0302 	orr.w	r3, r3, #2
 8006f8c:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006f8e:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <HAL_ADCEx_Calibration_Start+0xfc>)
 8006f90:	681e      	ldr	r6, [r3, #0]
 8006f92:	2002      	movs	r0, #2
 8006f94:	f002 f9d2 	bl	800933c <HAL_RCCEx_GetPeriphCLKFreq>
 8006f98:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8006f9c:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8006f9e:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8006fa0:	e002      	b.n	8006fa8 <HAL_ADCEx_Calibration_Start+0x5c>
      wait_loop_index--;
 8006fa2:	9b01      	ldr	r3, [sp, #4]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8006fa8:	9b01      	ldr	r3, [sp, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f9      	bne.n	8006fa2 <HAL_ADCEx_Calibration_Start+0x56>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	6893      	ldr	r3, [r2, #8]
 8006fb2:	f043 0308 	orr.w	r3, r3, #8
 8006fb6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8006fb8:	f7ff fe36 	bl	8006c28 <HAL_GetTick>
 8006fbc:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	f012 0f08 	tst.w	r2, #8
 8006fc6:	d014      	beq.n	8006ff2 <HAL_ADCEx_Calibration_Start+0xa6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006fc8:	f7ff fe2e 	bl	8006c28 <HAL_GetTick>
 8006fcc:	1b80      	subs	r0, r0, r6
 8006fce:	280a      	cmp	r0, #10
 8006fd0:	d9f5      	bls.n	8006fbe <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f013 0f08 	tst.w	r3, #8
 8006fda:	d0f0      	beq.n	8006fbe <HAL_ADCEx_Calibration_Start+0x72>
          ADC_STATE_CLR_SET(hadc->State,
 8006fdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fde:	f023 0312 	bic.w	r3, r3, #18
 8006fe2:	f043 0310 	orr.w	r3, r3, #16
 8006fe6:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8006fee:	2501      	movs	r5, #1
 8006ff0:	e7c2      	b.n	8006f78 <HAL_ADCEx_Calibration_Start+0x2c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	f042 0204 	orr.w	r2, r2, #4
 8006ff8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8006ffa:	f7ff fe15 	bl	8006c28 <HAL_GetTick>
 8006ffe:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f013 0f04 	tst.w	r3, #4
 8007008:	d014      	beq.n	8007034 <HAL_ADCEx_Calibration_Start+0xe8>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800700a:	f7ff fe0d 	bl	8006c28 <HAL_GetTick>
 800700e:	1b80      	subs	r0, r0, r6
 8007010:	280a      	cmp	r0, #10
 8007012:	d9f5      	bls.n	8007000 <HAL_ADCEx_Calibration_Start+0xb4>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f013 0f04 	tst.w	r3, #4
 800701c:	d0f0      	beq.n	8007000 <HAL_ADCEx_Calibration_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State,
 800701e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007020:	f023 0312 	bic.w	r3, r3, #18
 8007024:	f043 0310 	orr.w	r3, r3, #16
 8007028:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800702a:	2300      	movs	r3, #0
 800702c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8007030:	2501      	movs	r5, #1
 8007032:	e7a1      	b.n	8006f78 <HAL_ADCEx_Calibration_Start+0x2c>
    ADC_STATE_CLR_SET(hadc->State,
 8007034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007036:	f023 0303 	bic.w	r3, r3, #3
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007040:	e797      	b.n	8006f72 <HAL_ADCEx_Calibration_Start+0x26>
  __HAL_LOCK(hadc);
 8007042:	2502      	movs	r5, #2
 8007044:	e798      	b.n	8006f78 <HAL_ADCEx_Calibration_Start+0x2c>
 8007046:	bf00      	nop
 8007048:	20000488 	.word	0x20000488

0800704c <HAL_ADCEx_InjectedStart_IT>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800704c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007050:	2b01      	cmp	r3, #1
 8007052:	d057      	beq.n	8007104 <HAL_ADCEx_InjectedStart_IT+0xb8>
{
 8007054:	b510      	push	{r4, lr}
 8007056:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007058:	2301      	movs	r3, #1
 800705a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800705e:	f7ff fe81 	bl	8006d64 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007062:	2800      	cmp	r0, #0
 8007064:	d14a      	bne.n	80070fc <HAL_ADCEx_InjectedStart_IT+0xb0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8007066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007068:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800706c:	f023 0301 	bic.w	r3, r3, #1
 8007070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007074:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	4b23      	ldr	r3, [pc, #140]	; (8007108 <HAL_ADCEx_InjectedStart_IT+0xbc>)
 800707a:	429a      	cmp	r2, r3
 800707c:	d024      	beq.n	80070c8 <HAL_ADCEx_InjectedStart_IT+0x7c>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800707e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007080:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007084:	62a3      	str	r3, [r4, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007088:	f413 7f80 	tst.w	r3, #256	; 0x100
 800708c:	d101      	bne.n	8007092 <HAL_ADCEx_InjectedStart_IT+0x46>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800708e:	2300      	movs	r3, #0
 8007090:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007092:	2300      	movs	r3, #0
 8007094:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007098:	f06f 0304 	mvn.w	r3, #4
 800709c:	6013      	str	r3, [r2, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	6853      	ldr	r3, [r2, #4]
 80070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a6:	6053      	str	r3, [r2, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80070b0:	d127      	bne.n	8007102 <HAL_ADCEx_InjectedStart_IT+0xb6>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80070b8:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80070bc:	d00f      	beq.n	80070de <HAL_ADCEx_InjectedStart_IT+0x92>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	e01c      	b.n	8007102 <HAL_ADCEx_InjectedStart_IT+0xb6>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80070c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80070d2:	d0d4      	beq.n	800707e <HAL_ADCEx_InjectedStart_IT+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80070d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070da:	62a3      	str	r3, [r4, #40]	; 0x28
 80070dc:	e7d3      	b.n	8007086 <HAL_ADCEx_InjectedStart_IT+0x3a>
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80070de:	4a0a      	ldr	r2, [pc, #40]	; (8007108 <HAL_ADCEx_InjectedStart_IT+0xbc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_ADCEx_InjectedStart_IT+0xa2>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80070ea:	609a      	str	r2, [r3, #8]
 80070ec:	e009      	b.n	8007102 <HAL_ADCEx_InjectedStart_IT+0xb6>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80070ee:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80070f2:	6852      	ldr	r2, [r2, #4]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80070f4:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80070f8:	d1e1      	bne.n	80070be <HAL_ADCEx_InjectedStart_IT+0x72>
 80070fa:	e7f3      	b.n	80070e4 <HAL_ADCEx_InjectedStart_IT+0x98>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80070fc:	2300      	movs	r3, #0
 80070fe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8007102:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8007104:	2002      	movs	r0, #2
}
 8007106:	4770      	bx	lr
 8007108:	40012800 	.word	0x40012800

0800710c <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800710c:	2903      	cmp	r1, #3
 800710e:	d009      	beq.n	8007124 <HAL_ADCEx_InjectedGetValue+0x18>
 8007110:	2904      	cmp	r1, #4
 8007112:	d004      	beq.n	800711e <HAL_ADCEx_InjectedGetValue+0x12>
 8007114:	2902      	cmp	r1, #2
 8007116:	d008      	beq.n	800712a <HAL_ADCEx_InjectedGetValue+0x1e>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
      break;
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8007118:	6803      	ldr	r3, [r0, #0]
 800711a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
}
 800711c:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 800711e:	6803      	ldr	r3, [r0, #0]
 8007120:	6c98      	ldr	r0, [r3, #72]	; 0x48
      break;
 8007122:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8007124:	6803      	ldr	r3, [r0, #0]
 8007126:	6c58      	ldr	r0, [r3, #68]	; 0x44
      break;
 8007128:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 800712a:	6803      	ldr	r3, [r0, #0]
 800712c:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800712e:	4770      	bx	lr

08007130 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8007130:	b470      	push	{r4, r5, r6}
 8007132:	b083      	sub	sp, #12
 8007134:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8007136:	2200      	movs	r2, #0
 8007138:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
  assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
  assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800713a:	6880      	ldr	r0, [r0, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800713c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007140:	2a01      	cmp	r2, #1
 8007142:	f000 8101 	beq.w	8007348 <HAL_ADCEx_InjectedConfigChannel+0x218>
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800714c:	2800      	cmp	r0, #0
 800714e:	d14e      	bne.n	80071ee <HAL_ADCEx_InjectedConfigChannel+0xbe>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007150:	684a      	ldr	r2, [r1, #4]
 8007152:	2a01      	cmp	r2, #1
 8007154:	d041      	beq.n	80071da <HAL_ADCEx_InjectedConfigChannel+0xaa>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007158:	f042 0220 	orr.w	r2, r2, #32
 800715c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800715e:	2001      	movs	r0, #1
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007160:	681c      	ldr	r4, [r3, #0]
 8007162:	68a2      	ldr	r2, [r4, #8]
 8007164:	f012 0f01 	tst.w	r2, #1
 8007168:	d107      	bne.n	800717a <HAL_ADCEx_InjectedConfigChannel+0x4a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 800716a:	68a2      	ldr	r2, [r4, #8]
 800716c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007170:	f022 0201 	bic.w	r2, r2, #1
 8007174:	698d      	ldr	r5, [r1, #24]
 8007176:	432a      	orrs	r2, r5
 8007178:	60a2      	str	r2, [r4, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800717a:	7d4a      	ldrb	r2, [r1, #21]
 800717c:	2a01      	cmp	r2, #1
 800717e:	d061      	beq.n	8007244 <HAL_ADCEx_InjectedConfigChannel+0x114>
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8007180:	7d0a      	ldrb	r2, [r1, #20]
 8007182:	2a01      	cmp	r2, #1
 8007184:	d06e      	beq.n	8007264 <HAL_ADCEx_InjectedConfigChannel+0x134>
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8007186:	680a      	ldr	r2, [r1, #0]
 8007188:	2a09      	cmp	r2, #9
 800718a:	d979      	bls.n	8007280 <HAL_ADCEx_InjectedConfigChannel+0x150>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800718c:	681d      	ldr	r5, [r3, #0]
 800718e:	68ec      	ldr	r4, [r5, #12]
 8007190:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007194:	3a1e      	subs	r2, #30
 8007196:	f04f 0c07 	mov.w	ip, #7
 800719a:	fa0c fc02 	lsl.w	ip, ip, r2
 800719e:	ea24 040c 	bic.w	r4, r4, ip
 80071a2:	688e      	ldr	r6, [r1, #8]
 80071a4:	fa06 f202 	lsl.w	r2, r6, r2
 80071a8:	4322      	orrs	r2, r4
 80071aa:	60ea      	str	r2, [r5, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80071ac:	680a      	ldr	r2, [r1, #0]
 80071ae:	3a10      	subs	r2, #16
 80071b0:	2a01      	cmp	r2, #1
 80071b2:	d975      	bls.n	80072a0 <HAL_ADCEx_InjectedConfigChannel+0x170>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80071b4:	684a      	ldr	r2, [r1, #4]
 80071b6:	2a02      	cmp	r2, #2
 80071b8:	f000 808b 	beq.w	80072d2 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 80071bc:	2a03      	cmp	r2, #3
 80071be:	f000 8092 	beq.w	80072e6 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
 80071c2:	2a01      	cmp	r2, #1
 80071c4:	d072      	beq.n	80072ac <HAL_ADCEx_InjectedConfigChannel+0x17c>
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80071c6:	681c      	ldr	r4, [r3, #0]
 80071c8:	6a22      	ldr	r2, [r4, #32]
 80071ca:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80071ce:	f022 020f 	bic.w	r2, r2, #15
 80071d2:	68cd      	ldr	r5, [r1, #12]
 80071d4:	432a      	orrs	r2, r5
 80071d6:	6222      	str	r2, [r4, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80071d8:	e071      	b.n	80072be <HAL_ADCEx_InjectedConfigChannel+0x18e>
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80071de:	0d92      	lsrs	r2, r2, #22
 80071e0:	0592      	lsls	r2, r2, #22
 80071e2:	680c      	ldr	r4, [r1, #0]
 80071e4:	ea42 32c4 	orr.w	r2, r2, r4, lsl #15
 80071e8:	6382      	str	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071ea:	2000      	movs	r0, #0
 80071ec:	e7b8      	b.n	8007160 <HAL_ADCEx_InjectedConfigChannel+0x30>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80071ee:	684a      	ldr	r2, [r1, #4]
 80071f0:	690c      	ldr	r4, [r1, #16]
 80071f2:	42a2      	cmp	r2, r4
 80071f4:	d816      	bhi.n	8007224 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80071f6:	681e      	ldr	r6, [r3, #0]
 80071f8:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 80071fa:	1b12      	subs	r2, r2, r4
 80071fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007200:	f102 000f 	add.w	r0, r2, #15
 8007204:	221f      	movs	r2, #31
 8007206:	4082      	lsls	r2, r0
 8007208:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800720c:	ea25 0502 	bic.w	r5, r5, r2
 8007210:	1e62      	subs	r2, r4, #1
 8007212:	680c      	ldr	r4, [r1, #0]
 8007214:	fa04 f000 	lsl.w	r0, r4, r0
 8007218:	ea40 5202 	orr.w	r2, r0, r2, lsl #20
 800721c:	432a      	orrs	r2, r5
 800721e:	63b2      	str	r2, [r6, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007220:	2000      	movs	r0, #0
 8007222:	e79d      	b.n	8007160 <HAL_ADCEx_InjectedConfigChannel+0x30>
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8007224:	681e      	ldr	r6, [r3, #0]
 8007226:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8007228:	1b12      	subs	r2, r2, r4
 800722a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800722e:	320f      	adds	r2, #15
 8007230:	201f      	movs	r0, #31
 8007232:	fa00 f202 	lsl.w	r2, r0, r2
 8007236:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800723a:	ea25 0202 	bic.w	r2, r5, r2
 800723e:	63b2      	str	r2, [r6, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007240:	2000      	movs	r0, #0
 8007242:	e78d      	b.n	8007160 <HAL_ADCEx_InjectedConfigChannel+0x30>
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007244:	698c      	ldr	r4, [r1, #24]
 8007246:	f5b4 4fe0 	cmp.w	r4, #28672	; 0x7000
 800724a:	d005      	beq.n	8007258 <HAL_ADCEx_InjectedConfigChannel+0x128>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800724c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800724e:	f040 0020 	orr.w	r0, r0, #32
 8007252:	6298      	str	r0, [r3, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8007254:	4610      	mov	r0, r2
 8007256:	e793      	b.n	8007180 <HAL_ADCEx_InjectedConfigChannel+0x50>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007258:	681c      	ldr	r4, [r3, #0]
 800725a:	6862      	ldr	r2, [r4, #4]
 800725c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007260:	6062      	str	r2, [r4, #4]
 8007262:	e78d      	b.n	8007180 <HAL_ADCEx_InjectedConfigChannel+0x50>
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8007264:	7d4c      	ldrb	r4, [r1, #21]
 8007266:	b92c      	cbnz	r4, 8007274 <HAL_ADCEx_InjectedConfigChannel+0x144>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8007268:	681c      	ldr	r4, [r3, #0]
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007270:	6062      	str	r2, [r4, #4]
 8007272:	e788      	b.n	8007186 <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007274:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007276:	f040 0020 	orr.w	r0, r0, #32
 800727a:	6298      	str	r0, [r3, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 800727c:	4610      	mov	r0, r2
 800727e:	e782      	b.n	8007186 <HAL_ADCEx_InjectedConfigChannel+0x56>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8007280:	681d      	ldr	r5, [r3, #0]
 8007282:	692c      	ldr	r4, [r5, #16]
 8007284:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007288:	f04f 0c07 	mov.w	ip, #7
 800728c:	fa0c fc02 	lsl.w	ip, ip, r2
 8007290:	ea24 040c 	bic.w	r4, r4, ip
 8007294:	688e      	ldr	r6, [r1, #8]
 8007296:	fa06 f202 	lsl.w	r2, r6, r2
 800729a:	4322      	orrs	r2, r4
 800729c:	612a      	str	r2, [r5, #16]
 800729e:	e785      	b.n	80071ac <HAL_ADCEx_InjectedConfigChannel+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80072a0:	681c      	ldr	r4, [r3, #0]
 80072a2:	68a2      	ldr	r2, [r4, #8]
 80072a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80072a8:	60a2      	str	r2, [r4, #8]
 80072aa:	e783      	b.n	80071b4 <HAL_ADCEx_InjectedConfigChannel+0x84>
      MODIFY_REG(hadc->Instance->JOFR1,
 80072ac:	681c      	ldr	r4, [r3, #0]
 80072ae:	6962      	ldr	r2, [r4, #20]
 80072b0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80072b4:	f022 020f 	bic.w	r2, r2, #15
 80072b8:	68cd      	ldr	r5, [r1, #12]
 80072ba:	432a      	orrs	r2, r5
 80072bc:	6162      	str	r2, [r4, #20]
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80072be:	680a      	ldr	r2, [r1, #0]
 80072c0:	3a10      	subs	r2, #16
 80072c2:	2a01      	cmp	r2, #1
 80072c4:	d919      	bls.n	80072fa <HAL_ADCEx_InjectedConfigChannel+0x1ca>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80072cc:	b003      	add	sp, #12
 80072ce:	bc70      	pop	{r4, r5, r6}
 80072d0:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->JOFR2,
 80072d2:	681c      	ldr	r4, [r3, #0]
 80072d4:	69a2      	ldr	r2, [r4, #24]
 80072d6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80072da:	f022 020f 	bic.w	r2, r2, #15
 80072de:	68cd      	ldr	r5, [r1, #12]
 80072e0:	432a      	orrs	r2, r5
 80072e2:	61a2      	str	r2, [r4, #24]
      break;
 80072e4:	e7eb      	b.n	80072be <HAL_ADCEx_InjectedConfigChannel+0x18e>
      MODIFY_REG(hadc->Instance->JOFR3,
 80072e6:	681c      	ldr	r4, [r3, #0]
 80072e8:	69e2      	ldr	r2, [r4, #28]
 80072ea:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80072ee:	f022 020f 	bic.w	r2, r2, #15
 80072f2:	68cd      	ldr	r5, [r1, #12]
 80072f4:	432a      	orrs	r2, r5
 80072f6:	61e2      	str	r2, [r4, #28]
      break;
 80072f8:	e7e1      	b.n	80072be <HAL_ADCEx_InjectedConfigChannel+0x18e>
    if (hadc->Instance == ADC1)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	4c13      	ldr	r4, [pc, #76]	; (800734c <HAL_ADCEx_InjectedConfigChannel+0x21c>)
 80072fe:	42a2      	cmp	r2, r4
 8007300:	d005      	beq.n	800730e <HAL_ADCEx_InjectedConfigChannel+0x1de>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007304:	f042 0220 	orr.w	r2, r2, #32
 8007308:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800730a:	2001      	movs	r0, #1
 800730c:	e7db      	b.n	80072c6 <HAL_ADCEx_InjectedConfigChannel+0x196>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800730e:	6894      	ldr	r4, [r2, #8]
 8007310:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8007314:	d1d7      	bne.n	80072c6 <HAL_ADCEx_InjectedConfigChannel+0x196>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007316:	6894      	ldr	r4, [r2, #8]
 8007318:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800731c:	6094      	str	r4, [r2, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800731e:	680a      	ldr	r2, [r1, #0]
 8007320:	2a10      	cmp	r2, #16
 8007322:	d1d0      	bne.n	80072c6 <HAL_ADCEx_InjectedConfigChannel+0x196>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007324:	4a0a      	ldr	r2, [pc, #40]	; (8007350 <HAL_ADCEx_InjectedConfigChannel+0x220>)
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	490a      	ldr	r1, [pc, #40]	; (8007354 <HAL_ADCEx_InjectedConfigChannel+0x224>)
 800732a:	fba1 1202 	umull	r1, r2, r1, r2
 800732e:	0c92      	lsrs	r2, r2, #18
 8007330:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007334:	0052      	lsls	r2, r2, #1
 8007336:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8007338:	e002      	b.n	8007340 <HAL_ADCEx_InjectedConfigChannel+0x210>
            wait_loop_index--;
 800733a:	9a01      	ldr	r2, [sp, #4]
 800733c:	3a01      	subs	r2, #1
 800733e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8007340:	9a01      	ldr	r2, [sp, #4]
 8007342:	2a00      	cmp	r2, #0
 8007344:	d1f9      	bne.n	800733a <HAL_ADCEx_InjectedConfigChannel+0x20a>
 8007346:	e7be      	b.n	80072c6 <HAL_ADCEx_InjectedConfigChannel+0x196>
  __HAL_LOCK(hadc);
 8007348:	2002      	movs	r0, #2
 800734a:	e7bf      	b.n	80072cc <HAL_ADCEx_InjectedConfigChannel+0x19c>
 800734c:	40012400 	.word	0x40012400
 8007350:	20000488 	.word	0x20000488
 8007354:	431bde83 	.word	0x431bde83

08007358 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007358:	2800      	cmp	r0, #0
 800735a:	f000 80a1 	beq.w	80074a0 <HAL_CAN_Init+0x148>
{
 800735e:	b538      	push	{r3, r4, r5, lr}
 8007360:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007362:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007366:	b1d3      	cbz	r3, 800739e <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007372:	f7ff fc59 	bl	8006c28 <HAL_GetTick>
 8007376:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	f012 0f01 	tst.w	r2, #1
 8007380:	d110      	bne.n	80073a4 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007382:	f7ff fc51 	bl	8006c28 <HAL_GetTick>
 8007386:	1b40      	subs	r0, r0, r5
 8007388:	280a      	cmp	r0, #10
 800738a:	d9f5      	bls.n	8007378 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800738c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800738e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007392:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007394:	2305      	movs	r3, #5
 8007396:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800739a:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800739c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800739e:	f7fe fdf5 	bl	8005f8c <HAL_CAN_MspInit>
 80073a2:	e7e1      	b.n	8007368 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	f022 0202 	bic.w	r2, r2, #2
 80073aa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80073ac:	f7ff fc3c 	bl	8006c28 <HAL_GetTick>
 80073b0:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	f012 0f02 	tst.w	r2, #2
 80073ba:	d00d      	beq.n	80073d8 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80073bc:	f7ff fc34 	bl	8006c28 <HAL_GetTick>
 80073c0:	1b40      	subs	r0, r0, r5
 80073c2:	280a      	cmp	r0, #10
 80073c4:	d9f5      	bls.n	80073b2 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80073c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073cc:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80073ce:	2305      	movs	r3, #5
 80073d0:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80073d4:	2001      	movs	r0, #1
 80073d6:	e7e1      	b.n	800739c <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80073d8:	7e22      	ldrb	r2, [r4, #24]
 80073da:	2a01      	cmp	r2, #1
 80073dc:	d03d      	beq.n	800745a <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80073e6:	7e63      	ldrb	r3, [r4, #25]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d03b      	beq.n	8007464 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	6813      	ldr	r3, [r2, #0]
 80073f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80073f6:	7ea3      	ldrb	r3, [r4, #26]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d039      	beq.n	8007470 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80073fc:	6822      	ldr	r2, [r4, #0]
 80073fe:	6813      	ldr	r3, [r2, #0]
 8007400:	f023 0320 	bic.w	r3, r3, #32
 8007404:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007406:	7ee3      	ldrb	r3, [r4, #27]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d037      	beq.n	800747c <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	6813      	ldr	r3, [r2, #0]
 8007410:	f043 0310 	orr.w	r3, r3, #16
 8007414:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007416:	7f23      	ldrb	r3, [r4, #28]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d035      	beq.n	8007488 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800741c:	6822      	ldr	r2, [r4, #0]
 800741e:	6813      	ldr	r3, [r2, #0]
 8007420:	f023 0308 	bic.w	r3, r3, #8
 8007424:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007426:	7f63      	ldrb	r3, [r4, #29]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d033      	beq.n	8007494 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	6813      	ldr	r3, [r2, #0]
 8007430:	f023 0304 	bic.w	r3, r3, #4
 8007434:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	68e2      	ldr	r2, [r4, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	6962      	ldr	r2, [r4, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	6862      	ldr	r2, [r4, #4]
 8007446:	3a01      	subs	r2, #1
 8007448:	6821      	ldr	r1, [r4, #0]
 800744a:	4313      	orrs	r3, r2
 800744c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800744e:	2000      	movs	r0, #0
 8007450:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8007452:	2301      	movs	r3, #1
 8007454:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8007458:	e7a0      	b.n	800739c <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e7c0      	b.n	80073e6 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	6813      	ldr	r3, [r2, #0]
 8007468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	e7c2      	b.n	80073f6 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007470:	6822      	ldr	r2, [r4, #0]
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	f043 0320 	orr.w	r3, r3, #32
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	e7c4      	b.n	8007406 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	6813      	ldr	r3, [r2, #0]
 8007480:	f023 0310 	bic.w	r3, r3, #16
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	e7c6      	b.n	8007416 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007488:	6822      	ldr	r2, [r4, #0]
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	f043 0308 	orr.w	r3, r3, #8
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	e7c8      	b.n	8007426 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	f043 0304 	orr.w	r3, r3, #4
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	e7ca      	b.n	8007436 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80074a0:	2001      	movs	r0, #1
}
 80074a2:	4770      	bx	lr

080074a4 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80074a4:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074a6:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d905      	bls.n	80074be <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074b8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80074ba:	2001      	movs	r0, #1
  }
}
 80074bc:	4770      	bx	lr
{
 80074be:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80074c0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80074cc:	694b      	ldr	r3, [r1, #20]
 80074ce:	f003 031f 	and.w	r3, r3, #31
 80074d2:	2001      	movs	r0, #1
 80074d4:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80074d8:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 80074dc:	ea6f 0c03 	mvn.w	ip, r3
 80074e0:	ea20 0003 	bic.w	r0, r0, r3
 80074e4:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80074e8:	69c8      	ldr	r0, [r1, #28]
 80074ea:	b9c0      	cbnz	r0, 800751e <HAL_CAN_ConfigFilter+0x7a>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80074ec:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 80074f0:	ea0c 0000 	and.w	r0, ip, r0
 80074f4:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80074f8:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80074fa:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80074fc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007500:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007504:	3048      	adds	r0, #72	; 0x48
 8007506:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800750a:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800750c:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800750e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8007512:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007516:	3048      	adds	r0, #72	; 0x48
 8007518:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800751c:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800751e:	69c8      	ldr	r0, [r1, #28]
 8007520:	2801      	cmp	r0, #1
 8007522:	d01a      	beq.n	800755a <HAL_CAN_ConfigFilter+0xb6>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007524:	6988      	ldr	r0, [r1, #24]
 8007526:	bb88      	cbnz	r0, 800758c <HAL_CAN_ConfigFilter+0xe8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007528:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800752c:	ea0c 0000 	and.w	r0, ip, r0
 8007530:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007534:	6908      	ldr	r0, [r1, #16]
 8007536:	bb78      	cbnz	r0, 8007598 <HAL_CAN_ConfigFilter+0xf4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007538:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 800753c:	ea0c 0000 	and.w	r0, ip, r0
 8007540:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007544:	6a09      	ldr	r1, [r1, #32]
 8007546:	2901      	cmp	r1, #1
 8007548:	d02c      	beq.n	80075a4 <HAL_CAN_ConfigFilter+0x100>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800754a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8007556:	2000      	movs	r0, #0
}
 8007558:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800755a:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 800755e:	4318      	orrs	r0, r3
 8007560:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007564:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007566:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007568:	f8d1 e000 	ldr.w	lr, [r1]
 800756c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007570:	3048      	adds	r0, #72	; 0x48
 8007572:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007576:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007578:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800757a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800757e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007582:	3048      	adds	r0, #72	; 0x48
 8007584:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8007588:	6044      	str	r4, [r0, #4]
 800758a:	e7cb      	b.n	8007524 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800758c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007590:	4318      	orrs	r0, r3
 8007592:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8007596:	e7cd      	b.n	8007534 <HAL_CAN_ConfigFilter+0x90>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007598:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 800759c:	4318      	orrs	r0, r3
 800759e:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 80075a2:	e7cf      	b.n	8007544 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80075a4:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 80075a8:	430b      	orrs	r3, r1
 80075aa:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 80075ae:	e7cc      	b.n	800754a <HAL_CAN_ConfigFilter+0xa6>

080075b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80075b4:	f890 5020 	ldrb.w	r5, [r0, #32]
 80075b8:	b2ed      	uxtb	r5, r5
 80075ba:	2d01      	cmp	r5, #1
 80075bc:	d006      	beq.n	80075cc <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80075be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075c4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80075c6:	2501      	movs	r5, #1
  }
}
 80075c8:	4628      	mov	r0, r5
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 80075cc:	2302      	movs	r3, #2
 80075ce:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80075d2:	6802      	ldr	r2, [r0, #0]
 80075d4:	6813      	ldr	r3, [r2, #0]
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80075dc:	f7ff fb24 	bl	8006c28 <HAL_GetTick>
 80075e0:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f013 0f01 	tst.w	r3, #1
 80075ea:	d00c      	beq.n	8007606 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075ec:	f7ff fb1c 	bl	8006c28 <HAL_GetTick>
 80075f0:	1b83      	subs	r3, r0, r6
 80075f2:	2b0a      	cmp	r3, #10
 80075f4:	d9f5      	bls.n	80075e2 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075fc:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80075fe:	2305      	movs	r3, #5
 8007600:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8007604:	e7e0      	b.n	80075c8 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007606:	2500      	movs	r5, #0
 8007608:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 800760a:	e7dd      	b.n	80075c8 <HAL_CAN_Start+0x18>

0800760c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8007610:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d005      	beq.n	8007626 <HAL_CAN_Stop+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800761a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800761c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007620:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8007622:	2001      	movs	r0, #1
  }
}
 8007624:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007626:	6802      	ldr	r2, [r0, #0]
 8007628:	6813      	ldr	r3, [r2, #0]
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007630:	f7ff fafa 	bl	8006c28 <HAL_GetTick>
 8007634:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	f012 0f01 	tst.w	r2, #1
 800763e:	d10d      	bne.n	800765c <HAL_CAN_Stop+0x50>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007640:	f7ff faf2 	bl	8006c28 <HAL_GetTick>
 8007644:	1b43      	subs	r3, r0, r5
 8007646:	2b0a      	cmp	r3, #10
 8007648:	d9f5      	bls.n	8007636 <HAL_CAN_Stop+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800764a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800764c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007650:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8007652:	2305      	movs	r3, #5
 8007654:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8007658:	2001      	movs	r0, #1
 800765a:	e7e3      	b.n	8007624 <HAL_CAN_Stop+0x18>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	f022 0202 	bic.w	r2, r2, #2
 8007662:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8007664:	2301      	movs	r3, #1
 8007666:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 800766a:	2000      	movs	r0, #0
 800766c:	e7da      	b.n	8007624 <HAL_CAN_Stop+0x18>

0800766e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800766e:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007670:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007674:	6804      	ldr	r4, [r0, #0]
 8007676:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007678:	f10c 3cff 	add.w	ip, ip, #4294967295
 800767c:	fa5f fc8c 	uxtb.w	ip, ip
 8007680:	f1bc 0f01 	cmp.w	ip, #1
 8007684:	d862      	bhi.n	800774c <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007686:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 800768a:	d059      	beq.n	8007740 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800768c:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007690:	2401      	movs	r4, #1
 8007692:	fa04 f40c 	lsl.w	r4, r4, ip
 8007696:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007698:	688b      	ldr	r3, [r1, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d13d      	bne.n	800771a <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800769e:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 80076a0:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80076a2:	6804      	ldr	r4, [r0, #0]
 80076a4:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 80076a8:	f10c 0318 	add.w	r3, ip, #24
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80076b0:	6803      	ldr	r3, [r0, #0]
 80076b2:	690c      	ldr	r4, [r1, #16]
 80076b4:	f10c 0e18 	add.w	lr, ip, #24
 80076b8:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 80076bc:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80076be:	7d0b      	ldrb	r3, [r1, #20]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d035      	beq.n	8007730 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80076c4:	79d1      	ldrb	r1, [r2, #7]
 80076c6:	7993      	ldrb	r3, [r2, #6]
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80076ce:	7951      	ldrb	r1, [r2, #5]
 80076d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076d4:	7914      	ldrb	r4, [r2, #4]
 80076d6:	6801      	ldr	r1, [r0, #0]
 80076d8:	4323      	orrs	r3, r4
 80076da:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 80076de:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80076e2:	78d1      	ldrb	r1, [r2, #3]
 80076e4:	7893      	ldrb	r3, [r2, #2]
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80076ec:	7851      	ldrb	r1, [r2, #1]
 80076ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076f2:	7811      	ldrb	r1, [r2, #0]
 80076f4:	6802      	ldr	r2, [r0, #0]
 80076f6:	430b      	orrs	r3, r1
 80076f8:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 80076fc:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007700:	6802      	ldr	r2, [r0, #0]
 8007702:	f10c 0c18 	add.w	ip, ip, #24
 8007706:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800770a:	f852 300c 	ldr.w	r3, [r2, ip]
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 8007716:	2000      	movs	r0, #0
 8007718:	e01d      	b.n	8007756 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800771a:	684c      	ldr	r4, [r1, #4]
 800771c:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8007720:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8007722:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007724:	f10c 0418 	add.w	r4, ip, #24
 8007728:	0124      	lsls	r4, r4, #4
 800772a:	6805      	ldr	r5, [r0, #0]
 800772c:	512b      	str	r3, [r5, r4]
 800772e:	e7bf      	b.n	80076b0 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007730:	6803      	ldr	r3, [r0, #0]
 8007732:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8007736:	6859      	ldr	r1, [r3, #4]
 8007738:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800773c:	6059      	str	r1, [r3, #4]
 800773e:	e7c1      	b.n	80076c4 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007746:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8007748:	2001      	movs	r0, #1
 800774a:	e004      	b.n	8007756 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800774c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800774e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007752:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8007754:	2001      	movs	r0, #1
  }
}
 8007756:	bd30      	pop	{r4, r5, pc}

08007758 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007758:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800775c:	3b01      	subs	r3, #1
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d901      	bls.n	8007768 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8007764:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8007766:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007768:	6803      	ldr	r3, [r0, #0]
 800776a:	6898      	ldr	r0, [r3, #8]
 800776c:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 8007770:	d000      	beq.n	8007774 <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>
      freelevel++;
 8007772:	2001      	movs	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 800777a:	d000      	beq.n	800777e <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 800777c:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007784:	d0ef      	beq.n	8007766 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8007786:	3001      	adds	r0, #1
 8007788:	4770      	bx	lr

0800778a <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800778a:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800778e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007792:	fa5f fc8c 	uxtb.w	ip, ip
 8007796:	f1bc 0f01 	cmp.w	ip, #1
 800779a:	f200 80a5 	bhi.w	80078e8 <HAL_CAN_GetRxMessage+0x15e>
{
 800779e:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80077a0:	b951      	cbnz	r1, 80077b8 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80077a2:	6804      	ldr	r4, [r0, #0]
 80077a4:	68e4      	ldr	r4, [r4, #12]
 80077a6:	f014 0f03 	tst.w	r4, #3
 80077aa:	d110      	bne.n	80077ce <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80077ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077b2:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80077b4:	2001      	movs	r0, #1
 80077b6:	e07e      	b.n	80078b6 <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80077b8:	6804      	ldr	r4, [r0, #0]
 80077ba:	6924      	ldr	r4, [r4, #16]
 80077bc:	f014 0f03 	tst.w	r4, #3
 80077c0:	d105      	bne.n	80077ce <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80077c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077c8:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80077ca:	2001      	movs	r0, #1
 80077cc:	e073      	b.n	80078b6 <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80077ce:	6805      	ldr	r5, [r0, #0]
 80077d0:	f101 041b 	add.w	r4, r1, #27
 80077d4:	0124      	lsls	r4, r4, #4
 80077d6:	592c      	ldr	r4, [r5, r4]
 80077d8:	f004 0404 	and.w	r4, r4, #4
 80077dc:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80077de:	2c00      	cmp	r4, #0
 80077e0:	d16b      	bne.n	80078ba <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80077e2:	6805      	ldr	r5, [r0, #0]
 80077e4:	f101 041b 	add.w	r4, r1, #27
 80077e8:	0124      	lsls	r4, r4, #4
 80077ea:	592c      	ldr	r4, [r5, r4]
 80077ec:	0d64      	lsrs	r4, r4, #21
 80077ee:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80077f0:	6804      	ldr	r4, [r0, #0]
 80077f2:	f101 0c1b 	add.w	ip, r1, #27
 80077f6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80077fa:	f854 400c 	ldr.w	r4, [r4, ip]
 80077fe:	f004 0402 	and.w	r4, r4, #2
 8007802:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007804:	6804      	ldr	r4, [r0, #0]
 8007806:	44a4      	add	ip, r4
 8007808:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800780c:	f015 0f08 	tst.w	r5, #8
 8007810:	d05b      	beq.n	80078ca <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007812:	2408      	movs	r4, #8
 8007814:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007816:	6805      	ldr	r5, [r0, #0]
 8007818:	f101 0c1b 	add.w	ip, r1, #27
 800781c:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 8007820:	686d      	ldr	r5, [r5, #4]
 8007822:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8007826:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007828:	6804      	ldr	r4, [r0, #0]
 800782a:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 800782e:	6864      	ldr	r4, [r4, #4]
 8007830:	0c24      	lsrs	r4, r4, #16
 8007832:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007834:	6802      	ldr	r2, [r0, #0]
 8007836:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800783a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800783e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007840:	6802      	ldr	r2, [r0, #0]
 8007842:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007846:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800784a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800784e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007850:	6802      	ldr	r2, [r0, #0]
 8007852:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007856:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800785a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800785e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007860:	6802      	ldr	r2, [r0, #0]
 8007862:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007866:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800786a:	0e12      	lsrs	r2, r2, #24
 800786c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800786e:	6802      	ldr	r2, [r0, #0]
 8007870:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007874:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8007878:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800787a:	6802      	ldr	r2, [r0, #0]
 800787c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007880:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8007884:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8007888:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800788a:	6802      	ldr	r2, [r0, #0]
 800788c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007890:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8007894:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8007898:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800789a:	6802      	ldr	r2, [r0, #0]
 800789c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80078a0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80078a4:	0e12      	lsrs	r2, r2, #24
 80078a6:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80078a8:	b9c1      	cbnz	r1, 80078dc <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80078aa:	6802      	ldr	r2, [r0, #0]
 80078ac:	68d3      	ldr	r3, [r2, #12]
 80078ae:	f043 0320 	orr.w	r3, r3, #32
 80078b2:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80078b4:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80078b6:	bc30      	pop	{r4, r5}
 80078b8:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80078ba:	6805      	ldr	r5, [r0, #0]
 80078bc:	f101 041b 	add.w	r4, r1, #27
 80078c0:	0124      	lsls	r4, r4, #4
 80078c2:	592c      	ldr	r4, [r5, r4]
 80078c4:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80078c6:	6054      	str	r4, [r2, #4]
 80078c8:	e792      	b.n	80077f0 <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80078ca:	f101 051b 	add.w	r5, r1, #27
 80078ce:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80078d2:	6864      	ldr	r4, [r4, #4]
 80078d4:	f004 040f 	and.w	r4, r4, #15
 80078d8:	6114      	str	r4, [r2, #16]
 80078da:	e79c      	b.n	8007816 <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80078dc:	6802      	ldr	r2, [r0, #0]
 80078de:	6913      	ldr	r3, [r2, #16]
 80078e0:	f043 0320 	orr.w	r3, r3, #32
 80078e4:	6113      	str	r3, [r2, #16]
 80078e6:	e7e5      	b.n	80078b4 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80078e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078ee:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80078f0:	2001      	movs	r0, #1
}
 80078f2:	4770      	bx	lr

080078f4 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80078f4:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d905      	bls.n	800790c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007900:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007906:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8007908:	2001      	movs	r0, #1
  }
}
 800790a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800790c:	6802      	ldr	r2, [r0, #0]
 800790e:	6953      	ldr	r3, [r2, #20]
 8007910:	4319      	orrs	r1, r3
 8007912:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8007914:	2000      	movs	r0, #0
 8007916:	4770      	bx	lr

08007918 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007918:	4770      	bx	lr

0800791a <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800791a:	4770      	bx	lr

0800791c <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800791c:	4770      	bx	lr

0800791e <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800791e:	4770      	bx	lr

08007920 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007920:	4770      	bx	lr

08007922 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007922:	4770      	bx	lr

08007924 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007924:	4770      	bx	lr

08007926 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007926:	4770      	bx	lr

08007928 <HAL_CAN_IRQHandler>:
{
 8007928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800792e:	6803      	ldr	r3, [r0, #0]
 8007930:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007932:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007936:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007938:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800793c:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007940:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007944:	f014 0601 	ands.w	r6, r4, #1
 8007948:	d03b      	beq.n	80079c2 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800794a:	f017 0601 	ands.w	r6, r7, #1
 800794e:	d016      	beq.n	800797e <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007950:	2201      	movs	r2, #1
 8007952:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007954:	f017 0f02 	tst.w	r7, #2
 8007958:	d108      	bne.n	800796c <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800795a:	f017 0f04 	tst.w	r7, #4
 800795e:	d10c      	bne.n	800797a <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007960:	f017 0608 	ands.w	r6, r7, #8
 8007964:	d006      	beq.n	8007974 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007966:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800796a:	e008      	b.n	800797e <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800796c:	f7fe f924 	bl	8005bb8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007970:	2600      	movs	r6, #0
 8007972:	e004      	b.n	800797e <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007974:	f7ff ffd0 	bl	8007918 <HAL_CAN_TxMailbox0AbortCallback>
 8007978:	e001      	b.n	800797e <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800797a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800797e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8007982:	d00d      	beq.n	80079a0 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800798a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800798c:	f417 7f00 	tst.w	r7, #512	; 0x200
 8007990:	f040 8086 	bne.w	8007aa0 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007994:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8007998:	f000 8086 	beq.w	8007aa8 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800799c:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80079a0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80079a4:	d00d      	beq.n	80079c2 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80079a6:	682b      	ldr	r3, [r5, #0]
 80079a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80079ac:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80079ae:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80079b2:	f040 8083 	bne.w	8007abc <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80079b6:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80079ba:	f000 8083 	beq.w	8007ac4 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80079be:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80079c2:	f014 0f08 	tst.w	r4, #8
 80079c6:	d007      	beq.n	80079d8 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80079c8:	f01b 0f10 	tst.w	fp, #16
 80079cc:	d004      	beq.n	80079d8 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80079ce:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80079d2:	682b      	ldr	r3, [r5, #0]
 80079d4:	2210      	movs	r2, #16
 80079d6:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80079d8:	f014 0f04 	tst.w	r4, #4
 80079dc:	d002      	beq.n	80079e4 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80079de:	f01b 0f08 	tst.w	fp, #8
 80079e2:	d179      	bne.n	8007ad8 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80079e4:	f014 0f02 	tst.w	r4, #2
 80079e8:	d004      	beq.n	80079f4 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f013 0f03 	tst.w	r3, #3
 80079f2:	d178      	bne.n	8007ae6 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80079f4:	f014 0f40 	tst.w	r4, #64	; 0x40
 80079f8:	d007      	beq.n	8007a0a <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80079fa:	f01a 0f10 	tst.w	sl, #16
 80079fe:	d004      	beq.n	8007a0a <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007a00:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	2210      	movs	r2, #16
 8007a08:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007a0a:	f014 0f20 	tst.w	r4, #32
 8007a0e:	d002      	beq.n	8007a16 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007a10:	f01a 0f08 	tst.w	sl, #8
 8007a14:	d16b      	bne.n	8007aee <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007a16:	f014 0f10 	tst.w	r4, #16
 8007a1a:	d004      	beq.n	8007a26 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f013 0f03 	tst.w	r3, #3
 8007a24:	d16a      	bne.n	8007afc <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007a26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8007a2a:	d002      	beq.n	8007a32 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007a2c:	f018 0f10 	tst.w	r8, #16
 8007a30:	d168      	bne.n	8007b04 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007a32:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8007a36:	d002      	beq.n	8007a3e <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007a38:	f018 0f08 	tst.w	r8, #8
 8007a3c:	d169      	bne.n	8007b12 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007a3e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007a42:	d07a      	beq.n	8007b3a <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007a44:	f018 0f04 	tst.w	r8, #4
 8007a48:	d074      	beq.n	8007b34 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a4a:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007a4e:	d004      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x132>
 8007a50:	f019 0f01 	tst.w	r9, #1
 8007a54:	d001      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8007a56:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a5a:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007a5e:	d004      	beq.n	8007a6a <HAL_CAN_IRQHandler+0x142>
 8007a60:	f019 0f02 	tst.w	r9, #2
 8007a64:	d001      	beq.n	8007a6a <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8007a66:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a6a:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8007a6e:	d004      	beq.n	8007a7a <HAL_CAN_IRQHandler+0x152>
 8007a70:	f019 0f04 	tst.w	r9, #4
 8007a74:	d001      	beq.n	8007a7a <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8007a76:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a7a:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8007a7e:	d059      	beq.n	8007b34 <HAL_CAN_IRQHandler+0x20c>
 8007a80:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8007a84:	d056      	beq.n	8007b34 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8007a86:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8007a8a:	d065      	beq.n	8007b58 <HAL_CAN_IRQHandler+0x230>
 8007a8c:	d858      	bhi.n	8007b40 <HAL_CAN_IRQHandler+0x218>
 8007a8e:	f1b9 0f20 	cmp.w	r9, #32
 8007a92:	d05e      	beq.n	8007b52 <HAL_CAN_IRQHandler+0x22a>
 8007a94:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8007a98:	d142      	bne.n	8007b20 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007a9a:	f046 0620 	orr.w	r6, r6, #32
            break;
 8007a9e:	e044      	b.n	8007b2a <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f7fe f893 	bl	8005bcc <HAL_CAN_TxMailbox1CompleteCallback>
 8007aa6:	e77b      	b.n	80079a0 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007aa8:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8007aac:	d002      	beq.n	8007ab4 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007aae:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8007ab2:	e775      	b.n	80079a0 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f7ff ff30 	bl	800791a <HAL_CAN_TxMailbox1AbortCallback>
 8007aba:	e771      	b.n	80079a0 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007abc:	4628      	mov	r0, r5
 8007abe:	f7fe f88f 	bl	8005be0 <HAL_CAN_TxMailbox2CompleteCallback>
 8007ac2:	e77e      	b.n	80079c2 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007ac4:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8007ac8:	d002      	beq.n	8007ad0 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007aca:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8007ace:	e778      	b.n	80079c2 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f7ff ff23 	bl	800791c <HAL_CAN_TxMailbox2AbortCallback>
 8007ad6:	e774      	b.n	80079c2 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	2208      	movs	r2, #8
 8007adc:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f7ff ff1d 	bl	800791e <HAL_CAN_RxFifo0FullCallback>
 8007ae4:	e77e      	b.n	80079e4 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f7fe f82c 	bl	8005b44 <HAL_CAN_RxFifo0MsgPendingCallback>
 8007aec:	e782      	b.n	80079f4 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007aee:	682b      	ldr	r3, [r5, #0]
 8007af0:	2208      	movs	r2, #8
 8007af2:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007af4:	4628      	mov	r0, r5
 8007af6:	f7ff ff13 	bl	8007920 <HAL_CAN_RxFifo1FullCallback>
 8007afa:	e78c      	b.n	8007a16 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007afc:	4628      	mov	r0, r5
 8007afe:	f7fe f827 	bl	8005b50 <HAL_CAN_RxFifo1MsgPendingCallback>
 8007b02:	e790      	b.n	8007a26 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	2210      	movs	r2, #16
 8007b08:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f7ff ff09 	bl	8007922 <HAL_CAN_SleepCallback>
 8007b10:	e78f      	b.n	8007a32 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	2208      	movs	r2, #8
 8007b16:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f7ff ff03 	bl	8007924 <HAL_CAN_WakeUpFromRxMsgCallback>
 8007b1e:	e78e      	b.n	8007a3e <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8007b20:	f1b9 0f10 	cmp.w	r9, #16
 8007b24:	d101      	bne.n	8007b2a <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8007b26:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007b2a:	682a      	ldr	r2, [r5, #0]
 8007b2c:	6993      	ldr	r3, [r2, #24]
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b32:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	2204      	movs	r2, #4
 8007b38:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007b3a:	b99e      	cbnz	r6, 8007b64 <HAL_CAN_IRQHandler+0x23c>
}
 8007b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8007b40:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8007b44:	d00b      	beq.n	8007b5e <HAL_CAN_IRQHandler+0x236>
 8007b46:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8007b4a:	d1ee      	bne.n	8007b2a <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007b4c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8007b50:	e7eb      	b.n	8007b2a <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007b52:	f046 0610 	orr.w	r6, r6, #16
            break;
 8007b56:	e7e8      	b.n	8007b2a <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8007b58:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8007b5c:	e7e5      	b.n	8007b2a <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8007b5e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8007b62:	e7e2      	b.n	8007b2a <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8007b64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b66:	431e      	orrs	r6, r3
 8007b68:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7ff fedb 	bl	8007926 <HAL_CAN_ErrorCallback>
}
 8007b70:	e7e4      	b.n	8007b3c <HAL_CAN_IRQHandler+0x214>
	...

08007b74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b74:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007b76:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b7c:	041b      	lsls	r3, r3, #16
 8007b7e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007b80:	0200      	lsls	r0, r0, #8
 8007b82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b86:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8007b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007b90:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007b92:	4770      	bx	lr
 8007b94:	e000ed00 	.word	0xe000ed00

08007b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b98:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b9a:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <HAL_NVIC_SetPriority+0x68>)
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ba2:	f1c3 0c07 	rsb	ip, r3, #7
 8007ba6:	f1bc 0f04 	cmp.w	ip, #4
 8007baa:	bf28      	it	cs
 8007bac:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bb0:	f103 0e04 	add.w	lr, r3, #4
 8007bb4:	f1be 0f06 	cmp.w	lr, #6
 8007bb8:	d918      	bls.n	8007bec <HAL_NVIC_SetPriority+0x54>
 8007bba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bbc:	f04f 3eff 	mov.w	lr, #4294967295
 8007bc0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007bc4:	ea21 010c 	bic.w	r1, r1, ip
 8007bc8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bca:	fa0e f303 	lsl.w	r3, lr, r3
 8007bce:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bd2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	db0b      	blt.n	8007bf0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bd8:	0109      	lsls	r1, r1, #4
 8007bda:	b2c9      	uxtb	r1, r1
 8007bdc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007be0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007be4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007be8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bec:	2300      	movs	r3, #0
 8007bee:	e7e5      	b.n	8007bbc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf0:	f000 000f 	and.w	r0, r0, #15
 8007bf4:	0109      	lsls	r1, r1, #4
 8007bf6:	b2c9      	uxtb	r1, r1
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <HAL_NVIC_SetPriority+0x6c>)
 8007bfa:	5419      	strb	r1, [r3, r0]
 8007bfc:	e7f4      	b.n	8007be8 <HAL_NVIC_SetPriority+0x50>
 8007bfe:	bf00      	nop
 8007c00:	e000ed00 	.word	0xe000ed00
 8007c04:	e000ed14 	.word	0xe000ed14

08007c08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	db07      	blt.n	8007c1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c0c:	f000 021f 	and.w	r2, r0, #31
 8007c10:	0940      	lsrs	r0, r0, #5
 8007c12:	2301      	movs	r3, #1
 8007c14:	4093      	lsls	r3, r2
 8007c16:	4a02      	ldr	r2, [pc, #8]	; (8007c20 <HAL_NVIC_EnableIRQ+0x18>)
 8007c18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000e100 	.word	0xe000e100

08007c24 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007c24:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c28:	4905      	ldr	r1, [pc, #20]	; (8007c40 <HAL_NVIC_SystemReset+0x1c>)
 8007c2a:	68ca      	ldr	r2, [r1, #12]
 8007c2c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c30:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <HAL_NVIC_SystemReset+0x20>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60cb      	str	r3, [r1, #12]
 8007c36:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007c3a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007c3c:	e7fd      	b.n	8007c3a <HAL_NVIC_SystemReset+0x16>
 8007c3e:	bf00      	nop
 8007c40:	e000ed00 	.word	0xe000ed00
 8007c44:	05fa0004 	.word	0x05fa0004

08007c48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c48:	3801      	subs	r0, #1
 8007c4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c4e:	d20b      	bcs.n	8007c68 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c54:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c56:	4a05      	ldr	r2, [pc, #20]	; (8007c6c <HAL_SYSTICK_Config+0x24>)
 8007c58:	21f0      	movs	r1, #240	; 0xf0
 8007c5a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c5e:	2000      	movs	r0, #0
 8007c60:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c62:	2207      	movs	r2, #7
 8007c64:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c66:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007c68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007c6a:	4770      	bx	lr
 8007c6c:	e000ed00 	.word	0xe000ed00

08007c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007c74:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8007c76:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c78:	e0a6      	b.n	8007dc8 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007c7a:	4d80      	ldr	r5, [pc, #512]	; (8007e7c <HAL_GPIO_Init+0x20c>)
 8007c7c:	42aa      	cmp	r2, r5
 8007c7e:	d010      	beq.n	8007ca2 <HAL_GPIO_Init+0x32>
 8007c80:	d907      	bls.n	8007c92 <HAL_GPIO_Init+0x22>
 8007c82:	4d7f      	ldr	r5, [pc, #508]	; (8007e80 <HAL_GPIO_Init+0x210>)
 8007c84:	42aa      	cmp	r2, r5
 8007c86:	d00c      	beq.n	8007ca2 <HAL_GPIO_Init+0x32>
 8007c88:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8007c8c:	42aa      	cmp	r2, r5
 8007c8e:	d008      	beq.n	8007ca2 <HAL_GPIO_Init+0x32>
 8007c90:	e013      	b.n	8007cba <HAL_GPIO_Init+0x4a>
 8007c92:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007c96:	42aa      	cmp	r2, r5
 8007c98:	d003      	beq.n	8007ca2 <HAL_GPIO_Init+0x32>
 8007c9a:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8007c9e:	42aa      	cmp	r2, r5
 8007ca0:	d107      	bne.n	8007cb2 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007ca2:	688a      	ldr	r2, [r1, #8]
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	d058      	beq.n	8007d5a <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007ca8:	2a01      	cmp	r2, #1
 8007caa:	d051      	beq.n	8007d50 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8007cac:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007cae:	2408      	movs	r4, #8
 8007cb0:	e003      	b.n	8007cba <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8007cb2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007cb6:	42aa      	cmp	r2, r5
 8007cb8:	d0f3      	beq.n	8007ca2 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007cba:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8007cbe:	d84e      	bhi.n	8007d5e <HAL_GPIO_Init+0xee>
 8007cc0:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007cc2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8007cc6:	d84c      	bhi.n	8007d62 <HAL_GPIO_Init+0xf2>
 8007cc8:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	250f      	movs	r5, #15
 8007cd0:	4095      	lsls	r5, r2
 8007cd2:	ea23 0305 	bic.w	r3, r3, r5
 8007cd6:	fa04 f202 	lsl.w	r2, r4, r2
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cde:	684b      	ldr	r3, [r1, #4]
 8007ce0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007ce4:	d06e      	beq.n	8007dc4 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007ce6:	4b67      	ldr	r3, [pc, #412]	; (8007e84 <HAL_GPIO_Init+0x214>)
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	619a      	str	r2, [r3, #24]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8007cfa:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8007cfe:	1c95      	adds	r5, r2, #2
 8007d00:	4b61      	ldr	r3, [pc, #388]	; (8007e88 <HAL_GPIO_Init+0x218>)
 8007d02:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007d06:	f00c 0303 	and.w	r3, ip, #3
 8007d0a:	009d      	lsls	r5, r3, #2
 8007d0c:	230f      	movs	r3, #15
 8007d0e:	40ab      	lsls	r3, r5
 8007d10:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007d14:	4b5d      	ldr	r3, [pc, #372]	; (8007e8c <HAL_GPIO_Init+0x21c>)
 8007d16:	4298      	cmp	r0, r3
 8007d18:	d029      	beq.n	8007d6e <HAL_GPIO_Init+0xfe>
 8007d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d1e:	4298      	cmp	r0, r3
 8007d20:	f000 808e 	beq.w	8007e40 <HAL_GPIO_Init+0x1d0>
 8007d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d28:	4298      	cmp	r0, r3
 8007d2a:	f000 808b 	beq.w	8007e44 <HAL_GPIO_Init+0x1d4>
 8007d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d32:	4298      	cmp	r0, r3
 8007d34:	d019      	beq.n	8007d6a <HAL_GPIO_Init+0xfa>
 8007d36:	2304      	movs	r3, #4
 8007d38:	e01a      	b.n	8007d70 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007d3a:	68cc      	ldr	r4, [r1, #12]
          break;
 8007d3c:	e7bd      	b.n	8007cba <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007d3e:	68cc      	ldr	r4, [r1, #12]
 8007d40:	3404      	adds	r4, #4
          break;
 8007d42:	e7ba      	b.n	8007cba <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007d44:	68cc      	ldr	r4, [r1, #12]
 8007d46:	3408      	adds	r4, #8
          break;
 8007d48:	e7b7      	b.n	8007cba <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007d4a:	68cc      	ldr	r4, [r1, #12]
 8007d4c:	340c      	adds	r4, #12
          break;
 8007d4e:	e7b4      	b.n	8007cba <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8007d50:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007d52:	2408      	movs	r4, #8
 8007d54:	e7b1      	b.n	8007cba <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007d56:	2400      	movs	r4, #0
 8007d58:	e7af      	b.n	8007cba <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007d5a:	2404      	movs	r4, #4
 8007d5c:	e7ad      	b.n	8007cba <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007d5e:	1d06      	adds	r6, r0, #4
 8007d60:	e7af      	b.n	8007cc2 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007d62:	f1ac 0208 	sub.w	r2, ip, #8
 8007d66:	0092      	lsls	r2, r2, #2
 8007d68:	e7b0      	b.n	8007ccc <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e000      	b.n	8007d70 <HAL_GPIO_Init+0x100>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	40ab      	lsls	r3, r5
 8007d72:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8007d74:	3202      	adds	r2, #2
 8007d76:	4d44      	ldr	r5, [pc, #272]	; (8007e88 <HAL_GPIO_Init+0x218>)
 8007d78:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d7c:	684b      	ldr	r3, [r1, #4]
 8007d7e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007d82:	d061      	beq.n	8007e48 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d84:	4a42      	ldr	r2, [pc, #264]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007d86:	6893      	ldr	r3, [r2, #8]
 8007d88:	ea43 030e 	orr.w	r3, r3, lr
 8007d8c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d8e:	684b      	ldr	r3, [r1, #4]
 8007d90:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8007d94:	d05e      	beq.n	8007e54 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007d96:	4a3e      	ldr	r2, [pc, #248]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007d98:	68d3      	ldr	r3, [r2, #12]
 8007d9a:	ea43 030e 	orr.w	r3, r3, lr
 8007d9e:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007da0:	684b      	ldr	r3, [r1, #4]
 8007da2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007da6:	d05b      	beq.n	8007e60 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007da8:	4a39      	ldr	r2, [pc, #228]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007daa:	6853      	ldr	r3, [r2, #4]
 8007dac:	ea43 030e 	orr.w	r3, r3, lr
 8007db0:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007db2:	684b      	ldr	r3, [r1, #4]
 8007db4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007db8:	d058      	beq.n	8007e6c <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007dba:	4a35      	ldr	r2, [pc, #212]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007dbc:	6813      	ldr	r3, [r2, #0]
 8007dbe:	ea43 030e 	orr.w	r3, r3, lr
 8007dc2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8007dc4:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dc8:	680a      	ldr	r2, [r1, #0]
 8007dca:	fa32 f30c 	lsrs.w	r3, r2, ip
 8007dce:	d053      	beq.n	8007e78 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007dd6:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8007dda:	ea33 0202 	bics.w	r2, r3, r2
 8007dde:	d1f1      	bne.n	8007dc4 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8007de0:	684a      	ldr	r2, [r1, #4]
 8007de2:	2a12      	cmp	r2, #18
 8007de4:	f63f af49 	bhi.w	8007c7a <HAL_GPIO_Init+0xa>
 8007de8:	2a12      	cmp	r2, #18
 8007dea:	f63f af66 	bhi.w	8007cba <HAL_GPIO_Init+0x4a>
 8007dee:	a501      	add	r5, pc, #4	; (adr r5, 8007df4 <HAL_GPIO_Init+0x184>)
 8007df0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8007df4:	08007ca3 	.word	0x08007ca3
 8007df8:	08007d3b 	.word	0x08007d3b
 8007dfc:	08007d45 	.word	0x08007d45
 8007e00:	08007d57 	.word	0x08007d57
 8007e04:	08007cbb 	.word	0x08007cbb
 8007e08:	08007cbb 	.word	0x08007cbb
 8007e0c:	08007cbb 	.word	0x08007cbb
 8007e10:	08007cbb 	.word	0x08007cbb
 8007e14:	08007cbb 	.word	0x08007cbb
 8007e18:	08007cbb 	.word	0x08007cbb
 8007e1c:	08007cbb 	.word	0x08007cbb
 8007e20:	08007cbb 	.word	0x08007cbb
 8007e24:	08007cbb 	.word	0x08007cbb
 8007e28:	08007cbb 	.word	0x08007cbb
 8007e2c:	08007cbb 	.word	0x08007cbb
 8007e30:	08007cbb 	.word	0x08007cbb
 8007e34:	08007cbb 	.word	0x08007cbb
 8007e38:	08007d3f 	.word	0x08007d3f
 8007e3c:	08007d4b 	.word	0x08007d4b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e40:	2301      	movs	r3, #1
 8007e42:	e795      	b.n	8007d70 <HAL_GPIO_Init+0x100>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e793      	b.n	8007d70 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007e48:	4a11      	ldr	r2, [pc, #68]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007e4a:	6893      	ldr	r3, [r2, #8]
 8007e4c:	ea23 030e 	bic.w	r3, r3, lr
 8007e50:	6093      	str	r3, [r2, #8]
 8007e52:	e79c      	b.n	8007d8e <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007e54:	4a0e      	ldr	r2, [pc, #56]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007e56:	68d3      	ldr	r3, [r2, #12]
 8007e58:	ea23 030e 	bic.w	r3, r3, lr
 8007e5c:	60d3      	str	r3, [r2, #12]
 8007e5e:	e79f      	b.n	8007da0 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007e60:	4a0b      	ldr	r2, [pc, #44]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007e62:	6853      	ldr	r3, [r2, #4]
 8007e64:	ea23 030e 	bic.w	r3, r3, lr
 8007e68:	6053      	str	r3, [r2, #4]
 8007e6a:	e7a2      	b.n	8007db2 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e6c:	4a08      	ldr	r2, [pc, #32]	; (8007e90 <HAL_GPIO_Init+0x220>)
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	ea23 030e 	bic.w	r3, r3, lr
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e7a5      	b.n	8007dc4 <HAL_GPIO_Init+0x154>
  }
}
 8007e78:	b002      	add	sp, #8
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	10220000 	.word	0x10220000
 8007e80:	10310000 	.word	0x10310000
 8007e84:	40021000 	.word	0x40021000
 8007e88:	40010000 	.word	0x40010000
 8007e8c:	40010800 	.word	0x40010800
 8007e90:	40010400 	.word	0x40010400

08007e94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e94:	6883      	ldr	r3, [r0, #8]
 8007e96:	4219      	tst	r1, r3
 8007e98:	d001      	beq.n	8007e9e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e9e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ea2:	b10a      	cbz	r2, 8007ea8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ea4:	6101      	str	r1, [r0, #16]
 8007ea6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007ea8:	0409      	lsls	r1, r1, #16
 8007eaa:	6101      	str	r1, [r0, #16]
  }
}
 8007eac:	4770      	bx	lr
	...

08007eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007eb0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	4203      	tst	r3, r0
 8007eb8:	d100      	bne.n	8007ebc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8007eba:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ebc:	4b02      	ldr	r3, [pc, #8]	; (8007ec8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007ebe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ec0:	f7fd fff0 	bl	8005ea4 <HAL_GPIO_EXTI_Callback>
}
 8007ec4:	e7f9      	b.n	8007eba <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007ec6:	bf00      	nop
 8007ec8:	40010400 	.word	0x40010400

08007ecc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ecc:	6803      	ldr	r3, [r0, #0]
 8007ece:	695a      	ldr	r2, [r3, #20]
 8007ed0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007ed4:	d101      	bne.n	8007eda <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8007ed6:	2000      	movs	r0, #0
}
 8007ed8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ede:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007eee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007ef0:	f042 0204 	orr.w	r2, r2, #4
 8007ef4:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8007ef6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8007efa:	2001      	movs	r0, #1
 8007efc:	4770      	bx	lr

08007efe <I2C_WaitOnFlagUntilTimeout>:
{
 8007efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f02:	4606      	mov	r6, r0
 8007f04:	460c      	mov	r4, r1
 8007f06:	4617      	mov	r7, r2
 8007f08:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f0a:	e03b      	b.n	8007f84 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f0c:	f7fe fe8c 	bl	8006c28 <HAL_GetTick>
 8007f10:	9b06      	ldr	r3, [sp, #24]
 8007f12:	1ac0      	subs	r0, r0, r3
 8007f14:	4540      	cmp	r0, r8
 8007f16:	d802      	bhi.n	8007f1e <I2C_WaitOnFlagUntilTimeout+0x20>
 8007f18:	f1b8 0f00 	cmp.w	r8, #0
 8007f1c:	d132      	bne.n	8007f84 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f1e:	2d01      	cmp	r5, #1
 8007f20:	d018      	beq.n	8007f54 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007f22:	6833      	ldr	r3, [r6, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	ea24 0303 	bic.w	r3, r4, r3
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	fab3 f383 	clz	r3, r3
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	429f      	cmp	r7, r3
 8007f34:	d126      	bne.n	8007f84 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f40:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f44:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8007f46:	f042 0220 	orr.w	r2, r2, #32
 8007f4a:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8007f4c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8007f50:	2001      	movs	r0, #1
 8007f52:	e027      	b.n	8007fa4 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	ea24 0303 	bic.w	r3, r4, r3
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	fab3 f383 	clz	r3, r3
 8007f62:	095b      	lsrs	r3, r3, #5
 8007f64:	e7e5      	b.n	8007f32 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f66:	6833      	ldr	r3, [r6, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	ea24 0c03 	bic.w	ip, r4, r3
 8007f6e:	fa1f fc8c 	uxth.w	ip, ip
 8007f72:	fabc fc8c 	clz	ip, ip
 8007f76:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007f7a:	4567      	cmp	r7, ip
 8007f7c:	d111      	bne.n	8007fa2 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8007f7e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007f82:	d1c3      	bne.n	8007f0c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f84:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8007f88:	2d01      	cmp	r5, #1
 8007f8a:	d0ec      	beq.n	8007f66 <I2C_WaitOnFlagUntilTimeout+0x68>
 8007f8c:	6833      	ldr	r3, [r6, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	ea24 0c03 	bic.w	ip, r4, r3
 8007f94:	fa1f fc8c 	uxth.w	ip, ip
 8007f98:	fabc fc8c 	clz	ip, ip
 8007f9c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007fa0:	e7eb      	b.n	8007f7a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8007fa2:	2000      	movs	r0, #0
}
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8007fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fac:	4605      	mov	r5, r0
 8007fae:	460e      	mov	r6, r1
 8007fb0:	4690      	mov	r8, r2
 8007fb2:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fb4:	e053      	b.n	800805e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fbe:	682b      	ldr	r3, [r5, #0]
 8007fc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fc4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fd0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fd4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007fd6:	f042 0204 	orr.w	r2, r2, #4
 8007fda:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007fdc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	e04a      	b.n	800807a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe4:	f7fe fe20 	bl	8006c28 <HAL_GetTick>
 8007fe8:	eba0 0009 	sub.w	r0, r0, r9
 8007fec:	4540      	cmp	r0, r8
 8007fee:	d802      	bhi.n	8007ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8007ff0:	f1b8 0f00 	cmp.w	r8, #0
 8007ff4:	d133      	bne.n	800805e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007ff6:	2f01      	cmp	r7, #1
 8007ff8:	d017      	beq.n	800802a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	ea26 0303 	bic.w	r3, r6, r3
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b00      	subs	r3, #0
 8008006:	bf18      	it	ne
 8008008:	2301      	movne	r3, #1
 800800a:	b343      	cbz	r3, 800805e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800800c:	2300      	movs	r3, #0
 800800e:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008010:	2220      	movs	r2, #32
 8008012:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008016:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800801a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800801c:	f042 0220 	orr.w	r2, r2, #32
 8008020:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8008022:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8008026:	2001      	movs	r0, #1
 8008028:	e027      	b.n	800807a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	ea26 0303 	bic.w	r3, r6, r3
 8008032:	b29b      	uxth	r3, r3
 8008034:	3b00      	subs	r3, #0
 8008036:	bf18      	it	ne
 8008038:	2301      	movne	r3, #1
 800803a:	e7e6      	b.n	800800a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	699c      	ldr	r4, [r3, #24]
 8008040:	ea26 0404 	bic.w	r4, r6, r4
 8008044:	b2a4      	uxth	r4, r4
 8008046:	3c00      	subs	r4, #0
 8008048:	bf18      	it	ne
 800804a:	2401      	movne	r4, #1
 800804c:	b1a4      	cbz	r4, 8008078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800804e:	682b      	ldr	r3, [r5, #0]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008056:	d1ae      	bne.n	8007fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8008058:	f1b8 3fff 	cmp.w	r8, #4294967295
 800805c:	d1c2      	bne.n	8007fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800805e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8008062:	2f01      	cmp	r7, #1
 8008064:	d1ea      	bne.n	800803c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8008066:	682b      	ldr	r3, [r5, #0]
 8008068:	695c      	ldr	r4, [r3, #20]
 800806a:	ea26 0404 	bic.w	r4, r6, r4
 800806e:	b2a4      	uxth	r4, r4
 8008070:	3c00      	subs	r4, #0
 8008072:	bf18      	it	ne
 8008074:	2401      	movne	r4, #1
 8008076:	e7e9      	b.n	800804c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8008078:	2000      	movs	r0, #0
}
 800807a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800807e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800807e:	b570      	push	{r4, r5, r6, lr}
 8008080:	4604      	mov	r4, r0
 8008082:	460d      	mov	r5, r1
 8008084:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800808e:	d121      	bne.n	80080d4 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008090:	4620      	mov	r0, r4
 8008092:	f7ff ff1b 	bl	8007ecc <I2C_IsAcknowledgeFailed>
 8008096:	b9f8      	cbnz	r0, 80080d8 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8008098:	f1b5 3fff 	cmp.w	r5, #4294967295
 800809c:	d0f3      	beq.n	8008086 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800809e:	f7fe fdc3 	bl	8006c28 <HAL_GetTick>
 80080a2:	1b80      	subs	r0, r0, r6
 80080a4:	42a8      	cmp	r0, r5
 80080a6:	d801      	bhi.n	80080ac <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	d1ec      	bne.n	8008086 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080b4:	d1e7      	bne.n	8008086 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80080ba:	2220      	movs	r2, #32
 80080bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080c6:	f042 0220 	orr.w	r2, r2, #32
 80080ca:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80080cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80080d0:	2001      	movs	r0, #1
 80080d2:	e000      	b.n	80080d6 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80080d4:	2000      	movs	r0, #0
}
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80080d8:	2001      	movs	r0, #1
 80080da:	e7fc      	b.n	80080d6 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080080dc <I2C_RequestMemoryWrite>:
{
 80080dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e0:	b085      	sub	sp, #20
 80080e2:	4604      	mov	r4, r0
 80080e4:	460d      	mov	r5, r1
 80080e6:	4691      	mov	r9, r2
 80080e8:	461f      	mov	r7, r3
 80080ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80080ee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080f0:	6803      	ldr	r3, [r0, #0]
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80080f8:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080fa:	9600      	str	r6, [sp, #0]
 80080fc:	4643      	mov	r3, r8
 80080fe:	2200      	movs	r2, #0
 8008100:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008104:	f7ff fefb 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 8008108:	b960      	cbnz	r0, 8008124 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8008110:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008112:	4633      	mov	r3, r6
 8008114:	4642      	mov	r2, r8
 8008116:	4926      	ldr	r1, [pc, #152]	; (80081b0 <I2C_RequestMemoryWrite+0xd4>)
 8008118:	4620      	mov	r0, r4
 800811a:	f7ff ff45 	bl	8007fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800811e:	b168      	cbz	r0, 800813c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8008120:	2001      	movs	r0, #1
 8008122:	e008      	b.n	8008136 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f413 7f80 	tst.w	r3, #256	; 0x100
 800812c:	d002      	beq.n	8008134 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800812e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008132:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8008134:	2003      	movs	r0, #3
}
 8008136:	b005      	add	sp, #20
 8008138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800813c:	2300      	movs	r3, #0
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	695a      	ldr	r2, [r3, #20]
 8008144:	9203      	str	r2, [sp, #12]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800814c:	4632      	mov	r2, r6
 800814e:	4641      	mov	r1, r8
 8008150:	4620      	mov	r0, r4
 8008152:	f7ff ff94 	bl	800807e <I2C_WaitOnTXEFlagUntilTimeout>
 8008156:	b930      	cbnz	r0, 8008166 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008158:	2f01      	cmp	r7, #1
 800815a:	d10f      	bne.n	800817c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	fa5f f689 	uxtb.w	r6, r9
 8008162:	611e      	str	r6, [r3, #16]
 8008164:	e7e7      	b.n	8008136 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008168:	2b04      	cmp	r3, #4
 800816a:	d001      	beq.n	8008170 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 800816c:	2001      	movs	r0, #1
 800816e:	e7e2      	b.n	8008136 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	e7f7      	b.n	800816c <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8008182:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008184:	4632      	mov	r2, r6
 8008186:	4641      	mov	r1, r8
 8008188:	4620      	mov	r0, r4
 800818a:	f7ff ff78 	bl	800807e <I2C_WaitOnTXEFlagUntilTimeout>
 800818e:	b920      	cbnz	r0, 800819a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	fa5f f689 	uxtb.w	r6, r9
 8008196:	611e      	str	r6, [r3, #16]
 8008198:	e7cd      	b.n	8008136 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800819a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800819c:	2b04      	cmp	r3, #4
 800819e:	d001      	beq.n	80081a4 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80081a0:	2001      	movs	r0, #1
 80081a2:	e7c8      	b.n	8008136 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081a4:	6822      	ldr	r2, [r4, #0]
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	e7f7      	b.n	80081a0 <I2C_RequestMemoryWrite+0xc4>
 80081b0:	00010002 	.word	0x00010002

080081b4 <I2C_RequestMemoryRead>:
{
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	4604      	mov	r4, r0
 80081bc:	460d      	mov	r5, r1
 80081be:	4616      	mov	r6, r2
 80081c0:	4699      	mov	r9, r3
 80081c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80081c4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081c8:	6802      	ldr	r2, [r0, #0]
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081d0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081d2:	6803      	ldr	r3, [r0, #0]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80081da:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081dc:	f8cd 8000 	str.w	r8, [sp]
 80081e0:	463b      	mov	r3, r7
 80081e2:	2200      	movs	r2, #0
 80081e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081e8:	f7ff fe89 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 80081ec:	b970      	cbnz	r0, 800820c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081ee:	fa5f fa85 	uxtb.w	sl, r5
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80081f8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081fa:	4643      	mov	r3, r8
 80081fc:	463a      	mov	r2, r7
 80081fe:	4941      	ldr	r1, [pc, #260]	; (8008304 <I2C_RequestMemoryRead+0x150>)
 8008200:	4620      	mov	r0, r4
 8008202:	f7ff fed1 	bl	8007fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008206:	b168      	cbz	r0, 8008224 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8008208:	2001      	movs	r0, #1
 800820a:	e008      	b.n	800821e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008214:	d002      	beq.n	800821c <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800821a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800821c:	2003      	movs	r0, #3
}
 800821e:	b004      	add	sp, #16
 8008220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008224:	2300      	movs	r3, #0
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	9203      	str	r2, [sp, #12]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008234:	4642      	mov	r2, r8
 8008236:	4639      	mov	r1, r7
 8008238:	4620      	mov	r0, r4
 800823a:	f7ff ff20 	bl	800807e <I2C_WaitOnTXEFlagUntilTimeout>
 800823e:	b980      	cbnz	r0, 8008262 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008240:	f1b9 0f01 	cmp.w	r9, #1
 8008244:	d118      	bne.n	8008278 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	b2f6      	uxtb	r6, r6
 800824a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800824c:	4642      	mov	r2, r8
 800824e:	4639      	mov	r1, r7
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff ff14 	bl	800807e <I2C_WaitOnTXEFlagUntilTimeout>
 8008256:	b368      	cbz	r0, 80082b4 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800825a:	2b04      	cmp	r3, #4
 800825c:	d024      	beq.n	80082a8 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 800825e:	2001      	movs	r0, #1
 8008260:	e7dd      	b.n	800821e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008264:	2b04      	cmp	r3, #4
 8008266:	d001      	beq.n	800826c <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8008268:	2001      	movs	r0, #1
 800826a:	e7d8      	b.n	800821e <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	e7f7      	b.n	8008268 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	0a32      	lsrs	r2, r6, #8
 800827c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800827e:	4642      	mov	r2, r8
 8008280:	4639      	mov	r1, r7
 8008282:	4620      	mov	r0, r4
 8008284:	f7ff fefb 	bl	800807e <I2C_WaitOnTXEFlagUntilTimeout>
 8008288:	b918      	cbnz	r0, 8008292 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	b2f6      	uxtb	r6, r6
 800828e:	611e      	str	r6, [r3, #16]
 8008290:	e7dc      	b.n	800824c <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008294:	2b04      	cmp	r3, #4
 8008296:	d001      	beq.n	800829c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8008298:	2001      	movs	r0, #1
 800829a:	e7c0      	b.n	800821e <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800829c:	6822      	ldr	r2, [r4, #0]
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	e7f7      	b.n	8008298 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	e7d4      	b.n	800825e <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082b4:	6822      	ldr	r2, [r4, #0]
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082bc:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082be:	f8cd 8000 	str.w	r8, [sp]
 80082c2:	463b      	mov	r3, r7
 80082c4:	2200      	movs	r2, #0
 80082c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7ff fe17 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 80082d0:	b968      	cbnz	r0, 80082ee <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	f04a 0301 	orr.w	r3, sl, #1
 80082d8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082da:	4643      	mov	r3, r8
 80082dc:	463a      	mov	r2, r7
 80082de:	4909      	ldr	r1, [pc, #36]	; (8008304 <I2C_RequestMemoryRead+0x150>)
 80082e0:	4620      	mov	r0, r4
 80082e2:	f7ff fe61 	bl	8007fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d099      	beq.n	800821e <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 80082ea:	2001      	movs	r0, #1
 80082ec:	e797      	b.n	800821e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80082f6:	d002      	beq.n	80082fe <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082fc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80082fe:	2003      	movs	r0, #3
 8008300:	e78d      	b.n	800821e <I2C_RequestMemoryRead+0x6a>
 8008302:	bf00      	nop
 8008304:	00010002 	.word	0x00010002

08008308 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	460d      	mov	r5, r1
 800830e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	f013 0f04 	tst.w	r3, #4
 8008318:	d121      	bne.n	800835e <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff fdd6 	bl	8007ecc <I2C_IsAcknowledgeFailed>
 8008320:	b9f8      	cbnz	r0, 8008362 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8008322:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008326:	d0f3      	beq.n	8008310 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008328:	f7fe fc7e 	bl	8006c28 <HAL_GetTick>
 800832c:	1b80      	subs	r0, r0, r6
 800832e:	42a8      	cmp	r0, r5
 8008330:	d801      	bhi.n	8008336 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8008332:	2d00      	cmp	r5, #0
 8008334:	d1ec      	bne.n	8008310 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f013 0f04 	tst.w	r3, #4
 800833e:	d1e7      	bne.n	8008310 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008340:	2300      	movs	r3, #0
 8008342:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008344:	2220      	movs	r2, #32
 8008346:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800834a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800834e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008350:	f042 0220 	orr.w	r2, r2, #32
 8008354:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8008356:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800835a:	2001      	movs	r0, #1
 800835c:	e000      	b.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800835e:	2000      	movs	r0, #0
}
 8008360:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008362:	2001      	movs	r0, #1
 8008364:	e7fc      	b.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08008366 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8008366:	b570      	push	{r4, r5, r6, lr}
 8008368:	4604      	mov	r4, r0
 800836a:	460d      	mov	r5, r1
 800836c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800836e:	e014      	b.n	800839a <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008370:	f06f 0210 	mvn.w	r2, #16
 8008374:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008376:	2300      	movs	r3, #0
 8008378:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800837a:	2220      	movs	r2, #32
 800837c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008380:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008384:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008386:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008388:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800838c:	2001      	movs	r0, #1
 800838e:	e025      	b.n	80083dc <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008398:	d010      	beq.n	80083bc <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	6958      	ldr	r0, [r3, #20]
 800839e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083a2:	d11a      	bne.n	80083da <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083a4:	6958      	ldr	r0, [r3, #20]
 80083a6:	f010 0f10 	tst.w	r0, #16
 80083aa:	d1e1      	bne.n	8008370 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ac:	f7fe fc3c 	bl	8006c28 <HAL_GetTick>
 80083b0:	1b80      	subs	r0, r0, r6
 80083b2:	42a8      	cmp	r0, r5
 80083b4:	d8ec      	bhi.n	8008390 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	d1ef      	bne.n	800839a <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 80083ba:	e7e9      	b.n	8008390 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083bc:	2300      	movs	r3, #0
 80083be:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083c0:	2220      	movs	r2, #32
 80083c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80083cc:	f042 0220 	orr.w	r2, r2, #32
 80083d0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80083d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80083d6:	2001      	movs	r0, #1
 80083d8:	e000      	b.n	80083dc <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80083da:	2000      	movs	r0, #0
}
 80083dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080083e0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80083e0:	2800      	cmp	r0, #0
 80083e2:	f000 80cc 	beq.w	800857e <HAL_I2C_Init+0x19e>
{
 80083e6:	b570      	push	{r4, r5, r6, lr}
 80083e8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d077      	beq.n	80084e2 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80083f2:	2324      	movs	r3, #36	; 0x24
 80083f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	6813      	ldr	r3, [r2, #0]
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800840c:	6822      	ldr	r2, [r4, #0]
 800840e:	6813      	ldr	r3, [r2, #0]
 8008410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008414:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008416:	f000 fee5 	bl	80091e4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800841a:	6862      	ldr	r2, [r4, #4]
 800841c:	4b5a      	ldr	r3, [pc, #360]	; (8008588 <HAL_I2C_Init+0x1a8>)
 800841e:	429a      	cmp	r2, r3
 8008420:	d864      	bhi.n	80084ec <HAL_I2C_Init+0x10c>
 8008422:	4b5a      	ldr	r3, [pc, #360]	; (800858c <HAL_I2C_Init+0x1ac>)
 8008424:	4298      	cmp	r0, r3
 8008426:	bf8c      	ite	hi
 8008428:	2300      	movhi	r3, #0
 800842a:	2301      	movls	r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 80a8 	bne.w	8008582 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8008432:	4957      	ldr	r1, [pc, #348]	; (8008590 <HAL_I2C_Init+0x1b0>)
 8008434:	fba1 3100 	umull	r3, r1, r1, r0
 8008438:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800843a:	6825      	ldr	r5, [r4, #0]
 800843c:	686a      	ldr	r2, [r5, #4]
 800843e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008442:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8008446:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008448:	6821      	ldr	r1, [r4, #0]
 800844a:	6a0a      	ldr	r2, [r1, #32]
 800844c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008450:	6866      	ldr	r6, [r4, #4]
 8008452:	4d4d      	ldr	r5, [pc, #308]	; (8008588 <HAL_I2C_Init+0x1a8>)
 8008454:	42ae      	cmp	r6, r5
 8008456:	d84f      	bhi.n	80084f8 <HAL_I2C_Init+0x118>
 8008458:	3301      	adds	r3, #1
 800845a:	4313      	orrs	r3, r2
 800845c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800845e:	6821      	ldr	r1, [r4, #0]
 8008460:	69ca      	ldr	r2, [r1, #28]
 8008462:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8008466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800846a:	6866      	ldr	r6, [r4, #4]
 800846c:	4b46      	ldr	r3, [pc, #280]	; (8008588 <HAL_I2C_Init+0x1a8>)
 800846e:	429e      	cmp	r6, r3
 8008470:	d84c      	bhi.n	800850c <HAL_I2C_Init+0x12c>
 8008472:	1e43      	subs	r3, r0, #1
 8008474:	0076      	lsls	r6, r6, #1
 8008476:	fbb3 f3f6 	udiv	r3, r3, r6
 800847a:	3301      	adds	r3, #1
 800847c:	f640 70fc 	movw	r0, #4092	; 0xffc
 8008480:	4203      	tst	r3, r0
 8008482:	d078      	beq.n	8008576 <HAL_I2C_Init+0x196>
 8008484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008488:	4313      	orrs	r3, r2
 800848a:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800848c:	6821      	ldr	r1, [r4, #0]
 800848e:	680b      	ldr	r3, [r1, #0]
 8008490:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008494:	69e2      	ldr	r2, [r4, #28]
 8008496:	6a20      	ldr	r0, [r4, #32]
 8008498:	4302      	orrs	r2, r0
 800849a:	4313      	orrs	r3, r2
 800849c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800849e:	6821      	ldr	r1, [r4, #0]
 80084a0:	688b      	ldr	r3, [r1, #8]
 80084a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80084a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084aa:	6922      	ldr	r2, [r4, #16]
 80084ac:	68e0      	ldr	r0, [r4, #12]
 80084ae:	4302      	orrs	r2, r0
 80084b0:	4313      	orrs	r3, r2
 80084b2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80084b4:	6821      	ldr	r1, [r4, #0]
 80084b6:	68cb      	ldr	r3, [r1, #12]
 80084b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084bc:	6962      	ldr	r2, [r4, #20]
 80084be:	69a0      	ldr	r0, [r4, #24]
 80084c0:	4302      	orrs	r2, r0
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	6813      	ldr	r3, [r2, #0]
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084d0:	2000      	movs	r0, #0
 80084d2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80084d4:	2320      	movs	r3, #32
 80084d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084da:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084dc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80084e0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80084e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80084e6:	f7fd fe77 	bl	80061d8 <HAL_I2C_MspInit>
 80084ea:	e782      	b.n	80083f2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80084ec:	4b29      	ldr	r3, [pc, #164]	; (8008594 <HAL_I2C_Init+0x1b4>)
 80084ee:	4298      	cmp	r0, r3
 80084f0:	bf8c      	ite	hi
 80084f2:	2300      	movhi	r3, #0
 80084f4:	2301      	movls	r3, #1
 80084f6:	e799      	b.n	800842c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084f8:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80084fc:	fb05 f303 	mul.w	r3, r5, r3
 8008500:	4d25      	ldr	r5, [pc, #148]	; (8008598 <HAL_I2C_Init+0x1b8>)
 8008502:	fba5 5303 	umull	r5, r3, r5, r3
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	3301      	adds	r3, #1
 800850a:	e7a6      	b.n	800845a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	b9bb      	cbnz	r3, 8008540 <HAL_I2C_Init+0x160>
 8008510:	1e45      	subs	r5, r0, #1
 8008512:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8008516:	fbb5 f5fc 	udiv	r5, r5, ip
 800851a:	3501      	adds	r5, #1
 800851c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008520:	fab5 f585 	clz	r5, r5
 8008524:	096d      	lsrs	r5, r5, #5
 8008526:	bb45      	cbnz	r5, 800857a <HAL_I2C_Init+0x19a>
 8008528:	b9c3      	cbnz	r3, 800855c <HAL_I2C_Init+0x17c>
 800852a:	3801      	subs	r0, #1
 800852c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8008530:	fbb0 f3f3 	udiv	r3, r0, r3
 8008534:	3301      	adds	r3, #1
 8008536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800853a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853e:	e7a3      	b.n	8008488 <HAL_I2C_Init+0xa8>
 8008540:	1e45      	subs	r5, r0, #1
 8008542:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 8008546:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800854a:	fbb5 f5fc 	udiv	r5, r5, ip
 800854e:	3501      	adds	r5, #1
 8008550:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008554:	fab5 f585 	clz	r5, r5
 8008558:	096d      	lsrs	r5, r5, #5
 800855a:	e7e4      	b.n	8008526 <HAL_I2C_Init+0x146>
 800855c:	3801      	subs	r0, #1
 800855e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8008562:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008566:	fbb0 f3f3 	udiv	r3, r0, r3
 800856a:	3301      	adds	r3, #1
 800856c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008574:	e788      	b.n	8008488 <HAL_I2C_Init+0xa8>
 8008576:	2304      	movs	r3, #4
 8008578:	e786      	b.n	8008488 <HAL_I2C_Init+0xa8>
 800857a:	2301      	movs	r3, #1
 800857c:	e784      	b.n	8008488 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800857e:	2001      	movs	r0, #1
}
 8008580:	4770      	bx	lr
    return HAL_ERROR;
 8008582:	2001      	movs	r0, #1
 8008584:	e7ac      	b.n	80084e0 <HAL_I2C_Init+0x100>
 8008586:	bf00      	nop
 8008588:	000186a0 	.word	0x000186a0
 800858c:	001e847f 	.word	0x001e847f
 8008590:	431bde83 	.word	0x431bde83
 8008594:	003d08ff 	.word	0x003d08ff
 8008598:	10624dd3 	.word	0x10624dd3

0800859c <HAL_I2C_Mem_Write>:
{
 800859c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085a0:	b083      	sub	sp, #12
 80085a2:	4604      	mov	r4, r0
 80085a4:	460f      	mov	r7, r1
 80085a6:	4690      	mov	r8, r2
 80085a8:	4699      	mov	r9, r3
 80085aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80085ac:	f7fe fb3c 	bl	8006c28 <HAL_GetTick>
 80085b0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80085b2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80085b6:	b2c0      	uxtb	r0, r0
 80085b8:	2820      	cmp	r0, #32
 80085ba:	d003      	beq.n	80085c4 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80085bc:	2002      	movs	r0, #2
}
 80085be:	b003      	add	sp, #12
 80085c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085c4:	9500      	str	r5, [sp, #0]
 80085c6:	2319      	movs	r3, #25
 80085c8:	2201      	movs	r2, #1
 80085ca:	494b      	ldr	r1, [pc, #300]	; (80086f8 <HAL_I2C_Mem_Write+0x15c>)
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7ff fc96 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f040 8089 	bne.w	80086ea <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 80085d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80085dc:	2b01      	cmp	r3, #1
 80085de:	f000 8086 	beq.w	80086ee <HAL_I2C_Mem_Write+0x152>
 80085e2:	2301      	movs	r3, #1
 80085e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	f012 0f01 	tst.w	r2, #1
 80085f0:	d103      	bne.n	80085fa <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	f042 0201 	orr.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	6813      	ldr	r3, [r2, #0]
 80085fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008602:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008604:	2321      	movs	r3, #33	; 0x21
 8008606:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800860a:	2340      	movs	r3, #64	; 0x40
 800860c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008610:	2300      	movs	r3, #0
 8008612:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008616:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008618:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800861c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800861e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008620:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008622:	4b36      	ldr	r3, [pc, #216]	; (80086fc <HAL_I2C_Mem_Write+0x160>)
 8008624:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008626:	9501      	str	r5, [sp, #4]
 8008628:	9600      	str	r6, [sp, #0]
 800862a:	464b      	mov	r3, r9
 800862c:	4642      	mov	r2, r8
 800862e:	4639      	mov	r1, r7
 8008630:	4620      	mov	r0, r4
 8008632:	f7ff fd53 	bl	80080dc <I2C_RequestMemoryWrite>
 8008636:	2800      	cmp	r0, #0
 8008638:	d15b      	bne.n	80086f2 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 800863a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800863c:	2b00      	cmp	r3, #0
 800863e:	d035      	beq.n	80086ac <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008640:	462a      	mov	r2, r5
 8008642:	4631      	mov	r1, r6
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff fd1a 	bl	800807e <I2C_WaitOnTXEFlagUntilTimeout>
 800864a:	bb20      	cbnz	r0, 8008696 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800864c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	7812      	ldrb	r2, [r2, #0]
 8008652:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008654:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008656:	1c53      	adds	r3, r2, #1
 8008658:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800865a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800865c:	3901      	subs	r1, #1
 800865e:	b289      	uxth	r1, r1
 8008660:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008662:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	6958      	ldr	r0, [r3, #20]
 8008670:	f010 0f04 	tst.w	r0, #4
 8008674:	d0e1      	beq.n	800863a <HAL_I2C_Mem_Write+0x9e>
 8008676:	2900      	cmp	r1, #0
 8008678:	d0df      	beq.n	800863a <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800867a:	7852      	ldrb	r2, [r2, #1]
 800867c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800867e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008680:	3301      	adds	r3, #1
 8008682:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008684:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008686:	3b01      	subs	r3, #1
 8008688:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800868a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29b      	uxth	r3, r3
 8008692:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008694:	e7d1      	b.n	800863a <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008698:	2b04      	cmp	r3, #4
 800869a:	d001      	beq.n	80086a0 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 800869c:	2001      	movs	r0, #1
 800869e:	e78e      	b.n	80085be <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a0:	6822      	ldr	r2, [r4, #0]
 80086a2:	6813      	ldr	r3, [r2, #0]
 80086a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	e7f7      	b.n	800869c <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086ac:	462a      	mov	r2, r5
 80086ae:	4631      	mov	r1, r6
 80086b0:	4620      	mov	r0, r4
 80086b2:	f7ff fe29 	bl	8008308 <I2C_WaitOnBTFFlagUntilTimeout>
 80086b6:	b150      	cbz	r0, 80086ce <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d001      	beq.n	80086c2 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 80086be:	2001      	movs	r0, #1
 80086c0:	e77d      	b.n	80085be <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	6813      	ldr	r3, [r2, #0]
 80086c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	e7f7      	b.n	80086be <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	6813      	ldr	r3, [r2, #0]
 80086d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086d6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80086d8:	2320      	movs	r3, #32
 80086da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086de:	2300      	movs	r3, #0
 80086e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80086e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80086e8:	e769      	b.n	80085be <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80086ea:	2002      	movs	r0, #2
 80086ec:	e767      	b.n	80085be <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80086ee:	2002      	movs	r0, #2
 80086f0:	e765      	b.n	80085be <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80086f2:	2001      	movs	r0, #1
 80086f4:	e763      	b.n	80085be <HAL_I2C_Mem_Write+0x22>
 80086f6:	bf00      	nop
 80086f8:	00100002 	.word	0x00100002
 80086fc:	ffff0000 	.word	0xffff0000

08008700 <HAL_I2C_Mem_Read>:
{
 8008700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008704:	b089      	sub	sp, #36	; 0x24
 8008706:	4604      	mov	r4, r0
 8008708:	460f      	mov	r7, r1
 800870a:	4690      	mov	r8, r2
 800870c:	4699      	mov	r9, r3
 800870e:	9e12      	ldr	r6, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8008714:	f7fe fa88 	bl	8006c28 <HAL_GetTick>
 8008718:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800871a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800871e:	b2c0      	uxtb	r0, r0
 8008720:	2820      	cmp	r0, #32
 8008722:	d004      	beq.n	800872e <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8008724:	2702      	movs	r7, #2
}
 8008726:	4638      	mov	r0, r7
 8008728:	b009      	add	sp, #36	; 0x24
 800872a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800872e:	9500      	str	r5, [sp, #0]
 8008730:	2319      	movs	r3, #25
 8008732:	2201      	movs	r2, #1
 8008734:	4981      	ldr	r1, [pc, #516]	; (800893c <HAL_I2C_Mem_Read+0x23c>)
 8008736:	4620      	mov	r0, r4
 8008738:	f7ff fbe1 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 800873c:	2800      	cmp	r0, #0
 800873e:	f040 8172 	bne.w	8008a26 <HAL_I2C_Mem_Read+0x326>
    __HAL_LOCK(hi2c);
 8008742:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008746:	2b01      	cmp	r3, #1
 8008748:	f000 816f 	beq.w	8008a2a <HAL_I2C_Mem_Read+0x32a>
 800874c:	2301      	movs	r3, #1
 800874e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	f012 0f01 	tst.w	r2, #1
 800875a:	d103      	bne.n	8008764 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	6813      	ldr	r3, [r2, #0]
 8008768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800876c:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800876e:	2322      	movs	r3, #34	; 0x22
 8008770:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008774:	2340      	movs	r3, #64	; 0x40
 8008776:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800877a:	2300      	movs	r3, #0
 800877c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800877e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008780:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008782:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8008786:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008788:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800878a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800878c:	4b6c      	ldr	r3, [pc, #432]	; (8008940 <HAL_I2C_Mem_Read+0x240>)
 800878e:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008790:	9501      	str	r5, [sp, #4]
 8008792:	9600      	str	r6, [sp, #0]
 8008794:	464b      	mov	r3, r9
 8008796:	4642      	mov	r2, r8
 8008798:	4639      	mov	r1, r7
 800879a:	4620      	mov	r0, r4
 800879c:	f7ff fd0a 	bl	80081b4 <I2C_RequestMemoryRead>
 80087a0:	4607      	mov	r7, r0
 80087a2:	2800      	cmp	r0, #0
 80087a4:	f040 8143 	bne.w	8008a2e <HAL_I2C_Mem_Read+0x32e>
    if (hi2c->XferSize == 0U)
 80087a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80087aa:	b95b      	cbnz	r3, 80087c4 <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ac:	9303      	str	r3, [sp, #12]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	9203      	str	r2, [sp, #12]
 80087b4:	699a      	ldr	r2, [r3, #24]
 80087b6:	9203      	str	r2, [sp, #12]
 80087b8:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e0ed      	b.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
    else if (hi2c->XferSize == 1U)
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d00f      	beq.n	80087e8 <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d021      	beq.n	8008810 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	6813      	ldr	r3, [r2, #0]
 80087d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087d4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087d6:	2300      	movs	r3, #0
 80087d8:	9306      	str	r3, [sp, #24]
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	9206      	str	r2, [sp, #24]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	9306      	str	r3, [sp, #24]
 80087e4:	9b06      	ldr	r3, [sp, #24]
 80087e6:	e0db      	b.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087e8:	6822      	ldr	r2, [r4, #0]
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80087f2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087f4:	2300      	movs	r3, #0
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	695a      	ldr	r2, [r3, #20]
 80087fc:	9204      	str	r2, [sp, #16]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	9204      	str	r2, [sp, #16]
 8008802:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800880a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800880c:	b662      	cpsie	i
}
 800880e:	e0c7      	b.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008810:	6822      	ldr	r2, [r4, #0]
 8008812:	6813      	ldr	r3, [r2, #0]
 8008814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008818:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800881a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800881c:	2300      	movs	r3, #0
 800881e:	9305      	str	r3, [sp, #20]
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	695a      	ldr	r2, [r3, #20]
 8008824:	9205      	str	r2, [sp, #20]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	9205      	str	r2, [sp, #20]
 800882a:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008832:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008834:	b662      	cpsie	i
}
 8008836:	e0b3      	b.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008838:	462a      	mov	r2, r5
 800883a:	4631      	mov	r1, r6
 800883c:	4620      	mov	r0, r4
 800883e:	f7ff fd92 	bl	8008366 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008842:	2800      	cmp	r0, #0
 8008844:	f040 80f5 	bne.w	8008a32 <HAL_I2C_Mem_Read+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800884e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008852:	3301      	adds	r3, #1
 8008854:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008856:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008858:	3b01      	subs	r3, #1
 800885a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800885c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29b      	uxth	r3, r3
 8008864:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008866:	e09b      	b.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008868:	9500      	str	r5, [sp, #0]
 800886a:	4633      	mov	r3, r6
 800886c:	2200      	movs	r2, #0
 800886e:	4935      	ldr	r1, [pc, #212]	; (8008944 <HAL_I2C_Mem_Read+0x244>)
 8008870:	4620      	mov	r0, r4
 8008872:	f7ff fb44 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 8008876:	2800      	cmp	r0, #0
 8008878:	f040 80df 	bne.w	8008a3a <HAL_I2C_Mem_Read+0x33a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008884:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008886:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800888e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008892:	3301      	adds	r3, #1
 8008894:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008896:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008898:	3b01      	subs	r3, #1
 800889a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800889c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80088a6:	4b28      	ldr	r3, [pc, #160]	; (8008948 <HAL_I2C_Mem_Read+0x248>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	4a27      	ldr	r2, [pc, #156]	; (800894c <HAL_I2C_Mem_Read+0x24c>)
 80088ae:	fba2 2303 	umull	r2, r3, r2, r3
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80088b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80088bc:	9307      	str	r3, [sp, #28]
            count--;
 80088be:	9b07      	ldr	r3, [sp, #28]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 80088c4:	9b07      	ldr	r3, [sp, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d028      	beq.n	800891c <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	695a      	ldr	r2, [r3, #20]
 80088ce:	f012 0f04 	tst.w	r2, #4
 80088d2:	d0f4      	beq.n	80088be <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088da:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80088e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e6:	3301      	adds	r3, #1
 80088e8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80088ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80088ec:	3b01      	subs	r3, #1
 80088ee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80088f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80088fa:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008902:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008906:	3301      	adds	r3, #1
 8008908:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800890a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800890c:	3b01      	subs	r3, #1
 800890e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008910:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008912:	b29b      	uxth	r3, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	b29b      	uxth	r3, r3
 8008918:	8563      	strh	r3, [r4, #42]	; 0x2a
 800891a:	e041      	b.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
              hi2c->PreviousState       = I2C_STATE_NONE;
 800891c:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800891e:	2220      	movs	r2, #32
 8008920:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008924:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008928:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800892a:	f042 0220 	orr.w	r2, r2, #32
 800892e:	6422      	str	r2, [r4, #64]	; 0x40
 8008930:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8008932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8008936:	2701      	movs	r7, #1
 8008938:	e6f5      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
 800893a:	bf00      	nop
 800893c:	00100002 	.word	0x00100002
 8008940:	ffff0000 	.word	0xffff0000
 8008944:	00010004 	.word	0x00010004
 8008948:	20000488 	.word	0x20000488
 800894c:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008950:	462a      	mov	r2, r5
 8008952:	4631      	mov	r1, r6
 8008954:	4620      	mov	r0, r4
 8008956:	f7ff fd06 	bl	8008366 <I2C_WaitOnRXNEFlagUntilTimeout>
 800895a:	2800      	cmp	r0, #0
 800895c:	d16f      	bne.n	8008a3e <HAL_I2C_Mem_Read+0x33e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008964:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008966:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008968:	1c53      	adds	r3, r2, #1
 800896a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800896c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800896e:	3b01      	subs	r3, #1
 8008970:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008972:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008974:	b29b      	uxth	r3, r3
 8008976:	3b01      	subs	r3, #1
 8008978:	b29b      	uxth	r3, r3
 800897a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	6959      	ldr	r1, [r3, #20]
 8008980:	f011 0f04 	tst.w	r1, #4
 8008984:	d00c      	beq.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800898a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800898c:	3301      	adds	r3, #1
 800898e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008990:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008992:	3b01      	subs	r3, #1
 8008994:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008996:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29b      	uxth	r3, r3
 800899e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80089a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d036      	beq.n	8008a14 <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d8d2      	bhi.n	8008950 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	f43f af44 	beq.w	8008838 <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	f47f af59 	bne.w	8008868 <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089b6:	9500      	str	r5, [sp, #0]
 80089b8:	4633      	mov	r3, r6
 80089ba:	2200      	movs	r2, #0
 80089bc:	4921      	ldr	r1, [pc, #132]	; (8008a44 <HAL_I2C_Mem_Read+0x344>)
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff fa9d 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d136      	bne.n	8008a36 <HAL_I2C_Mem_Read+0x336>
  __ASM volatile ("cpsid i" : : : "memory");
 80089c8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	6813      	ldr	r3, [r2, #0]
 80089ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089d2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80089dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089de:	3301      	adds	r3, #1
 80089e0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80089e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80089e4:	3b01      	subs	r3, #1
 80089e6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80089e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80089f2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089fa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80089fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089fe:	3301      	adds	r3, #1
 8008a00:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008a02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a04:	3b01      	subs	r3, #1
 8008a06:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008a08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008a12:	e7c5      	b.n	80089a0 <HAL_I2C_Mem_Read+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a14:	2320      	movs	r3, #32
 8008a16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008a20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8008a24:	e67f      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8008a26:	2702      	movs	r7, #2
 8008a28:	e67d      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8008a2a:	2702      	movs	r7, #2
 8008a2c:	e67b      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8008a2e:	2701      	movs	r7, #1
 8008a30:	e679      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8008a32:	2701      	movs	r7, #1
 8008a34:	e677      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8008a36:	2701      	movs	r7, #1
 8008a38:	e675      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8008a3a:	2701      	movs	r7, #1
 8008a3c:	e673      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8008a3e:	2701      	movs	r7, #1
 8008a40:	e671      	b.n	8008726 <HAL_I2C_Mem_Read+0x26>
 8008a42:	bf00      	nop
 8008a44:	00010004 	.word	0x00010004

08008a48 <HAL_I2C_IsDeviceReady>:
{
 8008a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4688      	mov	r8, r1
 8008a52:	4691      	mov	r9, r2
 8008a54:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8008a56:	f7fe f8e7 	bl	8006c28 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b20      	cmp	r3, #32
 8008a62:	d003      	beq.n	8008a6c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8008a64:	2002      	movs	r0, #2
}
 8008a66:	b005      	add	sp, #20
 8008a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a6c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a6e:	9000      	str	r0, [sp, #0]
 8008a70:	2319      	movs	r3, #25
 8008a72:	2201      	movs	r2, #1
 8008a74:	4957      	ldr	r1, [pc, #348]	; (8008bd4 <HAL_I2C_IsDeviceReady+0x18c>)
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7ff fa41 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f040 80a0 	bne.w	8008bc2 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8008a82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	f000 809d 	beq.w	8008bc6 <HAL_I2C_IsDeviceReady+0x17e>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	f012 0f01 	tst.w	r2, #1
 8008a9a:	d103      	bne.n	8008aa4 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	f042 0201 	orr.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aac:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008aae:	2324      	movs	r3, #36	; 0x24
 8008ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ab4:	2700      	movs	r7, #0
 8008ab6:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ab8:	4b47      	ldr	r3, [pc, #284]	; (8008bd8 <HAL_I2C_IsDeviceReady+0x190>)
 8008aba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008abc:	e040      	b.n	8008b40 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ac6:	d002      	beq.n	8008ace <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008acc:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8008ace:	2003      	movs	r0, #3
 8008ad0:	e7c9      	b.n	8008a66 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008ad2:	23a0      	movs	r3, #160	; 0xa0
 8008ad4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	6953      	ldr	r3, [r2, #20]
 8008adc:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008ae0:	6952      	ldr	r2, [r2, #20]
 8008ae2:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008ae6:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8008aea:	fa5f fc8c 	uxtb.w	ip, ip
 8008aee:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8008af2:	d009      	beq.n	8008b08 <HAL_I2C_IsDeviceReady+0xc0>
 8008af4:	b943      	cbnz	r3, 8008b08 <HAL_I2C_IsDeviceReady+0xc0>
 8008af6:	b93a      	cbnz	r2, 8008b08 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008af8:	f7fe f896 	bl	8006c28 <HAL_GetTick>
 8008afc:	1b80      	subs	r0, r0, r6
 8008afe:	42a8      	cmp	r0, r5
 8008b00:	d8e7      	bhi.n	8008ad2 <HAL_I2C_IsDeviceReady+0x8a>
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	d1e8      	bne.n	8008ad8 <HAL_I2C_IsDeviceReady+0x90>
 8008b06:	e7e4      	b.n	8008ad2 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8008b08:	2320      	movs	r3, #32
 8008b0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	f012 0f02 	tst.w	r2, #2
 8008b16:	d131      	bne.n	8008b7c <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b1e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b26:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b28:	9600      	str	r6, [sp, #0]
 8008b2a:	2319      	movs	r3, #25
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	4929      	ldr	r1, [pc, #164]	; (8008bd4 <HAL_I2C_IsDeviceReady+0x18c>)
 8008b30:	4620      	mov	r0, r4
 8008b32:	f7ff f9e4 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d149      	bne.n	8008bce <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8008b3a:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8008b3c:	454f      	cmp	r7, r9
 8008b3e:	d238      	bcs.n	8008bb2 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	6813      	ldr	r3, [r2, #0]
 8008b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b48:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008b4a:	9600      	str	r6, [sp, #0]
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b54:	4620      	mov	r0, r4
 8008b56:	f7ff f9d2 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d1af      	bne.n	8008abe <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8008b64:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8008b66:	f7fe f85f 	bl	8006c28 <HAL_GetTick>
 8008b6a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b6c:	6822      	ldr	r2, [r4, #0]
 8008b6e:	6953      	ldr	r3, [r2, #20]
 8008b70:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008b74:	6952      	ldr	r2, [r2, #20]
 8008b76:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008b7a:	e7b4      	b.n	8008ae6 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b82:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b84:	2300      	movs	r3, #0
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	695a      	ldr	r2, [r3, #20]
 8008b8c:	9203      	str	r2, [sp, #12]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b94:	9600      	str	r6, [sp, #0]
 8008b96:	2319      	movs	r3, #25
 8008b98:	2201      	movs	r2, #1
 8008b9a:	490e      	ldr	r1, [pc, #56]	; (8008bd4 <HAL_I2C_IsDeviceReady+0x18c>)
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7ff f9ae 	bl	8007efe <I2C_WaitOnFlagUntilTimeout>
 8008ba2:	b990      	cbnz	r0, 8008bca <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8008baa:	2300      	movs	r3, #0
 8008bac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8008bb0:	e759      	b.n	8008a66 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008bb2:	2320      	movs	r3, #32
 8008bb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e751      	b.n	8008a66 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8008bc2:	2002      	movs	r0, #2
 8008bc4:	e74f      	b.n	8008a66 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8008bc6:	2002      	movs	r0, #2
 8008bc8:	e74d      	b.n	8008a66 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8008bca:	2001      	movs	r0, #1
 8008bcc:	e74b      	b.n	8008a66 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8008bce:	2001      	movs	r0, #1
 8008bd0:	e749      	b.n	8008a66 <HAL_I2C_IsDeviceReady+0x1e>
 8008bd2:	bf00      	nop
 8008bd4:	00100002 	.word	0x00100002
 8008bd8:	ffff0000 	.word	0xffff0000

08008bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008bdc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008bde:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <RCC_Delay+0x24>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <RCC_Delay+0x28>)
 8008be4:	fba2 2303 	umull	r2, r3, r2, r3
 8008be8:	0a5b      	lsrs	r3, r3, #9
 8008bea:	fb00 f303 	mul.w	r3, r0, r3
 8008bee:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008bf0:	bf00      	nop
  }
  while (Delay --);
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	1e5a      	subs	r2, r3, #1
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1f9      	bne.n	8008bf0 <RCC_Delay+0x14>
}
 8008bfc:	b002      	add	sp, #8
 8008bfe:	4770      	bx	lr
 8008c00:	20000488 	.word	0x20000488
 8008c04:	10624dd3 	.word	0x10624dd3

08008c08 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f000 81f1 	beq.w	8008ff0 <HAL_RCC_OscConfig+0x3e8>
{
 8008c0e:	b570      	push	{r4, r5, r6, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c14:	6803      	ldr	r3, [r0, #0]
 8008c16:	f013 0f01 	tst.w	r3, #1
 8008c1a:	d02c      	beq.n	8008c76 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c1c:	4b99      	ldr	r3, [pc, #612]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f003 030c 	and.w	r3, r3, #12
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d01d      	beq.n	8008c64 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c28:	4b96      	ldr	r3, [pc, #600]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f003 030c 	and.w	r3, r3, #12
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d012      	beq.n	8008c5a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3a:	d041      	beq.n	8008cc0 <HAL_RCC_OscConfig+0xb8>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d155      	bne.n	8008cec <HAL_RCC_OscConfig+0xe4>
 8008c40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c44:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	e037      	b.n	8008cca <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c5a:	4b8a      	ldr	r3, [pc, #552]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008c62:	d0e7      	beq.n	8008c34 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c64:	4b87      	ldr	r3, [pc, #540]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008c6c:	d003      	beq.n	8008c76 <HAL_RCC_OscConfig+0x6e>
 8008c6e:	6863      	ldr	r3, [r4, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 81bf 	beq.w	8008ff4 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	f013 0f02 	tst.w	r3, #2
 8008c7c:	d075      	beq.n	8008d6a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c7e:	4b81      	ldr	r3, [pc, #516]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f013 0f0c 	tst.w	r3, #12
 8008c86:	d05f      	beq.n	8008d48 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008c88:	4b7e      	ldr	r3, [pc, #504]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f003 030c 	and.w	r3, r3, #12
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d054      	beq.n	8008d3e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 808a 	beq.w	8008db0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8008c9c:	4b7a      	ldr	r3, [pc, #488]	; (8008e88 <HAL_RCC_OscConfig+0x280>)
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008ca2:	f7fd ffc1 	bl	8006c28 <HAL_GetTick>
 8008ca6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca8:	4b76      	ldr	r3, [pc, #472]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f013 0f02 	tst.w	r3, #2
 8008cb0:	d175      	bne.n	8008d9e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cb2:	f7fd ffb9 	bl	8006c28 <HAL_GetTick>
 8008cb6:	1b40      	subs	r0, r0, r5
 8008cb8:	2802      	cmp	r0, #2
 8008cba:	d9f5      	bls.n	8008ca8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8008cbc:	2003      	movs	r0, #3
 8008cbe:	e19e      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cc0:	4a70      	ldr	r2, [pc, #448]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008cc2:	6813      	ldr	r3, [r2, #0]
 8008cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cc8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	b343      	cbz	r3, 8008d20 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8008cce:	f7fd ffab 	bl	8006c28 <HAL_GetTick>
 8008cd2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cd4:	4b6b      	ldr	r3, [pc, #428]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008cdc:	d1cb      	bne.n	8008c76 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cde:	f7fd ffa3 	bl	8006c28 <HAL_GetTick>
 8008ce2:	1b40      	subs	r0, r0, r5
 8008ce4:	2864      	cmp	r0, #100	; 0x64
 8008ce6:	d9f5      	bls.n	8008cd4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8008ce8:	2003      	movs	r0, #3
 8008cea:	e188      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cf0:	d009      	beq.n	8008d06 <HAL_RCC_OscConfig+0xfe>
 8008cf2:	4b64      	ldr	r3, [pc, #400]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e7e1      	b.n	8008cca <HAL_RCC_OscConfig+0xc2>
 8008d06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d0a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	e7d4      	b.n	8008cca <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8008d20:	f7fd ff82 	bl	8006c28 <HAL_GetTick>
 8008d24:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d26:	4b57      	ldr	r3, [pc, #348]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d2e:	d0a2      	beq.n	8008c76 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d30:	f7fd ff7a 	bl	8006c28 <HAL_GetTick>
 8008d34:	1b40      	subs	r0, r0, r5
 8008d36:	2864      	cmp	r0, #100	; 0x64
 8008d38:	d9f5      	bls.n	8008d26 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8008d3a:	2003      	movs	r0, #3
 8008d3c:	e15f      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008d3e:	4b51      	ldr	r3, [pc, #324]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008d46:	d1a5      	bne.n	8008c94 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d48:	4b4e      	ldr	r3, [pc, #312]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f013 0f02 	tst.w	r3, #2
 8008d50:	d003      	beq.n	8008d5a <HAL_RCC_OscConfig+0x152>
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	f040 814f 	bne.w	8008ff8 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d5a:	4a4a      	ldr	r2, [pc, #296]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008d5c:	6813      	ldr	r3, [r2, #0]
 8008d5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d62:	6961      	ldr	r1, [r4, #20]
 8008d64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008d68:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f013 0f08 	tst.w	r3, #8
 8008d70:	d033      	beq.n	8008dda <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d72:	69a3      	ldr	r3, [r4, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d05c      	beq.n	8008e32 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8008d78:	4b43      	ldr	r3, [pc, #268]	; (8008e88 <HAL_RCC_OscConfig+0x280>)
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8008d80:	f7fd ff52 	bl	8006c28 <HAL_GetTick>
 8008d84:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d86:	4b3f      	ldr	r3, [pc, #252]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	f013 0f02 	tst.w	r3, #2
 8008d8e:	d121      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d90:	f7fd ff4a 	bl	8006c28 <HAL_GetTick>
 8008d94:	1b40      	subs	r0, r0, r5
 8008d96:	2802      	cmp	r0, #2
 8008d98:	d9f5      	bls.n	8008d86 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8008d9a:	2003      	movs	r0, #3
 8008d9c:	e12f      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d9e:	4a39      	ldr	r2, [pc, #228]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008da0:	6813      	ldr	r3, [r2, #0]
 8008da2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008da6:	6961      	ldr	r1, [r4, #20]
 8008da8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	e7dc      	b.n	8008d6a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8008db0:	4b35      	ldr	r3, [pc, #212]	; (8008e88 <HAL_RCC_OscConfig+0x280>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008db6:	f7fd ff37 	bl	8006c28 <HAL_GetTick>
 8008dba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dbc:	4b31      	ldr	r3, [pc, #196]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f013 0f02 	tst.w	r3, #2
 8008dc4:	d0d1      	beq.n	8008d6a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dc6:	f7fd ff2f 	bl	8006c28 <HAL_GetTick>
 8008dca:	1b40      	subs	r0, r0, r5
 8008dcc:	2802      	cmp	r0, #2
 8008dce:	d9f5      	bls.n	8008dbc <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8008dd0:	2003      	movs	r0, #3
 8008dd2:	e114      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f7ff ff01 	bl	8008bdc <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	f013 0f04 	tst.w	r3, #4
 8008de0:	f000 8096 	beq.w	8008f10 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008de4:	4b27      	ldr	r3, [pc, #156]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008dec:	d134      	bne.n	8008e58 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dee:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008df0:	69da      	ldr	r2, [r3, #28]
 8008df2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008df6:	61da      	str	r2, [r3, #28]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008e02:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e04:	4b21      	ldr	r3, [pc, #132]	; (8008e8c <HAL_RCC_OscConfig+0x284>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008e0c:	d026      	beq.n	8008e5c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d03d      	beq.n	8008e90 <HAL_RCC_OscConfig+0x288>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d153      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x2b8>
 8008e18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e1c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008e20:	6a1a      	ldr	r2, [r3, #32]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	621a      	str	r2, [r3, #32]
 8008e28:	6a1a      	ldr	r2, [r3, #32]
 8008e2a:	f022 0204 	bic.w	r2, r2, #4
 8008e2e:	621a      	str	r2, [r3, #32]
 8008e30:	e033      	b.n	8008e9a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <HAL_RCC_OscConfig+0x280>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8008e3a:	f7fd fef5 	bl	8006c28 <HAL_GetTick>
 8008e3e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e40:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <HAL_RCC_OscConfig+0x27c>)
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	f013 0f02 	tst.w	r3, #2
 8008e48:	d0c7      	beq.n	8008dda <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e4a:	f7fd feed 	bl	8006c28 <HAL_GetTick>
 8008e4e:	1b40      	subs	r0, r0, r5
 8008e50:	2802      	cmp	r0, #2
 8008e52:	d9f5      	bls.n	8008e40 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8008e54:	2003      	movs	r0, #3
 8008e56:	e0d2      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8008e58:	2500      	movs	r5, #0
 8008e5a:	e7d3      	b.n	8008e04 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e5c:	4a0b      	ldr	r2, [pc, #44]	; (8008e8c <HAL_RCC_OscConfig+0x284>)
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e64:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008e66:	f7fd fedf 	bl	8006c28 <HAL_GetTick>
 8008e6a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e6c:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <HAL_RCC_OscConfig+0x284>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008e74:	d1cb      	bne.n	8008e0e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e76:	f7fd fed7 	bl	8006c28 <HAL_GetTick>
 8008e7a:	1b80      	subs	r0, r0, r6
 8008e7c:	2864      	cmp	r0, #100	; 0x64
 8008e7e:	d9f5      	bls.n	8008e6c <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8008e80:	2003      	movs	r0, #3
 8008e82:	e0bc      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
 8008e84:	40021000 	.word	0x40021000
 8008e88:	42420000 	.word	0x42420000
 8008e8c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e90:	4a5f      	ldr	r2, [pc, #380]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008e92:	6a13      	ldr	r3, [r2, #32]
 8008e94:	f043 0301 	orr.w	r3, r3, #1
 8008e98:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	b333      	cbz	r3, 8008eec <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8008e9e:	f7fd fec3 	bl	8006c28 <HAL_GetTick>
 8008ea2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ea4:	4b5a      	ldr	r3, [pc, #360]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f013 0f02 	tst.w	r3, #2
 8008eac:	d12f      	bne.n	8008f0e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eae:	f7fd febb 	bl	8006c28 <HAL_GetTick>
 8008eb2:	1b80      	subs	r0, r0, r6
 8008eb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008eb8:	4298      	cmp	r0, r3
 8008eba:	d9f3      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8008ebc:	2003      	movs	r0, #3
 8008ebe:	e09e      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec0:	2b05      	cmp	r3, #5
 8008ec2:	d009      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x2d0>
 8008ec4:	4b52      	ldr	r3, [pc, #328]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008ec6:	6a1a      	ldr	r2, [r3, #32]
 8008ec8:	f022 0201 	bic.w	r2, r2, #1
 8008ecc:	621a      	str	r2, [r3, #32]
 8008ece:	6a1a      	ldr	r2, [r3, #32]
 8008ed0:	f022 0204 	bic.w	r2, r2, #4
 8008ed4:	621a      	str	r2, [r3, #32]
 8008ed6:	e7e0      	b.n	8008e9a <HAL_RCC_OscConfig+0x292>
 8008ed8:	4b4d      	ldr	r3, [pc, #308]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	f042 0204 	orr.w	r2, r2, #4
 8008ee0:	621a      	str	r2, [r3, #32]
 8008ee2:	6a1a      	ldr	r2, [r3, #32]
 8008ee4:	f042 0201 	orr.w	r2, r2, #1
 8008ee8:	621a      	str	r2, [r3, #32]
 8008eea:	e7d6      	b.n	8008e9a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8008eec:	f7fd fe9c 	bl	8006c28 <HAL_GetTick>
 8008ef0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ef2:	4b47      	ldr	r3, [pc, #284]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f013 0f02 	tst.w	r3, #2
 8008efa:	d008      	beq.n	8008f0e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008efc:	f7fd fe94 	bl	8006c28 <HAL_GetTick>
 8008f00:	1b80      	subs	r0, r0, r6
 8008f02:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f06:	4298      	cmp	r0, r3
 8008f08:	d9f3      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8008f0a:	2003      	movs	r0, #3
 8008f0c:	e077      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8008f0e:	b9e5      	cbnz	r5, 8008f4a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f10:	69e3      	ldr	r3, [r4, #28]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d072      	beq.n	8008ffc <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f16:	4a3e      	ldr	r2, [pc, #248]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008f18:	6852      	ldr	r2, [r2, #4]
 8008f1a:	f002 020c 	and.w	r2, r2, #12
 8008f1e:	2a08      	cmp	r2, #8
 8008f20:	d056      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d017      	beq.n	8008f56 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8008f26:	4b3b      	ldr	r3, [pc, #236]	; (8009014 <HAL_RCC_OscConfig+0x40c>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008f2c:	f7fd fe7c 	bl	8006c28 <HAL_GetTick>
 8008f30:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f32:	4b37      	ldr	r3, [pc, #220]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008f3a:	d047      	beq.n	8008fcc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f3c:	f7fd fe74 	bl	8006c28 <HAL_GetTick>
 8008f40:	1b00      	subs	r0, r0, r4
 8008f42:	2802      	cmp	r0, #2
 8008f44:	d9f5      	bls.n	8008f32 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8008f46:	2003      	movs	r0, #3
 8008f48:	e059      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f4a:	4a31      	ldr	r2, [pc, #196]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008f4c:	69d3      	ldr	r3, [r2, #28]
 8008f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f52:	61d3      	str	r3, [r2, #28]
 8008f54:	e7dc      	b.n	8008f10 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8008f56:	4b2f      	ldr	r3, [pc, #188]	; (8009014 <HAL_RCC_OscConfig+0x40c>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008f5c:	f7fd fe64 	bl	8006c28 <HAL_GetTick>
 8008f60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f62:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008f6a:	d006      	beq.n	8008f7a <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f6c:	f7fd fe5c 	bl	8006c28 <HAL_GetTick>
 8008f70:	1b40      	subs	r0, r0, r5
 8008f72:	2802      	cmp	r0, #2
 8008f74:	d9f5      	bls.n	8008f62 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8008f76:	2003      	movs	r0, #3
 8008f78:	e041      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008f7a:	6a23      	ldr	r3, [r4, #32]
 8008f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f80:	d01a      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f82:	4923      	ldr	r1, [pc, #140]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008f84:	684b      	ldr	r3, [r1, #4]
 8008f86:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8008f8a:	6a22      	ldr	r2, [r4, #32]
 8008f8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f8e:	4302      	orrs	r2, r0
 8008f90:	4313      	orrs	r3, r2
 8008f92:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8008f94:	4b1f      	ldr	r3, [pc, #124]	; (8009014 <HAL_RCC_OscConfig+0x40c>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8008f9a:	f7fd fe45 	bl	8006c28 <HAL_GetTick>
 8008f9e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008fa0:	4b1b      	ldr	r3, [pc, #108]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008fa8:	d10e      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008faa:	f7fd fe3d 	bl	8006c28 <HAL_GetTick>
 8008fae:	1b00      	subs	r0, r0, r4
 8008fb0:	2802      	cmp	r0, #2
 8008fb2:	d9f5      	bls.n	8008fa0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8008fb4:	2003      	movs	r0, #3
 8008fb6:	e022      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008fb8:	4a15      	ldr	r2, [pc, #84]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008fba:	6853      	ldr	r3, [r2, #4]
 8008fbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fc0:	68a1      	ldr	r1, [r4, #8]
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	6053      	str	r3, [r2, #4]
 8008fc6:	e7dc      	b.n	8008f82 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e018      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e016      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d016      	beq.n	8009002 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8008fd4:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <HAL_RCC_OscConfig+0x408>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fd8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8008fdc:	6a22      	ldr	r2, [r4, #32]
 8008fde:	4291      	cmp	r1, r2
 8008fe0:	d111      	bne.n	8009006 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008fe2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008fe6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d10e      	bne.n	800900a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8008fec:	2000      	movs	r0, #0
 8008fee:	e006      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8008ff0:	2001      	movs	r0, #1
}
 8008ff2:	4770      	bx	lr
        return HAL_ERROR;
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	e002      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	e000      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8008ffc:	2000      	movs	r0, #0
}
 8008ffe:	b002      	add	sp, #8
 8009000:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8009002:	2001      	movs	r0, #1
 8009004:	e7fb      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8009006:	2001      	movs	r0, #1
 8009008:	e7f9      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
 800900a:	2001      	movs	r0, #1
 800900c:	e7f7      	b.n	8008ffe <HAL_RCC_OscConfig+0x3f6>
 800900e:	bf00      	nop
 8009010:	40021000 	.word	0x40021000
 8009014:	42420000 	.word	0x42420000

08009018 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8009018:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <HAL_RCC_GetSysClockFreq+0x40>)
 800901a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800901c:	f003 020c 	and.w	r2, r3, #12
 8009020:	2a08      	cmp	r2, #8
 8009022:	d001      	beq.n	8009028 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8009024:	480d      	ldr	r0, [pc, #52]	; (800905c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8009026:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009028:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800902c:	490c      	ldr	r1, [pc, #48]	; (8009060 <HAL_RCC_GetSysClockFreq+0x48>)
 800902e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009030:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009034:	d00b      	beq.n	800904e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009036:	4b08      	ldr	r3, [pc, #32]	; (8009058 <HAL_RCC_GetSysClockFreq+0x40>)
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800903e:	4a09      	ldr	r2, [pc, #36]	; (8009064 <HAL_RCC_GetSysClockFreq+0x4c>)
 8009040:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009042:	4a06      	ldr	r2, [pc, #24]	; (800905c <HAL_RCC_GetSysClockFreq+0x44>)
 8009044:	fb02 f000 	mul.w	r0, r2, r0
 8009048:	fbb0 f0f3 	udiv	r0, r0, r3
 800904c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800904e:	4b06      	ldr	r3, [pc, #24]	; (8009068 <HAL_RCC_GetSysClockFreq+0x50>)
 8009050:	fb03 f000 	mul.w	r0, r3, r0
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40021000 	.word	0x40021000
 800905c:	007a1200 	.word	0x007a1200
 8009060:	0800b86c 	.word	0x0800b86c
 8009064:	0800b87c 	.word	0x0800b87c
 8009068:	003d0900 	.word	0x003d0900

0800906c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800906c:	2800      	cmp	r0, #0
 800906e:	f000 80a0 	beq.w	80091b2 <HAL_RCC_ClockConfig+0x146>
{
 8009072:	b570      	push	{r4, r5, r6, lr}
 8009074:	460d      	mov	r5, r1
 8009076:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009078:	4b52      	ldr	r3, [pc, #328]	; (80091c4 <HAL_RCC_ClockConfig+0x158>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	428b      	cmp	r3, r1
 8009082:	d20b      	bcs.n	800909c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009084:	4a4f      	ldr	r2, [pc, #316]	; (80091c4 <HAL_RCC_ClockConfig+0x158>)
 8009086:	6813      	ldr	r3, [r2, #0]
 8009088:	f023 0307 	bic.w	r3, r3, #7
 800908c:	430b      	orrs	r3, r1
 800908e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009090:	6813      	ldr	r3, [r2, #0]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	428b      	cmp	r3, r1
 8009098:	f040 808d 	bne.w	80091b6 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	f013 0f02 	tst.w	r3, #2
 80090a2:	d017      	beq.n	80090d4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a4:	f013 0f04 	tst.w	r3, #4
 80090a8:	d004      	beq.n	80090b4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090aa:	4a47      	ldr	r2, [pc, #284]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 80090ac:	6853      	ldr	r3, [r2, #4]
 80090ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80090b2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	f013 0f08 	tst.w	r3, #8
 80090ba:	d004      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090bc:	4a42      	ldr	r2, [pc, #264]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 80090be:	6853      	ldr	r3, [r2, #4]
 80090c0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80090c4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090c6:	4a40      	ldr	r2, [pc, #256]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 80090c8:	6853      	ldr	r3, [r2, #4]
 80090ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ce:	68a1      	ldr	r1, [r4, #8]
 80090d0:	430b      	orrs	r3, r1
 80090d2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	f013 0f01 	tst.w	r3, #1
 80090da:	d031      	beq.n	8009140 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090dc:	6863      	ldr	r3, [r4, #4]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d020      	beq.n	8009124 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d025      	beq.n	8009132 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e6:	4a38      	ldr	r2, [pc, #224]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 80090e8:	6812      	ldr	r2, [r2, #0]
 80090ea:	f012 0f02 	tst.w	r2, #2
 80090ee:	d064      	beq.n	80091ba <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090f0:	4935      	ldr	r1, [pc, #212]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 80090f2:	684a      	ldr	r2, [r1, #4]
 80090f4:	f022 0203 	bic.w	r2, r2, #3
 80090f8:	4313      	orrs	r3, r2
 80090fa:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80090fc:	f7fd fd94 	bl	8006c28 <HAL_GetTick>
 8009100:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009102:	4b31      	ldr	r3, [pc, #196]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f003 030c 	and.w	r3, r3, #12
 800910a:	6862      	ldr	r2, [r4, #4]
 800910c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009110:	d016      	beq.n	8009140 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009112:	f7fd fd89 	bl	8006c28 <HAL_GetTick>
 8009116:	1b80      	subs	r0, r0, r6
 8009118:	f241 3388 	movw	r3, #5000	; 0x1388
 800911c:	4298      	cmp	r0, r3
 800911e:	d9f0      	bls.n	8009102 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8009120:	2003      	movs	r0, #3
 8009122:	e045      	b.n	80091b0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009124:	4a28      	ldr	r2, [pc, #160]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 8009126:	6812      	ldr	r2, [r2, #0]
 8009128:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800912c:	d1e0      	bne.n	80090f0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800912e:	2001      	movs	r0, #1
 8009130:	e03e      	b.n	80091b0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009132:	4a25      	ldr	r2, [pc, #148]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 8009134:	6812      	ldr	r2, [r2, #0]
 8009136:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800913a:	d1d9      	bne.n	80090f0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800913c:	2001      	movs	r0, #1
 800913e:	e037      	b.n	80091b0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009140:	4b20      	ldr	r3, [pc, #128]	; (80091c4 <HAL_RCC_ClockConfig+0x158>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0307 	and.w	r3, r3, #7
 8009148:	42ab      	cmp	r3, r5
 800914a:	d90a      	bls.n	8009162 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <HAL_RCC_ClockConfig+0x158>)
 800914e:	6813      	ldr	r3, [r2, #0]
 8009150:	f023 0307 	bic.w	r3, r3, #7
 8009154:	432b      	orrs	r3, r5
 8009156:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009158:	6813      	ldr	r3, [r2, #0]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	42ab      	cmp	r3, r5
 8009160:	d12d      	bne.n	80091be <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f013 0f04 	tst.w	r3, #4
 8009168:	d006      	beq.n	8009178 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800916a:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 800916c:	6853      	ldr	r3, [r2, #4]
 800916e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009172:	68e1      	ldr	r1, [r4, #12]
 8009174:	430b      	orrs	r3, r1
 8009176:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	f013 0f08 	tst.w	r3, #8
 800917e:	d007      	beq.n	8009190 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009180:	4a11      	ldr	r2, [pc, #68]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 8009182:	6853      	ldr	r3, [r2, #4]
 8009184:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009188:	6921      	ldr	r1, [r4, #16]
 800918a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800918e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009190:	f7ff ff42 	bl	8009018 <HAL_RCC_GetSysClockFreq>
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <HAL_RCC_ClockConfig+0x15c>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800919c:	4a0b      	ldr	r2, [pc, #44]	; (80091cc <HAL_RCC_ClockConfig+0x160>)
 800919e:	5cd3      	ldrb	r3, [r2, r3]
 80091a0:	40d8      	lsrs	r0, r3
 80091a2:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <HAL_RCC_ClockConfig+0x164>)
 80091a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <HAL_RCC_ClockConfig+0x168>)
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f7fd fcf9 	bl	8006ba0 <HAL_InitTick>
  return HAL_OK;
 80091ae:	2000      	movs	r0, #0
}
 80091b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80091b2:	2001      	movs	r0, #1
}
 80091b4:	4770      	bx	lr
    return HAL_ERROR;
 80091b6:	2001      	movs	r0, #1
 80091b8:	e7fa      	b.n	80091b0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80091ba:	2001      	movs	r0, #1
 80091bc:	e7f8      	b.n	80091b0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80091be:	2001      	movs	r0, #1
 80091c0:	e7f6      	b.n	80091b0 <HAL_RCC_ClockConfig+0x144>
 80091c2:	bf00      	nop
 80091c4:	40022000 	.word	0x40022000
 80091c8:	40021000 	.word	0x40021000
 80091cc:	0800b840 	.word	0x0800b840
 80091d0:	20000488 	.word	0x20000488
 80091d4:	20000490 	.word	0x20000490

080091d8 <HAL_RCC_GetHCLKFreq>:
}
 80091d8:	4b01      	ldr	r3, [pc, #4]	; (80091e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	20000488 	.word	0x20000488

080091e4 <HAL_RCC_GetPCLK1Freq>:
{
 80091e4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091e6:	f7ff fff7 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 80091ea:	4b04      	ldr	r3, [pc, #16]	; (80091fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80091f2:	4a03      	ldr	r2, [pc, #12]	; (8009200 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80091f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80091f6:	40d8      	lsrs	r0, r3
 80091f8:	bd08      	pop	{r3, pc}
 80091fa:	bf00      	nop
 80091fc:	40021000 	.word	0x40021000
 8009200:	0800b850 	.word	0x0800b850

08009204 <HAL_RCC_GetPCLK2Freq>:
{
 8009204:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009206:	f7ff ffe7 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 800920a:	4b04      	ldr	r3, [pc, #16]	; (800921c <HAL_RCC_GetPCLK2Freq+0x18>)
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009212:	4a03      	ldr	r2, [pc, #12]	; (8009220 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009214:	5cd3      	ldrb	r3, [r2, r3]
}
 8009216:	40d8      	lsrs	r0, r3
 8009218:	bd08      	pop	{r3, pc}
 800921a:	bf00      	nop
 800921c:	40021000 	.word	0x40021000
 8009220:	0800b850 	.word	0x0800b850

08009224 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800922a:	6803      	ldr	r3, [r0, #0]
 800922c:	f013 0f01 	tst.w	r3, #1
 8009230:	d036      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009232:	4b3f      	ldr	r3, [pc, #252]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800923a:	d149      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800923c:	4b3c      	ldr	r3, [pc, #240]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800923e:	69da      	ldr	r2, [r3, #28]
 8009240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009244:	61da      	str	r2, [r3, #28]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009250:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009252:	4b38      	ldr	r3, [pc, #224]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f413 7f80 	tst.w	r3, #256	; 0x100
 800925a:	d03b      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800925c:	4b34      	ldr	r3, [pc, #208]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800925e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009260:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8009264:	d013      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009266:	6862      	ldr	r2, [r4, #4]
 8009268:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800926c:	429a      	cmp	r2, r3
 800926e:	d00e      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009270:	4a2f      	ldr	r2, [pc, #188]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009272:	6a13      	ldr	r3, [r2, #32]
 8009274:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009278:	492f      	ldr	r1, [pc, #188]	; (8009338 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800927a:	2601      	movs	r6, #1
 800927c:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009280:	2600      	movs	r6, #0
 8009282:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009286:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009288:	f013 0f01 	tst.w	r3, #1
 800928c:	d136      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800928e:	4a28      	ldr	r2, [pc, #160]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009290:	6a13      	ldr	r3, [r2, #32]
 8009292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	430b      	orrs	r3, r1
 800929a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800929c:	2d00      	cmp	r5, #0
 800929e:	d13e      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	f013 0f02 	tst.w	r3, #2
 80092a6:	d006      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092a8:	4a21      	ldr	r2, [pc, #132]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80092aa:	6853      	ldr	r3, [r2, #4]
 80092ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80092b0:	68a1      	ldr	r1, [r4, #8]
 80092b2:	430b      	orrs	r3, r1
 80092b4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	f013 0f10 	tst.w	r3, #16
 80092bc:	d034      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092be:	4a1c      	ldr	r2, [pc, #112]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80092c0:	6853      	ldr	r3, [r2, #4]
 80092c2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80092c6:	68e1      	ldr	r1, [r4, #12]
 80092c8:	430b      	orrs	r3, r1
 80092ca:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80092cc:	2000      	movs	r0, #0
 80092ce:	e02c      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 80092d0:	2500      	movs	r5, #0
 80092d2:	e7be      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092d4:	4a17      	ldr	r2, [pc, #92]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80092d6:	6813      	ldr	r3, [r2, #0]
 80092d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80092de:	f7fd fca3 	bl	8006c28 <HAL_GetTick>
 80092e2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092e4:	4b13      	ldr	r3, [pc, #76]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80092ec:	d1b6      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ee:	f7fd fc9b 	bl	8006c28 <HAL_GetTick>
 80092f2:	1b80      	subs	r0, r0, r6
 80092f4:	2864      	cmp	r0, #100	; 0x64
 80092f6:	d9f5      	bls.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80092f8:	2003      	movs	r0, #3
 80092fa:	e016      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80092fc:	f7fd fc94 	bl	8006c28 <HAL_GetTick>
 8009300:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009302:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f013 0f02 	tst.w	r3, #2
 800930a:	d1c0      	bne.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800930c:	f7fd fc8c 	bl	8006c28 <HAL_GetTick>
 8009310:	1b80      	subs	r0, r0, r6
 8009312:	f241 3388 	movw	r3, #5000	; 0x1388
 8009316:	4298      	cmp	r0, r3
 8009318:	d9f3      	bls.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800931a:	2003      	movs	r0, #3
 800931c:	e005      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800931e:	69d3      	ldr	r3, [r2, #28]
 8009320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009324:	61d3      	str	r3, [r2, #28]
 8009326:	e7bb      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8009328:	2000      	movs	r0, #0
}
 800932a:	b002      	add	sp, #8
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	bf00      	nop
 8009330:	40021000 	.word	0x40021000
 8009334:	40007000 	.word	0x40007000
 8009338:	42420000 	.word	0x42420000

0800933c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800933c:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800933e:	2802      	cmp	r0, #2
 8009340:	d04e      	beq.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8009342:	2810      	cmp	r0, #16
 8009344:	d003      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8009346:	2801      	cmp	r0, #1
 8009348:	d028      	beq.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800934a:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 800934c:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 800934e:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8009350:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8009358:	d0f8      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800935a:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800935e:	4928      	ldr	r1, [pc, #160]	; (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8009360:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009362:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009366:	d015      	beq.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009368:	4b24      	ldr	r3, [pc, #144]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8009370:	4a24      	ldr	r2, [pc, #144]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8009372:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009374:	4b24      	ldr	r3, [pc, #144]	; (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8009376:	fbb3 f3f2 	udiv	r3, r3, r2
 800937a:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800937e:	4b1f      	ldr	r3, [pc, #124]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009386:	d1e1      	bne.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8009388:	0040      	lsls	r0, r0, #1
 800938a:	4b20      	ldr	r3, [pc, #128]	; (800940c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 800938c:	fba3 3000 	umull	r3, r0, r3, r0
 8009390:	0840      	lsrs	r0, r0, #1
 8009392:	e7db      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009394:	4b1e      	ldr	r3, [pc, #120]	; (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8009396:	fb03 f000 	mul.w	r0, r3, r0
 800939a:	e7f0      	b.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800939e:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80093a0:	f240 3202 	movw	r2, #770	; 0x302
 80093a4:	401a      	ands	r2, r3
 80093a6:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80093aa:	d024      	beq.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80093ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b4:	d004      	beq.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80093b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093ba:	d009      	beq.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 80093bc:	2000      	movs	r0, #0
 80093be:	e7c5      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80093c0:	4a0e      	ldr	r2, [pc, #56]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80093c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093c4:	f012 0f02 	tst.w	r2, #2
 80093c8:	d0f5      	beq.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 80093ca:	f649 4040 	movw	r0, #40000	; 0x9c40
 80093ce:	e7bd      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80093d0:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80093d8:	d0b8      	beq.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 80093da:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 80093de:	e7b5      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80093e0:	f7ff ff10 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80093ec:	3301      	adds	r3, #1
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80093f4:	e7aa      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 80093f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80093fa:	e7a7      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80093fc:	40021000 	.word	0x40021000
 8009400:	0800b880 	.word	0x0800b880
 8009404:	0800b890 	.word	0x0800b890
 8009408:	007a1200 	.word	0x007a1200
 800940c:	aaaaaaab 	.word	0xaaaaaaab
 8009410:	003d0900 	.word	0x003d0900

08009414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009414:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009416:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009418:	6a04      	ldr	r4, [r0, #32]
 800941a:	f024 0401 	bic.w	r4, r4, #1
 800941e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009420:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009422:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009426:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800942a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800942e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009430:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009432:	6203      	str	r3, [r0, #32]
}
 8009434:	bc10      	pop	{r4}
 8009436:	4770      	bx	lr

08009438 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009438:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800943a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800943c:	6a04      	ldr	r4, [r0, #32]
 800943e:	f024 0410 	bic.w	r4, r4, #16
 8009442:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009444:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009446:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800944a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800944e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009452:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009456:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009458:	6203      	str	r3, [r0, #32]
}
 800945a:	bc10      	pop	{r4}
 800945c:	4770      	bx	lr

0800945e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800945e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009464:	430b      	orrs	r3, r1
 8009466:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800946a:	6083      	str	r3, [r0, #8]
}
 800946c:	4770      	bx	lr
	...

08009470 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009470:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b01      	cmp	r3, #1
 8009478:	d127      	bne.n	80094ca <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800947a:	2302      	movs	r3, #2
 800947c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009480:	6802      	ldr	r2, [r0, #0]
 8009482:	68d3      	ldr	r3, [r2, #12]
 8009484:	f043 0301 	orr.w	r3, r3, #1
 8009488:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800948a:	6803      	ldr	r3, [r0, #0]
 800948c:	4a11      	ldr	r2, [pc, #68]	; (80094d4 <HAL_TIM_Base_Start_IT+0x64>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d010      	beq.n	80094b4 <HAL_TIM_Base_Start_IT+0x44>
 8009492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009496:	d00d      	beq.n	80094b4 <HAL_TIM_Base_Start_IT+0x44>
 8009498:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800949c:	4293      	cmp	r3, r2
 800949e:	d009      	beq.n	80094b4 <HAL_TIM_Base_Start_IT+0x44>
 80094a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d005      	beq.n	80094b4 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80094b0:	2000      	movs	r0, #0
 80094b2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ba:	2a06      	cmp	r2, #6
 80094bc:	d007      	beq.n	80094ce <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	f042 0201 	orr.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80094c6:	2000      	movs	r0, #0
 80094c8:	4770      	bx	lr
    return HAL_ERROR;
 80094ca:	2001      	movs	r0, #1
 80094cc:	4770      	bx	lr
  return HAL_OK;
 80094ce:	2000      	movs	r0, #0
}
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40012c00 	.word	0x40012c00

080094d8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80094d8:	6802      	ldr	r2, [r0, #0]
 80094da:	68d3      	ldr	r3, [r2, #12]
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80094e2:	6803      	ldr	r3, [r0, #0]
 80094e4:	6a19      	ldr	r1, [r3, #32]
 80094e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80094ea:	4211      	tst	r1, r2
 80094ec:	d108      	bne.n	8009500 <HAL_TIM_Base_Stop_IT+0x28>
 80094ee:	6a19      	ldr	r1, [r3, #32]
 80094f0:	f240 4244 	movw	r2, #1092	; 0x444
 80094f4:	4211      	tst	r1, r2
 80094f6:	d103      	bne.n	8009500 <HAL_TIM_Base_Stop_IT+0x28>
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	f022 0201 	bic.w	r2, r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009500:	2301      	movs	r3, #1
 8009502:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8009506:	2000      	movs	r0, #0
 8009508:	4770      	bx	lr

0800950a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800950a:	4770      	bx	lr

0800950c <HAL_TIM_IC_CaptureCallback>:
}
 800950c:	4770      	bx	lr

0800950e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800950e:	4770      	bx	lr

08009510 <HAL_TIM_TriggerCallback>:
}
 8009510:	4770      	bx	lr

08009512 <HAL_TIM_IRQHandler>:
{
 8009512:	b510      	push	{r4, lr}
 8009514:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009516:	6803      	ldr	r3, [r0, #0]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	f012 0f02 	tst.w	r2, #2
 800951e:	d011      	beq.n	8009544 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	f012 0f02 	tst.w	r2, #2
 8009526:	d00d      	beq.n	8009544 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009528:	f06f 0202 	mvn.w	r2, #2
 800952c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800952e:	2301      	movs	r3, #1
 8009530:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009532:	6803      	ldr	r3, [r0, #0]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f013 0f03 	tst.w	r3, #3
 800953a:	d070      	beq.n	800961e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800953c:	f7ff ffe6 	bl	800950c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009540:	2300      	movs	r3, #0
 8009542:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	691a      	ldr	r2, [r3, #16]
 8009548:	f012 0f04 	tst.w	r2, #4
 800954c:	d012      	beq.n	8009574 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	f012 0f04 	tst.w	r2, #4
 8009554:	d00e      	beq.n	8009574 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009556:	f06f 0204 	mvn.w	r2, #4
 800955a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800955c:	2302      	movs	r3, #2
 800955e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009568:	d05f      	beq.n	800962a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	4620      	mov	r0, r4
 800956c:	f7ff ffce 	bl	800950c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009570:	2300      	movs	r3, #0
 8009572:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	691a      	ldr	r2, [r3, #16]
 8009578:	f012 0f08 	tst.w	r2, #8
 800957c:	d012      	beq.n	80095a4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	f012 0f08 	tst.w	r2, #8
 8009584:	d00e      	beq.n	80095a4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009586:	f06f 0208 	mvn.w	r2, #8
 800958a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800958c:	2304      	movs	r3, #4
 800958e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	f013 0f03 	tst.w	r3, #3
 8009598:	d04e      	beq.n	8009638 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff ffb6 	bl	800950c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a0:	2300      	movs	r3, #0
 80095a2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	f012 0f10 	tst.w	r2, #16
 80095ac:	d012      	beq.n	80095d4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	f012 0f10 	tst.w	r2, #16
 80095b4:	d00e      	beq.n	80095d4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095b6:	f06f 0210 	mvn.w	r2, #16
 80095ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095bc:	2308      	movs	r3, #8
 80095be:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80095c8:	d03d      	beq.n	8009646 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80095ca:	4620      	mov	r0, r4
 80095cc:	f7ff ff9e 	bl	800950c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d0:	2300      	movs	r3, #0
 80095d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	f012 0f01 	tst.w	r2, #1
 80095dc:	d003      	beq.n	80095e6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	f012 0f01 	tst.w	r2, #1
 80095e4:	d136      	bne.n	8009654 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	691a      	ldr	r2, [r3, #16]
 80095ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80095ee:	d003      	beq.n	80095f8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80095f6:	d134      	bne.n	8009662 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009600:	d003      	beq.n	800960a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009608:	d132      	bne.n	8009670 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	691a      	ldr	r2, [r3, #16]
 800960e:	f012 0f20 	tst.w	r2, #32
 8009612:	d003      	beq.n	800961c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	f012 0f20 	tst.w	r2, #32
 800961a:	d130      	bne.n	800967e <HAL_TIM_IRQHandler+0x16c>
}
 800961c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800961e:	f7ff ff74 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009622:	4620      	mov	r0, r4
 8009624:	f7ff ff73 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
 8009628:	e78a      	b.n	8009540 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800962a:	4620      	mov	r0, r4
 800962c:	f7ff ff6d 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009630:	4620      	mov	r0, r4
 8009632:	f7ff ff6c 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
 8009636:	e79b      	b.n	8009570 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009638:	4620      	mov	r0, r4
 800963a:	f7ff ff66 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800963e:	4620      	mov	r0, r4
 8009640:	f7ff ff65 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
 8009644:	e7ac      	b.n	80095a0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009646:	4620      	mov	r0, r4
 8009648:	f7ff ff5f 	bl	800950a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800964c:	4620      	mov	r0, r4
 800964e:	f7ff ff5e 	bl	800950e <HAL_TIM_PWM_PulseFinishedCallback>
 8009652:	e7bd      	b.n	80095d0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009654:	f06f 0201 	mvn.w	r2, #1
 8009658:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800965a:	4620      	mov	r0, r4
 800965c:	f7fc fdee 	bl	800623c <HAL_TIM_PeriodElapsedCallback>
 8009660:	e7c1      	b.n	80095e6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009662:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009666:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009668:	4620      	mov	r0, r4
 800966a:	f000 f938 	bl	80098de <HAL_TIMEx_BreakCallback>
 800966e:	e7c3      	b.n	80095f8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009674:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009676:	4620      	mov	r0, r4
 8009678:	f7ff ff4a 	bl	8009510 <HAL_TIM_TriggerCallback>
 800967c:	e7c5      	b.n	800960a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800967e:	f06f 0220 	mvn.w	r2, #32
 8009682:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009684:	4620      	mov	r0, r4
 8009686:	f000 f929 	bl	80098dc <HAL_TIMEx_CommutCallback>
}
 800968a:	e7c7      	b.n	800961c <HAL_TIM_IRQHandler+0x10a>

0800968c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800968c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800968e:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <TIM_Base_SetConfig+0x70>)
 8009690:	4290      	cmp	r0, r2
 8009692:	d00a      	beq.n	80096aa <TIM_Base_SetConfig+0x1e>
 8009694:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009698:	d007      	beq.n	80096aa <TIM_Base_SetConfig+0x1e>
 800969a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800969e:	4290      	cmp	r0, r2
 80096a0:	d003      	beq.n	80096aa <TIM_Base_SetConfig+0x1e>
 80096a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096a6:	4290      	cmp	r0, r2
 80096a8:	d103      	bne.n	80096b2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80096ae:	684a      	ldr	r2, [r1, #4]
 80096b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096b2:	4a12      	ldr	r2, [pc, #72]	; (80096fc <TIM_Base_SetConfig+0x70>)
 80096b4:	4290      	cmp	r0, r2
 80096b6:	d00a      	beq.n	80096ce <TIM_Base_SetConfig+0x42>
 80096b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80096bc:	d007      	beq.n	80096ce <TIM_Base_SetConfig+0x42>
 80096be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80096c2:	4290      	cmp	r0, r2
 80096c4:	d003      	beq.n	80096ce <TIM_Base_SetConfig+0x42>
 80096c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096ca:	4290      	cmp	r0, r2
 80096cc:	d103      	bne.n	80096d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096d2:	68ca      	ldr	r2, [r1, #12]
 80096d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096da:	694a      	ldr	r2, [r1, #20]
 80096dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80096de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096e0:	688b      	ldr	r3, [r1, #8]
 80096e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80096e4:	680b      	ldr	r3, [r1, #0]
 80096e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096e8:	4b04      	ldr	r3, [pc, #16]	; (80096fc <TIM_Base_SetConfig+0x70>)
 80096ea:	4298      	cmp	r0, r3
 80096ec:	d002      	beq.n	80096f4 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80096ee:	2301      	movs	r3, #1
 80096f0:	6143      	str	r3, [r0, #20]
}
 80096f2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80096f4:	690b      	ldr	r3, [r1, #16]
 80096f6:	6303      	str	r3, [r0, #48]	; 0x30
 80096f8:	e7f9      	b.n	80096ee <TIM_Base_SetConfig+0x62>
 80096fa:	bf00      	nop
 80096fc:	40012c00 	.word	0x40012c00

08009700 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009700:	b340      	cbz	r0, 8009754 <HAL_TIM_Base_Init+0x54>
{
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009706:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800970a:	b1f3      	cbz	r3, 800974a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800970c:	2302      	movs	r3, #2
 800970e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009712:	4621      	mov	r1, r4
 8009714:	f851 0b04 	ldr.w	r0, [r1], #4
 8009718:	f7ff ffb8 	bl	800968c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800971c:	2301      	movs	r3, #1
 800971e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009722:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009726:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800972a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800972e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009732:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800973a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800973e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009746:	2000      	movs	r0, #0
}
 8009748:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800974a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800974e:	f7fd f819 	bl	8006784 <HAL_TIM_Base_MspInit>
 8009752:	e7db      	b.n	800970c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009754:	2001      	movs	r0, #1
}
 8009756:	4770      	bx	lr

08009758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009758:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800975a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800975c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009760:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009764:	430a      	orrs	r2, r1
 8009766:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800976a:	6082      	str	r2, [r0, #8]
}
 800976c:	bc10      	pop	{r4}
 800976e:	4770      	bx	lr

08009770 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009770:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009774:	2b01      	cmp	r3, #1
 8009776:	d078      	beq.n	800986a <HAL_TIM_ConfigClockSource+0xfa>
{
 8009778:	b510      	push	{r4, lr}
 800977a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800977c:	2301      	movs	r3, #1
 800977e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009782:	2302      	movs	r3, #2
 8009784:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8009788:	6802      	ldr	r2, [r0, #0]
 800978a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800978c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009790:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8009794:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8009796:	680b      	ldr	r3, [r1, #0]
 8009798:	2b60      	cmp	r3, #96	; 0x60
 800979a:	d04c      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0xc6>
 800979c:	d829      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x82>
 800979e:	2b40      	cmp	r3, #64	; 0x40
 80097a0:	d054      	beq.n	800984c <HAL_TIM_ConfigClockSource+0xdc>
 80097a2:	d90c      	bls.n	80097be <HAL_TIM_ConfigClockSource+0x4e>
 80097a4:	2b50      	cmp	r3, #80	; 0x50
 80097a6:	d122      	bne.n	80097ee <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097a8:	68ca      	ldr	r2, [r1, #12]
 80097aa:	6849      	ldr	r1, [r1, #4]
 80097ac:	6800      	ldr	r0, [r0, #0]
 80097ae:	f7ff fe31 	bl	8009414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097b2:	2150      	movs	r1, #80	; 0x50
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	f7ff fe52 	bl	800945e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80097ba:	2000      	movs	r0, #0
      break;
 80097bc:	e005      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d00d      	beq.n	80097de <HAL_TIM_ConfigClockSource+0x6e>
 80097c2:	d909      	bls.n	80097d8 <HAL_TIM_ConfigClockSource+0x68>
 80097c4:	2b30      	cmp	r3, #48	; 0x30
 80097c6:	d00a      	beq.n	80097de <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80097c8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80097d0:	2300      	movs	r3, #0
 80097d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80097d6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80097d8:	b10b      	cbz	r3, 80097de <HAL_TIM_ConfigClockSource+0x6e>
 80097da:	2b10      	cmp	r3, #16
 80097dc:	d105      	bne.n	80097ea <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097de:	4619      	mov	r1, r3
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	f7ff fe3c 	bl	800945e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80097e6:	2000      	movs	r0, #0
      break;
 80097e8:	e7ef      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80097ea:	2001      	movs	r0, #1
 80097ec:	e7ed      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
 80097ee:	2001      	movs	r0, #1
 80097f0:	e7eb      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80097f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f6:	d034      	beq.n	8009862 <HAL_TIM_ConfigClockSource+0xf2>
 80097f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097fc:	d10c      	bne.n	8009818 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80097fe:	68cb      	ldr	r3, [r1, #12]
 8009800:	684a      	ldr	r2, [r1, #4]
 8009802:	6889      	ldr	r1, [r1, #8]
 8009804:	6800      	ldr	r0, [r0, #0]
 8009806:	f7ff ffa7 	bl	8009758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800980a:	6822      	ldr	r2, [r4, #0]
 800980c:	6893      	ldr	r3, [r2, #8]
 800980e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009812:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009814:	2000      	movs	r0, #0
      break;
 8009816:	e7d8      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8009818:	2b70      	cmp	r3, #112	; 0x70
 800981a:	d124      	bne.n	8009866 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800981c:	68cb      	ldr	r3, [r1, #12]
 800981e:	684a      	ldr	r2, [r1, #4]
 8009820:	6889      	ldr	r1, [r1, #8]
 8009822:	6800      	ldr	r0, [r0, #0]
 8009824:	f7ff ff98 	bl	8009758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009828:	6822      	ldr	r2, [r4, #0]
 800982a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800982c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8009830:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009832:	2000      	movs	r0, #0
      break;
 8009834:	e7c9      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009836:	68ca      	ldr	r2, [r1, #12]
 8009838:	6849      	ldr	r1, [r1, #4]
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	f7ff fdfc 	bl	8009438 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009840:	2160      	movs	r1, #96	; 0x60
 8009842:	6820      	ldr	r0, [r4, #0]
 8009844:	f7ff fe0b 	bl	800945e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8009848:	2000      	movs	r0, #0
      break;
 800984a:	e7be      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800984c:	68ca      	ldr	r2, [r1, #12]
 800984e:	6849      	ldr	r1, [r1, #4]
 8009850:	6800      	ldr	r0, [r0, #0]
 8009852:	f7ff fddf 	bl	8009414 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009856:	2140      	movs	r1, #64	; 0x40
 8009858:	6820      	ldr	r0, [r4, #0]
 800985a:	f7ff fe00 	bl	800945e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800985e:	2000      	movs	r0, #0
      break;
 8009860:	e7b3      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8009862:	2000      	movs	r0, #0
 8009864:	e7b1      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8009866:	2001      	movs	r0, #1
 8009868:	e7af      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800986a:	2002      	movs	r0, #2
}
 800986c:	4770      	bx	lr
	...

08009870 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009870:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009874:	2b01      	cmp	r3, #1
 8009876:	d02c      	beq.n	80098d2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8009878:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800987a:	2301      	movs	r3, #1
 800987c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009880:	2302      	movs	r3, #2
 8009882:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009886:	6803      	ldr	r3, [r0, #0]
 8009888:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800988a:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800988c:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009890:	680a      	ldr	r2, [r1, #0]
 8009892:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009898:	6803      	ldr	r3, [r0, #0]
 800989a:	4a0f      	ldr	r2, [pc, #60]	; (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00a      	beq.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80098a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a4:	d007      	beq.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80098a6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d003      	beq.n	80098b6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80098ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d104      	bne.n	80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098b6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098ba:	684a      	ldr	r2, [r1, #4]
 80098bc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098be:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098c0:	2301      	movs	r3, #1
 80098c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098c6:	2300      	movs	r3, #0
 80098c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80098cc:	4618      	mov	r0, r3
}
 80098ce:	bc10      	pop	{r4}
 80098d0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80098d2:	2002      	movs	r0, #2
}
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40012c00 	.word	0x40012c00

080098dc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098dc:	4770      	bx	lr

080098de <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098de:	4770      	bx	lr

080098e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e0:	b510      	push	{r4, lr}
 80098e2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098e4:	6802      	ldr	r2, [r0, #0]
 80098e6:	6913      	ldr	r3, [r2, #16]
 80098e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80098ec:	68c1      	ldr	r1, [r0, #12]
 80098ee:	430b      	orrs	r3, r1
 80098f0:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80098f2:	6883      	ldr	r3, [r0, #8]
 80098f4:	6902      	ldr	r2, [r0, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	6942      	ldr	r2, [r0, #20]
 80098fa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80098fc:	6801      	ldr	r1, [r0, #0]
 80098fe:	68cb      	ldr	r3, [r1, #12]
 8009900:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009904:	f023 030c 	bic.w	r3, r3, #12
 8009908:	4313      	orrs	r3, r2
 800990a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800990c:	6802      	ldr	r2, [r0, #0]
 800990e:	6953      	ldr	r3, [r2, #20]
 8009910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009914:	6981      	ldr	r1, [r0, #24]
 8009916:	430b      	orrs	r3, r1
 8009918:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800991a:	6802      	ldr	r2, [r0, #0]
 800991c:	4b13      	ldr	r3, [pc, #76]	; (800996c <UART_SetConfig+0x8c>)
 800991e:	429a      	cmp	r2, r3
 8009920:	d020      	beq.n	8009964 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009922:	f7ff fc5f 	bl	80091e4 <HAL_RCC_GetPCLK1Freq>
 8009926:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009928:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800992c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	fbb2 f2f3 	udiv	r2, r2, r3
 8009938:	480d      	ldr	r0, [pc, #52]	; (8009970 <UART_SetConfig+0x90>)
 800993a:	fba0 3102 	umull	r3, r1, r0, r2
 800993e:	0949      	lsrs	r1, r1, #5
 8009940:	2364      	movs	r3, #100	; 0x64
 8009942:	fb03 2311 	mls	r3, r3, r1, r2
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	3332      	adds	r3, #50	; 0x32
 800994a:	fba0 2303 	umull	r2, r3, r0, r3
 800994e:	095b      	lsrs	r3, r3, #5
 8009950:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009954:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	6821      	ldr	r1, [r4, #0]
 800995e:	4413      	add	r3, r2
 8009960:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8009962:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8009964:	f7ff fc4e 	bl	8009204 <HAL_RCC_GetPCLK2Freq>
 8009968:	4602      	mov	r2, r0
 800996a:	e7dd      	b.n	8009928 <UART_SetConfig+0x48>
 800996c:	40013800 	.word	0x40013800
 8009970:	51eb851f 	.word	0x51eb851f

08009974 <UART_WaitOnFlagUntilTimeout>:
{
 8009974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009978:	4605      	mov	r5, r0
 800997a:	460f      	mov	r7, r1
 800997c:	4616      	mov	r6, r2
 800997e:	4699      	mov	r9, r3
 8009980:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009984:	682c      	ldr	r4, [r5, #0]
 8009986:	6824      	ldr	r4, [r4, #0]
 8009988:	ea37 0304 	bics.w	r3, r7, r4
 800998c:	bf0c      	ite	eq
 800998e:	f04f 0c01 	moveq.w	ip, #1
 8009992:	f04f 0c00 	movne.w	ip, #0
 8009996:	45b4      	cmp	ip, r6
 8009998:	d12d      	bne.n	80099f6 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 800999a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800999e:	d0f1      	beq.n	8009984 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80099a0:	f1b8 0f00 	cmp.w	r8, #0
 80099a4:	d005      	beq.n	80099b2 <UART_WaitOnFlagUntilTimeout+0x3e>
 80099a6:	f7fd f93f 	bl	8006c28 <HAL_GetTick>
 80099aa:	eba0 0009 	sub.w	r0, r0, r9
 80099ae:	4540      	cmp	r0, r8
 80099b0:	d9e8      	bls.n	8009984 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099b2:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	f102 030c 	add.w	r3, r2, #12
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	320c      	adds	r2, #12
 80099c2:	e842 3100 	strex	r1, r3, [r2]
 80099c6:	2900      	cmp	r1, #0
 80099c8:	d1f3      	bne.n	80099b2 <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ca:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	f102 0314 	add.w	r3, r2, #20
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	3214      	adds	r2, #20
 80099da:	e842 3100 	strex	r1, r3, [r2]
 80099de:	2900      	cmp	r1, #0
 80099e0:	d1f3      	bne.n	80099ca <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 80099e2:	2320      	movs	r3, #32
 80099e4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80099e8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(huart);
 80099ec:	2300      	movs	r3, #0
 80099ee:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 80099f2:	2003      	movs	r0, #3
 80099f4:	e000      	b.n	80099f8 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 80099f6:	2000      	movs	r0, #0
}
 80099f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080099fc <HAL_UART_Init>:
  if (huart == NULL)
 80099fc:	b360      	cbz	r0, 8009a58 <HAL_UART_Init+0x5c>
{
 80099fe:	b510      	push	{r4, lr}
 8009a00:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009a02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009a06:	b313      	cbz	r3, 8009a4e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8009a08:	2324      	movs	r3, #36	; 0x24
 8009a0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	68d3      	ldr	r3, [r2, #12]
 8009a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a16:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f7ff ff61 	bl	80098e0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	6913      	ldr	r3, [r2, #16]
 8009a22:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009a26:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a28:	6822      	ldr	r2, [r4, #0]
 8009a2a:	6953      	ldr	r3, [r2, #20]
 8009a2c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8009a30:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8009a32:	6822      	ldr	r2, [r4, #0]
 8009a34:	68d3      	ldr	r3, [r2, #12]
 8009a36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a3a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009a40:	2320      	movs	r3, #32
 8009a42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a4a:	6360      	str	r0, [r4, #52]	; 0x34
}
 8009a4c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009a4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8009a52:	f7fc feeb 	bl	800682c <HAL_UART_MspInit>
 8009a56:	e7d7      	b.n	8009a08 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8009a58:	2001      	movs	r0, #1
}
 8009a5a:	4770      	bx	lr

08009a5c <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d031      	beq.n	8009ac4 <HAL_HalfDuplex_Init+0x68>
{
 8009a60:	b510      	push	{r4, lr}
 8009a62:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009a64:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009a68:	b33b      	cbz	r3, 8009aba <HAL_HalfDuplex_Init+0x5e>
  huart->gState = HAL_UART_STATE_BUSY;
 8009a6a:	2324      	movs	r3, #36	; 0x24
 8009a6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8009a70:	6822      	ldr	r2, [r4, #0]
 8009a72:	68d3      	ldr	r3, [r2, #12]
 8009a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a78:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f7ff ff30 	bl	80098e0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a80:	6822      	ldr	r2, [r4, #0]
 8009a82:	6913      	ldr	r3, [r2, #16]
 8009a84:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009a88:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	6953      	ldr	r3, [r2, #20]
 8009a8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a92:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009a94:	6822      	ldr	r2, [r4, #0]
 8009a96:	6953      	ldr	r3, [r2, #20]
 8009a98:	f043 0308 	orr.w	r3, r3, #8
 8009a9c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	68d3      	ldr	r3, [r2, #12]
 8009aa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009aa6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009aac:	2320      	movs	r3, #32
 8009aae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ab6:	6360      	str	r0, [r4, #52]	; 0x34
}
 8009ab8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009aba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8009abe:	f7fc feb5 	bl	800682c <HAL_UART_MspInit>
 8009ac2:	e7d2      	b.n	8009a6a <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8009ac4:	2001      	movs	r0, #1
}
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UART_Transmit>:
{
 8009ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009ad0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d14b      	bne.n	8009b72 <HAL_UART_Transmit+0xaa>
 8009ada:	4604      	mov	r4, r0
 8009adc:	460d      	mov	r5, r1
 8009ade:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	d04a      	beq.n	8009b7a <HAL_UART_Transmit+0xb2>
 8009ae4:	b90a      	cbnz	r2, 8009aea <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e044      	b.n	8009b74 <HAL_UART_Transmit+0xac>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009aee:	2321      	movs	r3, #33	; 0x21
 8009af0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8009af4:	f7fd f898 	bl	8006c28 <HAL_GetTick>
 8009af8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8009afa:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8009afe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b08:	d002      	beq.n	8009b10 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8009b0a:	f04f 0800 	mov.w	r8, #0
 8009b0e:	e00f      	b.n	8009b30 <HAL_UART_Transmit+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	b1fb      	cbz	r3, 8009b54 <HAL_UART_Transmit+0x8c>
      pdata16bits = NULL;
 8009b14:	f04f 0800 	mov.w	r8, #0
 8009b18:	e00a      	b.n	8009b30 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b1a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b24:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8009b26:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b30:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	b18b      	cbz	r3, 8009b5a <HAL_UART_Transmit+0x92>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b36:	9600      	str	r6, [sp, #0]
 8009b38:	463b      	mov	r3, r7
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2180      	movs	r1, #128	; 0x80
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f7ff ff18 	bl	8009974 <UART_WaitOnFlagUntilTimeout>
 8009b44:	b9d8      	cbnz	r0, 8009b7e <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	d0e7      	beq.n	8009b1a <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b4a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b52:	e7e8      	b.n	8009b26 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8009b54:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009b56:	2500      	movs	r5, #0
 8009b58:	e7ea      	b.n	8009b30 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b5a:	9600      	str	r6, [sp, #0]
 8009b5c:	463b      	mov	r3, r7
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2140      	movs	r1, #64	; 0x40
 8009b62:	4620      	mov	r0, r4
 8009b64:	f7ff ff06 	bl	8009974 <UART_WaitOnFlagUntilTimeout>
 8009b68:	b958      	cbnz	r0, 8009b82 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 8009b6a:	2320      	movs	r3, #32
 8009b6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8009b70:	e000      	b.n	8009b74 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 8009b72:	2002      	movs	r0, #2
}
 8009b74:	b002      	add	sp, #8
 8009b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	e7fa      	b.n	8009b74 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8009b7e:	2003      	movs	r0, #3
 8009b80:	e7f8      	b.n	8009b74 <HAL_UART_Transmit+0xac>
      return HAL_TIMEOUT;
 8009b82:	2003      	movs	r0, #3
 8009b84:	e7f6      	b.n	8009b74 <HAL_UART_Transmit+0xac>

08009b86 <HAL_UART_Receive>:
{
 8009b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b8e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d153      	bne.n	8009c40 <HAL_UART_Receive+0xba>
 8009b98:	4604      	mov	r4, r0
 8009b9a:	460d      	mov	r5, r1
 8009b9c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8009b9e:	2900      	cmp	r1, #0
 8009ba0:	d052      	beq.n	8009c48 <HAL_UART_Receive+0xc2>
 8009ba2:	b90a      	cbnz	r2, 8009ba8 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	e04c      	b.n	8009c42 <HAL_UART_Receive+0xbc>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	6443      	str	r3, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bac:	2222      	movs	r2, #34	; 0x22
 8009bae:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bb2:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8009bb4:	f7fd f838 	bl	8006c28 <HAL_GetTick>
 8009bb8:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8009bba:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009bbe:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc2:	68a3      	ldr	r3, [r4, #8]
 8009bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc8:	d002      	beq.n	8009bd0 <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 8009bca:	f04f 0800 	mov.w	r8, #0
 8009bce:	e017      	b.n	8009c00 <HAL_UART_Receive+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	b113      	cbz	r3, 8009bda <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8009bd4:	f04f 0800 	mov.w	r8, #0
 8009bd8:	e012      	b.n	8009c00 <HAL_UART_Receive+0x7a>
      pdata16bits = (uint16_t *) pData;
 8009bda:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8009bdc:	2500      	movs	r5, #0
 8009bde:	e00f      	b.n	8009c00 <HAL_UART_Receive+0x7a>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be8:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8009bec:	e003      	b.n	8009bf6 <HAL_UART_Receive+0x70>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8009bf4:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8009bf6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8009bf8:	b292      	uxth	r2, r2
 8009bfa:	3a01      	subs	r2, #1
 8009bfc:	b292      	uxth	r2, r2
 8009bfe:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009c00:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	b1bb      	cbz	r3, 8009c36 <HAL_UART_Receive+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009c06:	9600      	str	r6, [sp, #0]
 8009c08:	463b      	mov	r3, r7
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2120      	movs	r1, #32
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f7ff feb0 	bl	8009974 <UART_WaitOnFlagUntilTimeout>
 8009c14:	b9d0      	cbnz	r0, 8009c4c <HAL_UART_Receive+0xc6>
      if (pdata8bits == NULL)
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	d0e2      	beq.n	8009be0 <HAL_UART_Receive+0x5a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c20:	d0e5      	beq.n	8009bee <HAL_UART_Receive+0x68>
 8009c22:	b913      	cbnz	r3, 8009c2a <HAL_UART_Receive+0xa4>
 8009c24:	6923      	ldr	r3, [r4, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0e1      	beq.n	8009bee <HAL_UART_Receive+0x68>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c32:	702b      	strb	r3, [r5, #0]
 8009c34:	e7de      	b.n	8009bf4 <HAL_UART_Receive+0x6e>
    huart->RxState = HAL_UART_STATE_READY;
 8009c36:	2320      	movs	r3, #32
 8009c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e000      	b.n	8009c42 <HAL_UART_Receive+0xbc>
    return HAL_BUSY;
 8009c40:	2002      	movs	r0, #2
}
 8009c42:	b002      	add	sp, #8
 8009c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009c48:	2001      	movs	r0, #1
 8009c4a:	e7fa      	b.n	8009c42 <HAL_UART_Receive+0xbc>
        return HAL_TIMEOUT;
 8009c4c:	2003      	movs	r0, #3
 8009c4e:	e7f8      	b.n	8009c42 <HAL_UART_Receive+0xbc>

08009c50 <SetBaudrate>:

#include "onewire.h"

// Изменение скорости на UART
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8009c50:	b510      	push	{r4, lr}
 8009c52:	4604      	mov	r4, r0
  uint32_t pclk = 0;
  huart->Init.BaudRate = baudrate;
 8009c54:	6041      	str	r1, [r0, #4]

  pclk = HAL_RCC_GetPCLK1Freq();
 8009c56:	f7ff fac5 	bl	80091e4 <HAL_RCC_GetPCLK1Freq>

  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c5a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8009c5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009c62:	6863      	ldr	r3, [r4, #4]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c6a:	480b      	ldr	r0, [pc, #44]	; (8009c98 <SetBaudrate+0x48>)
 8009c6c:	fba0 3102 	umull	r3, r1, r0, r2
 8009c70:	0949      	lsrs	r1, r1, #5
 8009c72:	2364      	movs	r3, #100	; 0x64
 8009c74:	fb03 2311 	mls	r3, r3, r1, r2
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	3332      	adds	r3, #50	; 0x32
 8009c7c:	fba0 2303 	umull	r2, r3, r0, r3
 8009c80:	095b      	lsrs	r3, r3, #5
 8009c82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009c86:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	6821      	ldr	r1, [r4, #0]
 8009c90:	4413      	add	r3, r2
 8009c92:	608b      	str	r3, [r1, #8]

}
 8009c94:	bd10      	pop	{r4, pc}
 8009c96:	bf00      	nop
 8009c98:	51eb851f 	.word	0x51eb851f

08009c9c <OneWire_Reset>:

ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	4604      	mov	r4, r0
  ONEWIRE_Status status = ONEWIRE_OK;
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 8009ca2:	23f0      	movs	r3, #240	; 0xf0
 8009ca4:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t rxByte = 0x00;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f88d 3006 	strb.w	r3, [sp, #6]
  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8009cae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8009cb2:	f7ff ffcd 	bl	8009c50 <SetBaudrate>
  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f10d 0107 	add.w	r1, sp, #7
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7ff ff02 	bl	8009ac8 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 8009cc4:	230a      	movs	r3, #10
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f10d 0106 	add.w	r1, sp, #6
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff ff5a 	bl	8009b86 <HAL_UART_Receive>
  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 8009cd2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff ffba 	bl	8009c50 <SetBaudrate>
  if (rxByte == txByte)
 8009cdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d002      	beq.n	8009cee <OneWire_Reset+0x52>
  ONEWIRE_Status status = ONEWIRE_OK;
 8009ce8:	2000      	movs	r0, #0
  {
    status = ONEWIRE_ERROR;
  }
  return status;
}
 8009cea:	b002      	add	sp, #8
 8009cec:	bd10      	pop	{r4, pc}
    status = ONEWIRE_ERROR;
 8009cee:	2001      	movs	r0, #1
 8009cf0:	e7fb      	b.n	8009cea <OneWire_Reset+0x4e>

08009cf2 <OneWire_ProcessBit>:
  }
  return rxByte;
}

uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	4604      	mov	r4, r0
  uint8_t txData = 0xFF;
 8009cf8:	23ff      	movs	r3, #255	; 0xff
 8009cfa:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t rxData = 0x00;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f88d 3006 	strb.w	r3, [sp, #6]
  if (bit == 0)
 8009d04:	b909      	cbnz	r1, 8009d0a <OneWire_ProcessBit+0x18>
  {
    txData = 0x00;
 8009d06:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 8009d0a:	230a      	movs	r3, #10
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f10d 0107 	add.w	r1, sp, #7
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff fed8 	bl	8009ac8 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 8009d18:	230a      	movs	r3, #10
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f10d 0106 	add.w	r1, sp, #6
 8009d20:	4620      	mov	r0, r4
 8009d22:	f7ff ff30 	bl	8009b86 <HAL_UART_Receive>
  return rxData;
}
 8009d26:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8009d2a:	b002      	add	sp, #8
 8009d2c:	bd10      	pop	{r4, pc}

08009d2e <OneWire_ProcessByte>:
{
 8009d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d32:	4607      	mov	r7, r0
 8009d34:	460e      	mov	r6, r1
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8009d36:	2400      	movs	r4, #0
  uint8_t rxByte = 0x00;
 8009d38:	4625      	mov	r5, r4
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8009d3a:	e006      	b.n	8009d4a <OneWire_ProcessByte+0x1c>
      rxBit = 1;
 8009d3c:	2301      	movs	r3, #1
    rxByte |= (rxBit << i);
 8009d3e:	fa03 f308 	lsl.w	r3, r3, r8
 8009d42:	432b      	orrs	r3, r5
 8009d44:	b2dd      	uxtb	r5, r3
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8009d46:	3401      	adds	r4, #1
 8009d48:	b2e4      	uxtb	r4, r4
 8009d4a:	2c07      	cmp	r4, #7
 8009d4c:	d80b      	bhi.n	8009d66 <OneWire_ProcessByte+0x38>
    uint8_t txBit = (byte >> i) & 0x01;
 8009d4e:	46a0      	mov	r8, r4
 8009d50:	fa46 f104 	asr.w	r1, r6, r4
    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 8009d54:	f001 0101 	and.w	r1, r1, #1
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f7ff ffca 	bl	8009cf2 <OneWire_ProcessBit>
    if (tempRxData == 0xFF)
 8009d5e:	28ff      	cmp	r0, #255	; 0xff
 8009d60:	d0ec      	beq.n	8009d3c <OneWire_ProcessByte+0xe>
    uint8_t rxBit = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e7eb      	b.n	8009d3e <OneWire_ProcessByte+0x10>
}
 8009d66:	4628      	mov	r0, r5
 8009d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d6c <calloc>:
 8009d6c:	4b02      	ldr	r3, [pc, #8]	; (8009d78 <calloc+0xc>)
 8009d6e:	460a      	mov	r2, r1
 8009d70:	4601      	mov	r1, r0
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	f000 ba3e 	b.w	800a1f4 <_calloc_r>
 8009d78:	20000494 	.word	0x20000494

08009d7c <__errno>:
 8009d7c:	4b01      	ldr	r3, [pc, #4]	; (8009d84 <__errno+0x8>)
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000494 	.word	0x20000494

08009d88 <__sflush_r>:
 8009d88:	898a      	ldrh	r2, [r1, #12]
 8009d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	0710      	lsls	r0, r2, #28
 8009d90:	460c      	mov	r4, r1
 8009d92:	d457      	bmi.n	8009e44 <__sflush_r+0xbc>
 8009d94:	684b      	ldr	r3, [r1, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dc04      	bgt.n	8009da4 <__sflush_r+0x1c>
 8009d9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dc01      	bgt.n	8009da4 <__sflush_r+0x1c>
 8009da0:	2000      	movs	r0, #0
 8009da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	d0fa      	beq.n	8009da0 <__sflush_r+0x18>
 8009daa:	2300      	movs	r3, #0
 8009dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009db0:	682f      	ldr	r7, [r5, #0]
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	d032      	beq.n	8009e1c <__sflush_r+0x94>
 8009db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	075a      	lsls	r2, r3, #29
 8009dbc:	d505      	bpl.n	8009dca <__sflush_r+0x42>
 8009dbe:	6863      	ldr	r3, [r4, #4]
 8009dc0:	1ac0      	subs	r0, r0, r3
 8009dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dc4:	b10b      	cbz	r3, 8009dca <__sflush_r+0x42>
 8009dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dc8:	1ac0      	subs	r0, r0, r3
 8009dca:	2300      	movs	r3, #0
 8009dcc:	4602      	mov	r2, r0
 8009dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	6a21      	ldr	r1, [r4, #32]
 8009dd4:	47b0      	blx	r6
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	d106      	bne.n	8009dea <__sflush_r+0x62>
 8009ddc:	6829      	ldr	r1, [r5, #0]
 8009dde:	291d      	cmp	r1, #29
 8009de0:	d82c      	bhi.n	8009e3c <__sflush_r+0xb4>
 8009de2:	4a29      	ldr	r2, [pc, #164]	; (8009e88 <__sflush_r+0x100>)
 8009de4:	40ca      	lsrs	r2, r1
 8009de6:	07d6      	lsls	r6, r2, #31
 8009de8:	d528      	bpl.n	8009e3c <__sflush_r+0xb4>
 8009dea:	2200      	movs	r2, #0
 8009dec:	6062      	str	r2, [r4, #4]
 8009dee:	6922      	ldr	r2, [r4, #16]
 8009df0:	04d9      	lsls	r1, r3, #19
 8009df2:	6022      	str	r2, [r4, #0]
 8009df4:	d504      	bpl.n	8009e00 <__sflush_r+0x78>
 8009df6:	1c42      	adds	r2, r0, #1
 8009df8:	d101      	bne.n	8009dfe <__sflush_r+0x76>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	b903      	cbnz	r3, 8009e00 <__sflush_r+0x78>
 8009dfe:	6560      	str	r0, [r4, #84]	; 0x54
 8009e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e02:	602f      	str	r7, [r5, #0]
 8009e04:	2900      	cmp	r1, #0
 8009e06:	d0cb      	beq.n	8009da0 <__sflush_r+0x18>
 8009e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e0c:	4299      	cmp	r1, r3
 8009e0e:	d002      	beq.n	8009e16 <__sflush_r+0x8e>
 8009e10:	4628      	mov	r0, r5
 8009e12:	f000 fa03 	bl	800a21c <_free_r>
 8009e16:	2000      	movs	r0, #0
 8009e18:	6360      	str	r0, [r4, #52]	; 0x34
 8009e1a:	e7c2      	b.n	8009da2 <__sflush_r+0x1a>
 8009e1c:	6a21      	ldr	r1, [r4, #32]
 8009e1e:	2301      	movs	r3, #1
 8009e20:	4628      	mov	r0, r5
 8009e22:	47b0      	blx	r6
 8009e24:	1c41      	adds	r1, r0, #1
 8009e26:	d1c7      	bne.n	8009db8 <__sflush_r+0x30>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0c4      	beq.n	8009db8 <__sflush_r+0x30>
 8009e2e:	2b1d      	cmp	r3, #29
 8009e30:	d001      	beq.n	8009e36 <__sflush_r+0xae>
 8009e32:	2b16      	cmp	r3, #22
 8009e34:	d101      	bne.n	8009e3a <__sflush_r+0xb2>
 8009e36:	602f      	str	r7, [r5, #0]
 8009e38:	e7b2      	b.n	8009da0 <__sflush_r+0x18>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	e7ae      	b.n	8009da2 <__sflush_r+0x1a>
 8009e44:	690f      	ldr	r7, [r1, #16]
 8009e46:	2f00      	cmp	r7, #0
 8009e48:	d0aa      	beq.n	8009da0 <__sflush_r+0x18>
 8009e4a:	0793      	lsls	r3, r2, #30
 8009e4c:	bf18      	it	ne
 8009e4e:	2300      	movne	r3, #0
 8009e50:	680e      	ldr	r6, [r1, #0]
 8009e52:	bf08      	it	eq
 8009e54:	694b      	ldreq	r3, [r1, #20]
 8009e56:	1bf6      	subs	r6, r6, r7
 8009e58:	600f      	str	r7, [r1, #0]
 8009e5a:	608b      	str	r3, [r1, #8]
 8009e5c:	2e00      	cmp	r6, #0
 8009e5e:	dd9f      	ble.n	8009da0 <__sflush_r+0x18>
 8009e60:	4633      	mov	r3, r6
 8009e62:	463a      	mov	r2, r7
 8009e64:	4628      	mov	r0, r5
 8009e66:	6a21      	ldr	r1, [r4, #32]
 8009e68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009e6c:	47e0      	blx	ip
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	dc06      	bgt.n	8009e80 <__sflush_r+0xf8>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	e790      	b.n	8009da2 <__sflush_r+0x1a>
 8009e80:	4407      	add	r7, r0
 8009e82:	1a36      	subs	r6, r6, r0
 8009e84:	e7ea      	b.n	8009e5c <__sflush_r+0xd4>
 8009e86:	bf00      	nop
 8009e88:	20400001 	.word	0x20400001

08009e8c <_fflush_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	690b      	ldr	r3, [r1, #16]
 8009e90:	4605      	mov	r5, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	b913      	cbnz	r3, 8009e9c <_fflush_r+0x10>
 8009e96:	2500      	movs	r5, #0
 8009e98:	4628      	mov	r0, r5
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	b118      	cbz	r0, 8009ea6 <_fflush_r+0x1a>
 8009e9e:	6983      	ldr	r3, [r0, #24]
 8009ea0:	b90b      	cbnz	r3, 8009ea6 <_fflush_r+0x1a>
 8009ea2:	f000 f899 	bl	8009fd8 <__sinit>
 8009ea6:	4b14      	ldr	r3, [pc, #80]	; (8009ef8 <_fflush_r+0x6c>)
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	d11b      	bne.n	8009ee4 <_fflush_r+0x58>
 8009eac:	686c      	ldr	r4, [r5, #4]
 8009eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0ef      	beq.n	8009e96 <_fflush_r+0xa>
 8009eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eb8:	07d0      	lsls	r0, r2, #31
 8009eba:	d404      	bmi.n	8009ec6 <_fflush_r+0x3a>
 8009ebc:	0599      	lsls	r1, r3, #22
 8009ebe:	d402      	bmi.n	8009ec6 <_fflush_r+0x3a>
 8009ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ec2:	f000 f94c 	bl	800a15e <__retarget_lock_acquire_recursive>
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	4621      	mov	r1, r4
 8009eca:	f7ff ff5d 	bl	8009d88 <__sflush_r>
 8009ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	07da      	lsls	r2, r3, #31
 8009ed4:	d4e0      	bmi.n	8009e98 <_fflush_r+0xc>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	059b      	lsls	r3, r3, #22
 8009eda:	d4dd      	bmi.n	8009e98 <_fflush_r+0xc>
 8009edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ede:	f000 f93f 	bl	800a160 <__retarget_lock_release_recursive>
 8009ee2:	e7d9      	b.n	8009e98 <_fflush_r+0xc>
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <_fflush_r+0x70>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d101      	bne.n	8009eee <_fflush_r+0x62>
 8009eea:	68ac      	ldr	r4, [r5, #8]
 8009eec:	e7df      	b.n	8009eae <_fflush_r+0x22>
 8009eee:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <_fflush_r+0x74>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	bf08      	it	eq
 8009ef4:	68ec      	ldreq	r4, [r5, #12]
 8009ef6:	e7da      	b.n	8009eae <_fflush_r+0x22>
 8009ef8:	0800b8b4 	.word	0x0800b8b4
 8009efc:	0800b8d4 	.word	0x0800b8d4
 8009f00:	0800b894 	.word	0x0800b894

08009f04 <fflush>:
 8009f04:	4601      	mov	r1, r0
 8009f06:	b920      	cbnz	r0, 8009f12 <fflush+0xe>
 8009f08:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <fflush+0x18>)
 8009f0a:	4905      	ldr	r1, [pc, #20]	; (8009f20 <fflush+0x1c>)
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f000 b8e1 	b.w	800a0d4 <_fwalk_reent>
 8009f12:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <fflush+0x20>)
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f7ff bfb9 	b.w	8009e8c <_fflush_r>
 8009f1a:	bf00      	nop
 8009f1c:	0800b8f4 	.word	0x0800b8f4
 8009f20:	08009e8d 	.word	0x08009e8d
 8009f24:	20000494 	.word	0x20000494

08009f28 <std>:
 8009f28:	2300      	movs	r3, #0
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f36:	6083      	str	r3, [r0, #8]
 8009f38:	8181      	strh	r1, [r0, #12]
 8009f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f3c:	81c2      	strh	r2, [r0, #14]
 8009f3e:	6183      	str	r3, [r0, #24]
 8009f40:	4619      	mov	r1, r3
 8009f42:	2208      	movs	r2, #8
 8009f44:	305c      	adds	r0, #92	; 0x5c
 8009f46:	f000 f94d 	bl	800a1e4 <memset>
 8009f4a:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <std+0x38>)
 8009f4c:	6224      	str	r4, [r4, #32]
 8009f4e:	6263      	str	r3, [r4, #36]	; 0x24
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <std+0x3c>)
 8009f52:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <std+0x40>)
 8009f56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <std+0x44>)
 8009f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f5c:	bd10      	pop	{r4, pc}
 8009f5e:	bf00      	nop
 8009f60:	0800a511 	.word	0x0800a511
 8009f64:	0800a533 	.word	0x0800a533
 8009f68:	0800a56b 	.word	0x0800a56b
 8009f6c:	0800a58f 	.word	0x0800a58f

08009f70 <_cleanup_r>:
 8009f70:	4901      	ldr	r1, [pc, #4]	; (8009f78 <_cleanup_r+0x8>)
 8009f72:	f000 b8af 	b.w	800a0d4 <_fwalk_reent>
 8009f76:	bf00      	nop
 8009f78:	08009e8d 	.word	0x08009e8d

08009f7c <__sfmoreglue>:
 8009f7c:	2268      	movs	r2, #104	; 0x68
 8009f7e:	b570      	push	{r4, r5, r6, lr}
 8009f80:	1e4d      	subs	r5, r1, #1
 8009f82:	4355      	muls	r5, r2
 8009f84:	460e      	mov	r6, r1
 8009f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f8a:	f000 f9af 	bl	800a2ec <_malloc_r>
 8009f8e:	4604      	mov	r4, r0
 8009f90:	b140      	cbz	r0, 8009fa4 <__sfmoreglue+0x28>
 8009f92:	2100      	movs	r1, #0
 8009f94:	e9c0 1600 	strd	r1, r6, [r0]
 8009f98:	300c      	adds	r0, #12
 8009f9a:	60a0      	str	r0, [r4, #8]
 8009f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fa0:	f000 f920 	bl	800a1e4 <memset>
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}

08009fa8 <__sfp_lock_acquire>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__sfp_lock_acquire+0x8>)
 8009faa:	f000 b8d8 	b.w	800a15e <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	200007a9 	.word	0x200007a9

08009fb4 <__sfp_lock_release>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__sfp_lock_release+0x8>)
 8009fb6:	f000 b8d3 	b.w	800a160 <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	200007a9 	.word	0x200007a9

08009fc0 <__sinit_lock_acquire>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__sinit_lock_acquire+0x8>)
 8009fc2:	f000 b8cc 	b.w	800a15e <__retarget_lock_acquire_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	200007aa 	.word	0x200007aa

08009fcc <__sinit_lock_release>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	; (8009fd4 <__sinit_lock_release+0x8>)
 8009fce:	f000 b8c7 	b.w	800a160 <__retarget_lock_release_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	200007aa 	.word	0x200007aa

08009fd8 <__sinit>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	4604      	mov	r4, r0
 8009fdc:	f7ff fff0 	bl	8009fc0 <__sinit_lock_acquire>
 8009fe0:	69a3      	ldr	r3, [r4, #24]
 8009fe2:	b11b      	cbz	r3, 8009fec <__sinit+0x14>
 8009fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe8:	f7ff bff0 	b.w	8009fcc <__sinit_lock_release>
 8009fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8009ff2:	4b13      	ldr	r3, [pc, #76]	; (800a040 <__sinit+0x68>)
 8009ff4:	4a13      	ldr	r2, [pc, #76]	; (800a044 <__sinit+0x6c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ffa:	42a3      	cmp	r3, r4
 8009ffc:	bf08      	it	eq
 8009ffe:	2301      	moveq	r3, #1
 800a000:	4620      	mov	r0, r4
 800a002:	bf08      	it	eq
 800a004:	61a3      	streq	r3, [r4, #24]
 800a006:	f000 f81f 	bl	800a048 <__sfp>
 800a00a:	6060      	str	r0, [r4, #4]
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 f81b 	bl	800a048 <__sfp>
 800a012:	60a0      	str	r0, [r4, #8]
 800a014:	4620      	mov	r0, r4
 800a016:	f000 f817 	bl	800a048 <__sfp>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2104      	movs	r1, #4
 800a01e:	60e0      	str	r0, [r4, #12]
 800a020:	6860      	ldr	r0, [r4, #4]
 800a022:	f7ff ff81 	bl	8009f28 <std>
 800a026:	2201      	movs	r2, #1
 800a028:	2109      	movs	r1, #9
 800a02a:	68a0      	ldr	r0, [r4, #8]
 800a02c:	f7ff ff7c 	bl	8009f28 <std>
 800a030:	2202      	movs	r2, #2
 800a032:	2112      	movs	r1, #18
 800a034:	68e0      	ldr	r0, [r4, #12]
 800a036:	f7ff ff77 	bl	8009f28 <std>
 800a03a:	2301      	movs	r3, #1
 800a03c:	61a3      	str	r3, [r4, #24]
 800a03e:	e7d1      	b.n	8009fe4 <__sinit+0xc>
 800a040:	0800b8f4 	.word	0x0800b8f4
 800a044:	08009f71 	.word	0x08009f71

0800a048 <__sfp>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	4607      	mov	r7, r0
 800a04c:	f7ff ffac 	bl	8009fa8 <__sfp_lock_acquire>
 800a050:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <__sfp+0x84>)
 800a052:	681e      	ldr	r6, [r3, #0]
 800a054:	69b3      	ldr	r3, [r6, #24]
 800a056:	b913      	cbnz	r3, 800a05e <__sfp+0x16>
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff ffbd 	bl	8009fd8 <__sinit>
 800a05e:	3648      	adds	r6, #72	; 0x48
 800a060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a064:	3b01      	subs	r3, #1
 800a066:	d503      	bpl.n	800a070 <__sfp+0x28>
 800a068:	6833      	ldr	r3, [r6, #0]
 800a06a:	b30b      	cbz	r3, 800a0b0 <__sfp+0x68>
 800a06c:	6836      	ldr	r6, [r6, #0]
 800a06e:	e7f7      	b.n	800a060 <__sfp+0x18>
 800a070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a074:	b9d5      	cbnz	r5, 800a0ac <__sfp+0x64>
 800a076:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <__sfp+0x88>)
 800a078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a07c:	60e3      	str	r3, [r4, #12]
 800a07e:	6665      	str	r5, [r4, #100]	; 0x64
 800a080:	f000 f86c 	bl	800a15c <__retarget_lock_init_recursive>
 800a084:	f7ff ff96 	bl	8009fb4 <__sfp_lock_release>
 800a088:	2208      	movs	r2, #8
 800a08a:	4629      	mov	r1, r5
 800a08c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a094:	6025      	str	r5, [r4, #0]
 800a096:	61a5      	str	r5, [r4, #24]
 800a098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a09c:	f000 f8a2 	bl	800a1e4 <memset>
 800a0a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ac:	3468      	adds	r4, #104	; 0x68
 800a0ae:	e7d9      	b.n	800a064 <__sfp+0x1c>
 800a0b0:	2104      	movs	r1, #4
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	f7ff ff62 	bl	8009f7c <__sfmoreglue>
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	6030      	str	r0, [r6, #0]
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d1d5      	bne.n	800a06c <__sfp+0x24>
 800a0c0:	f7ff ff78 	bl	8009fb4 <__sfp_lock_release>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	e7ee      	b.n	800a0a8 <__sfp+0x60>
 800a0ca:	bf00      	nop
 800a0cc:	0800b8f4 	.word	0x0800b8f4
 800a0d0:	ffff0001 	.word	0xffff0001

0800a0d4 <_fwalk_reent>:
 800a0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d8:	4606      	mov	r6, r0
 800a0da:	4688      	mov	r8, r1
 800a0dc:	2700      	movs	r7, #0
 800a0de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0e6:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ea:	d505      	bpl.n	800a0f8 <_fwalk_reent+0x24>
 800a0ec:	6824      	ldr	r4, [r4, #0]
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	d1f7      	bne.n	800a0e2 <_fwalk_reent+0xe>
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f8:	89ab      	ldrh	r3, [r5, #12]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d907      	bls.n	800a10e <_fwalk_reent+0x3a>
 800a0fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a102:	3301      	adds	r3, #1
 800a104:	d003      	beq.n	800a10e <_fwalk_reent+0x3a>
 800a106:	4629      	mov	r1, r5
 800a108:	4630      	mov	r0, r6
 800a10a:	47c0      	blx	r8
 800a10c:	4307      	orrs	r7, r0
 800a10e:	3568      	adds	r5, #104	; 0x68
 800a110:	e7e9      	b.n	800a0e6 <_fwalk_reent+0x12>
	...

0800a114 <__libc_init_array>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	2600      	movs	r6, #0
 800a118:	4d0c      	ldr	r5, [pc, #48]	; (800a14c <__libc_init_array+0x38>)
 800a11a:	4c0d      	ldr	r4, [pc, #52]	; (800a150 <__libc_init_array+0x3c>)
 800a11c:	1b64      	subs	r4, r4, r5
 800a11e:	10a4      	asrs	r4, r4, #2
 800a120:	42a6      	cmp	r6, r4
 800a122:	d109      	bne.n	800a138 <__libc_init_array+0x24>
 800a124:	f000 fece 	bl	800aec4 <_init>
 800a128:	2600      	movs	r6, #0
 800a12a:	4d0a      	ldr	r5, [pc, #40]	; (800a154 <__libc_init_array+0x40>)
 800a12c:	4c0a      	ldr	r4, [pc, #40]	; (800a158 <__libc_init_array+0x44>)
 800a12e:	1b64      	subs	r4, r4, r5
 800a130:	10a4      	asrs	r4, r4, #2
 800a132:	42a6      	cmp	r6, r4
 800a134:	d105      	bne.n	800a142 <__libc_init_array+0x2e>
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13c:	4798      	blx	r3
 800a13e:	3601      	adds	r6, #1
 800a140:	e7ee      	b.n	800a120 <__libc_init_array+0xc>
 800a142:	f855 3b04 	ldr.w	r3, [r5], #4
 800a146:	4798      	blx	r3
 800a148:	3601      	adds	r6, #1
 800a14a:	e7f2      	b.n	800a132 <__libc_init_array+0x1e>
 800a14c:	0800b92c 	.word	0x0800b92c
 800a150:	0800b92c 	.word	0x0800b92c
 800a154:	0800b92c 	.word	0x0800b92c
 800a158:	0800b930 	.word	0x0800b930

0800a15c <__retarget_lock_init_recursive>:
 800a15c:	4770      	bx	lr

0800a15e <__retarget_lock_acquire_recursive>:
 800a15e:	4770      	bx	lr

0800a160 <__retarget_lock_release_recursive>:
 800a160:	4770      	bx	lr
	...

0800a164 <free>:
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <free+0xc>)
 800a166:	4601      	mov	r1, r0
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f000 b857 	b.w	800a21c <_free_r>
 800a16e:	bf00      	nop
 800a170:	20000494 	.word	0x20000494

0800a174 <memcmp>:
 800a174:	b510      	push	{r4, lr}
 800a176:	3901      	subs	r1, #1
 800a178:	4402      	add	r2, r0
 800a17a:	4290      	cmp	r0, r2
 800a17c:	d101      	bne.n	800a182 <memcmp+0xe>
 800a17e:	2000      	movs	r0, #0
 800a180:	e005      	b.n	800a18e <memcmp+0x1a>
 800a182:	7803      	ldrb	r3, [r0, #0]
 800a184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d001      	beq.n	800a190 <memcmp+0x1c>
 800a18c:	1b18      	subs	r0, r3, r4
 800a18e:	bd10      	pop	{r4, pc}
 800a190:	3001      	adds	r0, #1
 800a192:	e7f2      	b.n	800a17a <memcmp+0x6>

0800a194 <memcpy>:
 800a194:	440a      	add	r2, r1
 800a196:	4291      	cmp	r1, r2
 800a198:	f100 33ff 	add.w	r3, r0, #4294967295
 800a19c:	d100      	bne.n	800a1a0 <memcpy+0xc>
 800a19e:	4770      	bx	lr
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1a6:	4291      	cmp	r1, r2
 800a1a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ac:	d1f9      	bne.n	800a1a2 <memcpy+0xe>
 800a1ae:	bd10      	pop	{r4, pc}

0800a1b0 <memmove>:
 800a1b0:	4288      	cmp	r0, r1
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	eb01 0402 	add.w	r4, r1, r2
 800a1b8:	d902      	bls.n	800a1c0 <memmove+0x10>
 800a1ba:	4284      	cmp	r4, r0
 800a1bc:	4623      	mov	r3, r4
 800a1be:	d807      	bhi.n	800a1d0 <memmove+0x20>
 800a1c0:	1e43      	subs	r3, r0, #1
 800a1c2:	42a1      	cmp	r1, r4
 800a1c4:	d008      	beq.n	800a1d8 <memmove+0x28>
 800a1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1ce:	e7f8      	b.n	800a1c2 <memmove+0x12>
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	4402      	add	r2, r0
 800a1d4:	428a      	cmp	r2, r1
 800a1d6:	d100      	bne.n	800a1da <memmove+0x2a>
 800a1d8:	bd10      	pop	{r4, pc}
 800a1da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1e2:	e7f7      	b.n	800a1d4 <memmove+0x24>

0800a1e4 <memset>:
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	4402      	add	r2, r0
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d100      	bne.n	800a1ee <memset+0xa>
 800a1ec:	4770      	bx	lr
 800a1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f2:	e7f9      	b.n	800a1e8 <memset+0x4>

0800a1f4 <_calloc_r>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	fba1 5402 	umull	r5, r4, r1, r2
 800a1fa:	b934      	cbnz	r4, 800a20a <_calloc_r+0x16>
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	f000 f875 	bl	800a2ec <_malloc_r>
 800a202:	4606      	mov	r6, r0
 800a204:	b928      	cbnz	r0, 800a212 <_calloc_r+0x1e>
 800a206:	4630      	mov	r0, r6
 800a208:	bd70      	pop	{r4, r5, r6, pc}
 800a20a:	220c      	movs	r2, #12
 800a20c:	2600      	movs	r6, #0
 800a20e:	6002      	str	r2, [r0, #0]
 800a210:	e7f9      	b.n	800a206 <_calloc_r+0x12>
 800a212:	462a      	mov	r2, r5
 800a214:	4621      	mov	r1, r4
 800a216:	f7ff ffe5 	bl	800a1e4 <memset>
 800a21a:	e7f4      	b.n	800a206 <_calloc_r+0x12>

0800a21c <_free_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4605      	mov	r5, r0
 800a220:	2900      	cmp	r1, #0
 800a222:	d040      	beq.n	800a2a6 <_free_r+0x8a>
 800a224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a228:	1f0c      	subs	r4, r1, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	bfb8      	it	lt
 800a22e:	18e4      	addlt	r4, r4, r3
 800a230:	f000 fb0c 	bl	800a84c <__malloc_lock>
 800a234:	4a1c      	ldr	r2, [pc, #112]	; (800a2a8 <_free_r+0x8c>)
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	b933      	cbnz	r3, 800a248 <_free_r+0x2c>
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	6014      	str	r4, [r2, #0]
 800a23e:	4628      	mov	r0, r5
 800a240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a244:	f000 bb08 	b.w	800a858 <__malloc_unlock>
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d908      	bls.n	800a25e <_free_r+0x42>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	1821      	adds	r1, r4, r0
 800a250:	428b      	cmp	r3, r1
 800a252:	bf01      	itttt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	1809      	addeq	r1, r1, r0
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	e7ed      	b.n	800a23a <_free_r+0x1e>
 800a25e:	461a      	mov	r2, r3
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	b10b      	cbz	r3, 800a268 <_free_r+0x4c>
 800a264:	42a3      	cmp	r3, r4
 800a266:	d9fa      	bls.n	800a25e <_free_r+0x42>
 800a268:	6811      	ldr	r1, [r2, #0]
 800a26a:	1850      	adds	r0, r2, r1
 800a26c:	42a0      	cmp	r0, r4
 800a26e:	d10b      	bne.n	800a288 <_free_r+0x6c>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	4401      	add	r1, r0
 800a274:	1850      	adds	r0, r2, r1
 800a276:	4283      	cmp	r3, r0
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	d1e0      	bne.n	800a23e <_free_r+0x22>
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4401      	add	r1, r0
 800a282:	6011      	str	r1, [r2, #0]
 800a284:	6053      	str	r3, [r2, #4]
 800a286:	e7da      	b.n	800a23e <_free_r+0x22>
 800a288:	d902      	bls.n	800a290 <_free_r+0x74>
 800a28a:	230c      	movs	r3, #12
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	e7d6      	b.n	800a23e <_free_r+0x22>
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	1821      	adds	r1, r4, r0
 800a294:	428b      	cmp	r3, r1
 800a296:	bf01      	itttt	eq
 800a298:	6819      	ldreq	r1, [r3, #0]
 800a29a:	685b      	ldreq	r3, [r3, #4]
 800a29c:	1809      	addeq	r1, r1, r0
 800a29e:	6021      	streq	r1, [r4, #0]
 800a2a0:	6063      	str	r3, [r4, #4]
 800a2a2:	6054      	str	r4, [r2, #4]
 800a2a4:	e7cb      	b.n	800a23e <_free_r+0x22>
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	200007ac 	.word	0x200007ac

0800a2ac <sbrk_aligned>:
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	4e0e      	ldr	r6, [pc, #56]	; (800a2e8 <sbrk_aligned+0x3c>)
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	6831      	ldr	r1, [r6, #0]
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	b911      	cbnz	r1, 800a2be <sbrk_aligned+0x12>
 800a2b8:	f000 f91a 	bl	800a4f0 <_sbrk_r>
 800a2bc:	6030      	str	r0, [r6, #0]
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f000 f915 	bl	800a4f0 <_sbrk_r>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d00a      	beq.n	800a2e0 <sbrk_aligned+0x34>
 800a2ca:	1cc4      	adds	r4, r0, #3
 800a2cc:	f024 0403 	bic.w	r4, r4, #3
 800a2d0:	42a0      	cmp	r0, r4
 800a2d2:	d007      	beq.n	800a2e4 <sbrk_aligned+0x38>
 800a2d4:	1a21      	subs	r1, r4, r0
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 f90a 	bl	800a4f0 <_sbrk_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d101      	bne.n	800a2e4 <sbrk_aligned+0x38>
 800a2e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	200007b0 	.word	0x200007b0

0800a2ec <_malloc_r>:
 800a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	1ccd      	adds	r5, r1, #3
 800a2f2:	f025 0503 	bic.w	r5, r5, #3
 800a2f6:	3508      	adds	r5, #8
 800a2f8:	2d0c      	cmp	r5, #12
 800a2fa:	bf38      	it	cc
 800a2fc:	250c      	movcc	r5, #12
 800a2fe:	2d00      	cmp	r5, #0
 800a300:	4607      	mov	r7, r0
 800a302:	db01      	blt.n	800a308 <_malloc_r+0x1c>
 800a304:	42a9      	cmp	r1, r5
 800a306:	d905      	bls.n	800a314 <_malloc_r+0x28>
 800a308:	230c      	movs	r3, #12
 800a30a:	2600      	movs	r6, #0
 800a30c:	603b      	str	r3, [r7, #0]
 800a30e:	4630      	mov	r0, r6
 800a310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a314:	4e2e      	ldr	r6, [pc, #184]	; (800a3d0 <_malloc_r+0xe4>)
 800a316:	f000 fa99 	bl	800a84c <__malloc_lock>
 800a31a:	6833      	ldr	r3, [r6, #0]
 800a31c:	461c      	mov	r4, r3
 800a31e:	bb34      	cbnz	r4, 800a36e <_malloc_r+0x82>
 800a320:	4629      	mov	r1, r5
 800a322:	4638      	mov	r0, r7
 800a324:	f7ff ffc2 	bl	800a2ac <sbrk_aligned>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	4604      	mov	r4, r0
 800a32c:	d14d      	bne.n	800a3ca <_malloc_r+0xde>
 800a32e:	6834      	ldr	r4, [r6, #0]
 800a330:	4626      	mov	r6, r4
 800a332:	2e00      	cmp	r6, #0
 800a334:	d140      	bne.n	800a3b8 <_malloc_r+0xcc>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	4631      	mov	r1, r6
 800a33a:	4638      	mov	r0, r7
 800a33c:	eb04 0803 	add.w	r8, r4, r3
 800a340:	f000 f8d6 	bl	800a4f0 <_sbrk_r>
 800a344:	4580      	cmp	r8, r0
 800a346:	d13a      	bne.n	800a3be <_malloc_r+0xd2>
 800a348:	6821      	ldr	r1, [r4, #0]
 800a34a:	3503      	adds	r5, #3
 800a34c:	1a6d      	subs	r5, r5, r1
 800a34e:	f025 0503 	bic.w	r5, r5, #3
 800a352:	3508      	adds	r5, #8
 800a354:	2d0c      	cmp	r5, #12
 800a356:	bf38      	it	cc
 800a358:	250c      	movcc	r5, #12
 800a35a:	4638      	mov	r0, r7
 800a35c:	4629      	mov	r1, r5
 800a35e:	f7ff ffa5 	bl	800a2ac <sbrk_aligned>
 800a362:	3001      	adds	r0, #1
 800a364:	d02b      	beq.n	800a3be <_malloc_r+0xd2>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	442b      	add	r3, r5
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	e00e      	b.n	800a38c <_malloc_r+0xa0>
 800a36e:	6822      	ldr	r2, [r4, #0]
 800a370:	1b52      	subs	r2, r2, r5
 800a372:	d41e      	bmi.n	800a3b2 <_malloc_r+0xc6>
 800a374:	2a0b      	cmp	r2, #11
 800a376:	d916      	bls.n	800a3a6 <_malloc_r+0xba>
 800a378:	1961      	adds	r1, r4, r5
 800a37a:	42a3      	cmp	r3, r4
 800a37c:	6025      	str	r5, [r4, #0]
 800a37e:	bf18      	it	ne
 800a380:	6059      	strne	r1, [r3, #4]
 800a382:	6863      	ldr	r3, [r4, #4]
 800a384:	bf08      	it	eq
 800a386:	6031      	streq	r1, [r6, #0]
 800a388:	5162      	str	r2, [r4, r5]
 800a38a:	604b      	str	r3, [r1, #4]
 800a38c:	4638      	mov	r0, r7
 800a38e:	f104 060b 	add.w	r6, r4, #11
 800a392:	f000 fa61 	bl	800a858 <__malloc_unlock>
 800a396:	f026 0607 	bic.w	r6, r6, #7
 800a39a:	1d23      	adds	r3, r4, #4
 800a39c:	1af2      	subs	r2, r6, r3
 800a39e:	d0b6      	beq.n	800a30e <_malloc_r+0x22>
 800a3a0:	1b9b      	subs	r3, r3, r6
 800a3a2:	50a3      	str	r3, [r4, r2]
 800a3a4:	e7b3      	b.n	800a30e <_malloc_r+0x22>
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	bf0c      	ite	eq
 800a3ac:	6032      	streq	r2, [r6, #0]
 800a3ae:	605a      	strne	r2, [r3, #4]
 800a3b0:	e7ec      	b.n	800a38c <_malloc_r+0xa0>
 800a3b2:	4623      	mov	r3, r4
 800a3b4:	6864      	ldr	r4, [r4, #4]
 800a3b6:	e7b2      	b.n	800a31e <_malloc_r+0x32>
 800a3b8:	4634      	mov	r4, r6
 800a3ba:	6876      	ldr	r6, [r6, #4]
 800a3bc:	e7b9      	b.n	800a332 <_malloc_r+0x46>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	f000 fa48 	bl	800a858 <__malloc_unlock>
 800a3c8:	e7a1      	b.n	800a30e <_malloc_r+0x22>
 800a3ca:	6025      	str	r5, [r4, #0]
 800a3cc:	e7de      	b.n	800a38c <_malloc_r+0xa0>
 800a3ce:	bf00      	nop
 800a3d0:	200007ac 	.word	0x200007ac

0800a3d4 <iprintf>:
 800a3d4:	b40f      	push	{r0, r1, r2, r3}
 800a3d6:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <iprintf+0x2c>)
 800a3d8:	b513      	push	{r0, r1, r4, lr}
 800a3da:	681c      	ldr	r4, [r3, #0]
 800a3dc:	b124      	cbz	r4, 800a3e8 <iprintf+0x14>
 800a3de:	69a3      	ldr	r3, [r4, #24]
 800a3e0:	b913      	cbnz	r3, 800a3e8 <iprintf+0x14>
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7ff fdf8 	bl	8009fd8 <__sinit>
 800a3e8:	ab05      	add	r3, sp, #20
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	9a04      	ldr	r2, [sp, #16]
 800a3ee:	68a1      	ldr	r1, [r4, #8]
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	f000 fa5f 	bl	800a8b4 <_vfiprintf_r>
 800a3f6:	b002      	add	sp, #8
 800a3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fc:	b004      	add	sp, #16
 800a3fe:	4770      	bx	lr
 800a400:	20000494 	.word	0x20000494

0800a404 <_puts_r>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	460e      	mov	r6, r1
 800a408:	4605      	mov	r5, r0
 800a40a:	b118      	cbz	r0, 800a414 <_puts_r+0x10>
 800a40c:	6983      	ldr	r3, [r0, #24]
 800a40e:	b90b      	cbnz	r3, 800a414 <_puts_r+0x10>
 800a410:	f7ff fde2 	bl	8009fd8 <__sinit>
 800a414:	69ab      	ldr	r3, [r5, #24]
 800a416:	68ac      	ldr	r4, [r5, #8]
 800a418:	b913      	cbnz	r3, 800a420 <_puts_r+0x1c>
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7ff fddc 	bl	8009fd8 <__sinit>
 800a420:	4b2c      	ldr	r3, [pc, #176]	; (800a4d4 <_puts_r+0xd0>)
 800a422:	429c      	cmp	r4, r3
 800a424:	d120      	bne.n	800a468 <_puts_r+0x64>
 800a426:	686c      	ldr	r4, [r5, #4]
 800a428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a42a:	07db      	lsls	r3, r3, #31
 800a42c:	d405      	bmi.n	800a43a <_puts_r+0x36>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	0598      	lsls	r0, r3, #22
 800a432:	d402      	bmi.n	800a43a <_puts_r+0x36>
 800a434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a436:	f7ff fe92 	bl	800a15e <__retarget_lock_acquire_recursive>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	0719      	lsls	r1, r3, #28
 800a43e:	d51d      	bpl.n	800a47c <_puts_r+0x78>
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	b1db      	cbz	r3, 800a47c <_puts_r+0x78>
 800a444:	3e01      	subs	r6, #1
 800a446:	68a3      	ldr	r3, [r4, #8]
 800a448:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a44c:	3b01      	subs	r3, #1
 800a44e:	60a3      	str	r3, [r4, #8]
 800a450:	bb39      	cbnz	r1, 800a4a2 <_puts_r+0x9e>
 800a452:	2b00      	cmp	r3, #0
 800a454:	da38      	bge.n	800a4c8 <_puts_r+0xc4>
 800a456:	4622      	mov	r2, r4
 800a458:	210a      	movs	r1, #10
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f89c 	bl	800a598 <__swbuf_r>
 800a460:	3001      	adds	r0, #1
 800a462:	d011      	beq.n	800a488 <_puts_r+0x84>
 800a464:	250a      	movs	r5, #10
 800a466:	e011      	b.n	800a48c <_puts_r+0x88>
 800a468:	4b1b      	ldr	r3, [pc, #108]	; (800a4d8 <_puts_r+0xd4>)
 800a46a:	429c      	cmp	r4, r3
 800a46c:	d101      	bne.n	800a472 <_puts_r+0x6e>
 800a46e:	68ac      	ldr	r4, [r5, #8]
 800a470:	e7da      	b.n	800a428 <_puts_r+0x24>
 800a472:	4b1a      	ldr	r3, [pc, #104]	; (800a4dc <_puts_r+0xd8>)
 800a474:	429c      	cmp	r4, r3
 800a476:	bf08      	it	eq
 800a478:	68ec      	ldreq	r4, [r5, #12]
 800a47a:	e7d5      	b.n	800a428 <_puts_r+0x24>
 800a47c:	4621      	mov	r1, r4
 800a47e:	4628      	mov	r0, r5
 800a480:	f000 f8ee 	bl	800a660 <__swsetup_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	d0dd      	beq.n	800a444 <_puts_r+0x40>
 800a488:	f04f 35ff 	mov.w	r5, #4294967295
 800a48c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a48e:	07da      	lsls	r2, r3, #31
 800a490:	d405      	bmi.n	800a49e <_puts_r+0x9a>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	059b      	lsls	r3, r3, #22
 800a496:	d402      	bmi.n	800a49e <_puts_r+0x9a>
 800a498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49a:	f7ff fe61 	bl	800a160 <__retarget_lock_release_recursive>
 800a49e:	4628      	mov	r0, r5
 800a4a0:	bd70      	pop	{r4, r5, r6, pc}
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	da04      	bge.n	800a4b0 <_puts_r+0xac>
 800a4a6:	69a2      	ldr	r2, [r4, #24]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	dc06      	bgt.n	800a4ba <_puts_r+0xb6>
 800a4ac:	290a      	cmp	r1, #10
 800a4ae:	d004      	beq.n	800a4ba <_puts_r+0xb6>
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	6022      	str	r2, [r4, #0]
 800a4b6:	7019      	strb	r1, [r3, #0]
 800a4b8:	e7c5      	b.n	800a446 <_puts_r+0x42>
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f000 f86b 	bl	800a598 <__swbuf_r>
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	d1bf      	bne.n	800a446 <_puts_r+0x42>
 800a4c6:	e7df      	b.n	800a488 <_puts_r+0x84>
 800a4c8:	250a      	movs	r5, #10
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	6022      	str	r2, [r4, #0]
 800a4d0:	701d      	strb	r5, [r3, #0]
 800a4d2:	e7db      	b.n	800a48c <_puts_r+0x88>
 800a4d4:	0800b8b4 	.word	0x0800b8b4
 800a4d8:	0800b8d4 	.word	0x0800b8d4
 800a4dc:	0800b894 	.word	0x0800b894

0800a4e0 <puts>:
 800a4e0:	4b02      	ldr	r3, [pc, #8]	; (800a4ec <puts+0xc>)
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	f7ff bf8d 	b.w	800a404 <_puts_r>
 800a4ea:	bf00      	nop
 800a4ec:	20000494 	.word	0x20000494

0800a4f0 <_sbrk_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	4d05      	ldr	r5, [pc, #20]	; (800a50c <_sbrk_r+0x1c>)
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	602b      	str	r3, [r5, #0]
 800a4fc:	f7fc f8e4 	bl	80066c8 <_sbrk>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_sbrk_r+0x1a>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_sbrk_r+0x1a>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	200007b4 	.word	0x200007b4

0800a510 <__sread>:
 800a510:	b510      	push	{r4, lr}
 800a512:	460c      	mov	r4, r1
 800a514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a518:	f000 fc92 	bl	800ae40 <_read_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	bfab      	itete	ge
 800a520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a522:	89a3      	ldrhlt	r3, [r4, #12]
 800a524:	181b      	addge	r3, r3, r0
 800a526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a52a:	bfac      	ite	ge
 800a52c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a52e:	81a3      	strhlt	r3, [r4, #12]
 800a530:	bd10      	pop	{r4, pc}

0800a532 <__swrite>:
 800a532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a536:	461f      	mov	r7, r3
 800a538:	898b      	ldrh	r3, [r1, #12]
 800a53a:	4605      	mov	r5, r0
 800a53c:	05db      	lsls	r3, r3, #23
 800a53e:	460c      	mov	r4, r1
 800a540:	4616      	mov	r6, r2
 800a542:	d505      	bpl.n	800a550 <__swrite+0x1e>
 800a544:	2302      	movs	r3, #2
 800a546:	2200      	movs	r2, #0
 800a548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a54c:	f000 f906 	bl	800a75c <_lseek_r>
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	4632      	mov	r2, r6
 800a554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	4628      	mov	r0, r5
 800a55c:	463b      	mov	r3, r7
 800a55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a566:	f000 b869 	b.w	800a63c <_write_r>

0800a56a <__sseek>:
 800a56a:	b510      	push	{r4, lr}
 800a56c:	460c      	mov	r4, r1
 800a56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a572:	f000 f8f3 	bl	800a75c <_lseek_r>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	bf15      	itete	ne
 800a57c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a57e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a586:	81a3      	strheq	r3, [r4, #12]
 800a588:	bf18      	it	ne
 800a58a:	81a3      	strhne	r3, [r4, #12]
 800a58c:	bd10      	pop	{r4, pc}

0800a58e <__sclose>:
 800a58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a592:	f000 b8d3 	b.w	800a73c <_close_r>
	...

0800a598 <__swbuf_r>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	460e      	mov	r6, r1
 800a59c:	4614      	mov	r4, r2
 800a59e:	4605      	mov	r5, r0
 800a5a0:	b118      	cbz	r0, 800a5aa <__swbuf_r+0x12>
 800a5a2:	6983      	ldr	r3, [r0, #24]
 800a5a4:	b90b      	cbnz	r3, 800a5aa <__swbuf_r+0x12>
 800a5a6:	f7ff fd17 	bl	8009fd8 <__sinit>
 800a5aa:	4b21      	ldr	r3, [pc, #132]	; (800a630 <__swbuf_r+0x98>)
 800a5ac:	429c      	cmp	r4, r3
 800a5ae:	d12b      	bne.n	800a608 <__swbuf_r+0x70>
 800a5b0:	686c      	ldr	r4, [r5, #4]
 800a5b2:	69a3      	ldr	r3, [r4, #24]
 800a5b4:	60a3      	str	r3, [r4, #8]
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	071a      	lsls	r2, r3, #28
 800a5ba:	d52f      	bpl.n	800a61c <__swbuf_r+0x84>
 800a5bc:	6923      	ldr	r3, [r4, #16]
 800a5be:	b36b      	cbz	r3, 800a61c <__swbuf_r+0x84>
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	6820      	ldr	r0, [r4, #0]
 800a5c4:	b2f6      	uxtb	r6, r6
 800a5c6:	1ac0      	subs	r0, r0, r3
 800a5c8:	6963      	ldr	r3, [r4, #20]
 800a5ca:	4637      	mov	r7, r6
 800a5cc:	4283      	cmp	r3, r0
 800a5ce:	dc04      	bgt.n	800a5da <__swbuf_r+0x42>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f7ff fc5a 	bl	8009e8c <_fflush_r>
 800a5d8:	bb30      	cbnz	r0, 800a628 <__swbuf_r+0x90>
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	3001      	adds	r0, #1
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	60a3      	str	r3, [r4, #8]
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	1c5a      	adds	r2, r3, #1
 800a5e6:	6022      	str	r2, [r4, #0]
 800a5e8:	701e      	strb	r6, [r3, #0]
 800a5ea:	6963      	ldr	r3, [r4, #20]
 800a5ec:	4283      	cmp	r3, r0
 800a5ee:	d004      	beq.n	800a5fa <__swbuf_r+0x62>
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	07db      	lsls	r3, r3, #31
 800a5f4:	d506      	bpl.n	800a604 <__swbuf_r+0x6c>
 800a5f6:	2e0a      	cmp	r6, #10
 800a5f8:	d104      	bne.n	800a604 <__swbuf_r+0x6c>
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	f7ff fc45 	bl	8009e8c <_fflush_r>
 800a602:	b988      	cbnz	r0, 800a628 <__swbuf_r+0x90>
 800a604:	4638      	mov	r0, r7
 800a606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a608:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <__swbuf_r+0x9c>)
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d101      	bne.n	800a612 <__swbuf_r+0x7a>
 800a60e:	68ac      	ldr	r4, [r5, #8]
 800a610:	e7cf      	b.n	800a5b2 <__swbuf_r+0x1a>
 800a612:	4b09      	ldr	r3, [pc, #36]	; (800a638 <__swbuf_r+0xa0>)
 800a614:	429c      	cmp	r4, r3
 800a616:	bf08      	it	eq
 800a618:	68ec      	ldreq	r4, [r5, #12]
 800a61a:	e7ca      	b.n	800a5b2 <__swbuf_r+0x1a>
 800a61c:	4621      	mov	r1, r4
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 f81e 	bl	800a660 <__swsetup_r>
 800a624:	2800      	cmp	r0, #0
 800a626:	d0cb      	beq.n	800a5c0 <__swbuf_r+0x28>
 800a628:	f04f 37ff 	mov.w	r7, #4294967295
 800a62c:	e7ea      	b.n	800a604 <__swbuf_r+0x6c>
 800a62e:	bf00      	nop
 800a630:	0800b8b4 	.word	0x0800b8b4
 800a634:	0800b8d4 	.word	0x0800b8d4
 800a638:	0800b894 	.word	0x0800b894

0800a63c <_write_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	2200      	movs	r2, #0
 800a646:	4d05      	ldr	r5, [pc, #20]	; (800a65c <_write_r+0x20>)
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f7fc f822 	bl	8006694 <_write>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_write_r+0x1e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_write_r+0x1e>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	200007b4 	.word	0x200007b4

0800a660 <__swsetup_r>:
 800a660:	4b32      	ldr	r3, [pc, #200]	; (800a72c <__swsetup_r+0xcc>)
 800a662:	b570      	push	{r4, r5, r6, lr}
 800a664:	681d      	ldr	r5, [r3, #0]
 800a666:	4606      	mov	r6, r0
 800a668:	460c      	mov	r4, r1
 800a66a:	b125      	cbz	r5, 800a676 <__swsetup_r+0x16>
 800a66c:	69ab      	ldr	r3, [r5, #24]
 800a66e:	b913      	cbnz	r3, 800a676 <__swsetup_r+0x16>
 800a670:	4628      	mov	r0, r5
 800a672:	f7ff fcb1 	bl	8009fd8 <__sinit>
 800a676:	4b2e      	ldr	r3, [pc, #184]	; (800a730 <__swsetup_r+0xd0>)
 800a678:	429c      	cmp	r4, r3
 800a67a:	d10f      	bne.n	800a69c <__swsetup_r+0x3c>
 800a67c:	686c      	ldr	r4, [r5, #4]
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a684:	0719      	lsls	r1, r3, #28
 800a686:	d42c      	bmi.n	800a6e2 <__swsetup_r+0x82>
 800a688:	06dd      	lsls	r5, r3, #27
 800a68a:	d411      	bmi.n	800a6b0 <__swsetup_r+0x50>
 800a68c:	2309      	movs	r3, #9
 800a68e:	6033      	str	r3, [r6, #0]
 800a690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a694:	f04f 30ff 	mov.w	r0, #4294967295
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	e03e      	b.n	800a71a <__swsetup_r+0xba>
 800a69c:	4b25      	ldr	r3, [pc, #148]	; (800a734 <__swsetup_r+0xd4>)
 800a69e:	429c      	cmp	r4, r3
 800a6a0:	d101      	bne.n	800a6a6 <__swsetup_r+0x46>
 800a6a2:	68ac      	ldr	r4, [r5, #8]
 800a6a4:	e7eb      	b.n	800a67e <__swsetup_r+0x1e>
 800a6a6:	4b24      	ldr	r3, [pc, #144]	; (800a738 <__swsetup_r+0xd8>)
 800a6a8:	429c      	cmp	r4, r3
 800a6aa:	bf08      	it	eq
 800a6ac:	68ec      	ldreq	r4, [r5, #12]
 800a6ae:	e7e6      	b.n	800a67e <__swsetup_r+0x1e>
 800a6b0:	0758      	lsls	r0, r3, #29
 800a6b2:	d512      	bpl.n	800a6da <__swsetup_r+0x7a>
 800a6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6b6:	b141      	cbz	r1, 800a6ca <__swsetup_r+0x6a>
 800a6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6bc:	4299      	cmp	r1, r3
 800a6be:	d002      	beq.n	800a6c6 <__swsetup_r+0x66>
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f7ff fdab 	bl	800a21c <_free_r>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6063      	str	r3, [r4, #4]
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f043 0308 	orr.w	r3, r3, #8
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	b94b      	cbnz	r3, 800a6fa <__swsetup_r+0x9a>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6f0:	d003      	beq.n	800a6fa <__swsetup_r+0x9a>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f000 f869 	bl	800a7cc <__smakebuf_r>
 800a6fa:	89a0      	ldrh	r0, [r4, #12]
 800a6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a700:	f010 0301 	ands.w	r3, r0, #1
 800a704:	d00a      	beq.n	800a71c <__swsetup_r+0xbc>
 800a706:	2300      	movs	r3, #0
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	6963      	ldr	r3, [r4, #20]
 800a70c:	425b      	negs	r3, r3
 800a70e:	61a3      	str	r3, [r4, #24]
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	b943      	cbnz	r3, 800a726 <__swsetup_r+0xc6>
 800a714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a718:	d1ba      	bne.n	800a690 <__swsetup_r+0x30>
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
 800a71c:	0781      	lsls	r1, r0, #30
 800a71e:	bf58      	it	pl
 800a720:	6963      	ldrpl	r3, [r4, #20]
 800a722:	60a3      	str	r3, [r4, #8]
 800a724:	e7f4      	b.n	800a710 <__swsetup_r+0xb0>
 800a726:	2000      	movs	r0, #0
 800a728:	e7f7      	b.n	800a71a <__swsetup_r+0xba>
 800a72a:	bf00      	nop
 800a72c:	20000494 	.word	0x20000494
 800a730:	0800b8b4 	.word	0x0800b8b4
 800a734:	0800b8d4 	.word	0x0800b8d4
 800a738:	0800b894 	.word	0x0800b894

0800a73c <_close_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	2300      	movs	r3, #0
 800a740:	4d05      	ldr	r5, [pc, #20]	; (800a758 <_close_r+0x1c>)
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	602b      	str	r3, [r5, #0]
 800a748:	f7fb ffb2 	bl	80066b0 <_close>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d102      	bne.n	800a756 <_close_r+0x1a>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	b103      	cbz	r3, 800a756 <_close_r+0x1a>
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	200007b4 	.word	0x200007b4

0800a75c <_lseek_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	4611      	mov	r1, r2
 800a764:	2200      	movs	r2, #0
 800a766:	4d05      	ldr	r5, [pc, #20]	; (800a77c <_lseek_r+0x20>)
 800a768:	602a      	str	r2, [r5, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	f7fb ffaa 	bl	80066c4 <_lseek>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_lseek_r+0x1e>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b103      	cbz	r3, 800a77a <_lseek_r+0x1e>
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	200007b4 	.word	0x200007b4

0800a780 <__swhatbuf_r>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	460e      	mov	r6, r1
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	4614      	mov	r4, r2
 800a78a:	2900      	cmp	r1, #0
 800a78c:	461d      	mov	r5, r3
 800a78e:	b096      	sub	sp, #88	; 0x58
 800a790:	da08      	bge.n	800a7a4 <__swhatbuf_r+0x24>
 800a792:	2200      	movs	r2, #0
 800a794:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a798:	602a      	str	r2, [r5, #0]
 800a79a:	061a      	lsls	r2, r3, #24
 800a79c:	d410      	bmi.n	800a7c0 <__swhatbuf_r+0x40>
 800a79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7a2:	e00e      	b.n	800a7c2 <__swhatbuf_r+0x42>
 800a7a4:	466a      	mov	r2, sp
 800a7a6:	f000 fb5d 	bl	800ae64 <_fstat_r>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	dbf1      	blt.n	800a792 <__swhatbuf_r+0x12>
 800a7ae:	9a01      	ldr	r2, [sp, #4]
 800a7b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7b8:	425a      	negs	r2, r3
 800a7ba:	415a      	adcs	r2, r3
 800a7bc:	602a      	str	r2, [r5, #0]
 800a7be:	e7ee      	b.n	800a79e <__swhatbuf_r+0x1e>
 800a7c0:	2340      	movs	r3, #64	; 0x40
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	b016      	add	sp, #88	; 0x58
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7cc <__smakebuf_r>:
 800a7cc:	898b      	ldrh	r3, [r1, #12]
 800a7ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7d0:	079d      	lsls	r5, r3, #30
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	d507      	bpl.n	800a7e8 <__smakebuf_r+0x1c>
 800a7d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	6163      	str	r3, [r4, #20]
 800a7e4:	b002      	add	sp, #8
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	466a      	mov	r2, sp
 800a7ea:	ab01      	add	r3, sp, #4
 800a7ec:	f7ff ffc8 	bl	800a780 <__swhatbuf_r>
 800a7f0:	9900      	ldr	r1, [sp, #0]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff fd79 	bl	800a2ec <_malloc_r>
 800a7fa:	b948      	cbnz	r0, 800a810 <__smakebuf_r+0x44>
 800a7fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a800:	059a      	lsls	r2, r3, #22
 800a802:	d4ef      	bmi.n	800a7e4 <__smakebuf_r+0x18>
 800a804:	f023 0303 	bic.w	r3, r3, #3
 800a808:	f043 0302 	orr.w	r3, r3, #2
 800a80c:	81a3      	strh	r3, [r4, #12]
 800a80e:	e7e3      	b.n	800a7d8 <__smakebuf_r+0xc>
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <__smakebuf_r+0x7c>)
 800a812:	62b3      	str	r3, [r6, #40]	; 0x28
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	6020      	str	r0, [r4, #0]
 800a818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	6120      	str	r0, [r4, #16]
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	b15b      	cbz	r3, 800a840 <__smakebuf_r+0x74>
 800a828:	4630      	mov	r0, r6
 800a82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82e:	f000 fb2b 	bl	800ae88 <_isatty_r>
 800a832:	b128      	cbz	r0, 800a840 <__smakebuf_r+0x74>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f023 0303 	bic.w	r3, r3, #3
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	89a0      	ldrh	r0, [r4, #12]
 800a842:	4305      	orrs	r5, r0
 800a844:	81a5      	strh	r5, [r4, #12]
 800a846:	e7cd      	b.n	800a7e4 <__smakebuf_r+0x18>
 800a848:	08009f71 	.word	0x08009f71

0800a84c <__malloc_lock>:
 800a84c:	4801      	ldr	r0, [pc, #4]	; (800a854 <__malloc_lock+0x8>)
 800a84e:	f7ff bc86 	b.w	800a15e <__retarget_lock_acquire_recursive>
 800a852:	bf00      	nop
 800a854:	200007a8 	.word	0x200007a8

0800a858 <__malloc_unlock>:
 800a858:	4801      	ldr	r0, [pc, #4]	; (800a860 <__malloc_unlock+0x8>)
 800a85a:	f7ff bc81 	b.w	800a160 <__retarget_lock_release_recursive>
 800a85e:	bf00      	nop
 800a860:	200007a8 	.word	0x200007a8

0800a864 <__sfputc_r>:
 800a864:	6893      	ldr	r3, [r2, #8]
 800a866:	b410      	push	{r4}
 800a868:	3b01      	subs	r3, #1
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	6093      	str	r3, [r2, #8]
 800a86e:	da07      	bge.n	800a880 <__sfputc_r+0x1c>
 800a870:	6994      	ldr	r4, [r2, #24]
 800a872:	42a3      	cmp	r3, r4
 800a874:	db01      	blt.n	800a87a <__sfputc_r+0x16>
 800a876:	290a      	cmp	r1, #10
 800a878:	d102      	bne.n	800a880 <__sfputc_r+0x1c>
 800a87a:	bc10      	pop	{r4}
 800a87c:	f7ff be8c 	b.w	800a598 <__swbuf_r>
 800a880:	6813      	ldr	r3, [r2, #0]
 800a882:	1c58      	adds	r0, r3, #1
 800a884:	6010      	str	r0, [r2, #0]
 800a886:	7019      	strb	r1, [r3, #0]
 800a888:	4608      	mov	r0, r1
 800a88a:	bc10      	pop	{r4}
 800a88c:	4770      	bx	lr

0800a88e <__sfputs_r>:
 800a88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a890:	4606      	mov	r6, r0
 800a892:	460f      	mov	r7, r1
 800a894:	4614      	mov	r4, r2
 800a896:	18d5      	adds	r5, r2, r3
 800a898:	42ac      	cmp	r4, r5
 800a89a:	d101      	bne.n	800a8a0 <__sfputs_r+0x12>
 800a89c:	2000      	movs	r0, #0
 800a89e:	e007      	b.n	800a8b0 <__sfputs_r+0x22>
 800a8a0:	463a      	mov	r2, r7
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a8:	f7ff ffdc 	bl	800a864 <__sfputc_r>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d1f3      	bne.n	800a898 <__sfputs_r+0xa>
 800a8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8b4 <_vfiprintf_r>:
 800a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	4698      	mov	r8, r3
 800a8be:	4606      	mov	r6, r0
 800a8c0:	b09d      	sub	sp, #116	; 0x74
 800a8c2:	b118      	cbz	r0, 800a8cc <_vfiprintf_r+0x18>
 800a8c4:	6983      	ldr	r3, [r0, #24]
 800a8c6:	b90b      	cbnz	r3, 800a8cc <_vfiprintf_r+0x18>
 800a8c8:	f7ff fb86 	bl	8009fd8 <__sinit>
 800a8cc:	4b89      	ldr	r3, [pc, #548]	; (800aaf4 <_vfiprintf_r+0x240>)
 800a8ce:	429d      	cmp	r5, r3
 800a8d0:	d11b      	bne.n	800a90a <_vfiprintf_r+0x56>
 800a8d2:	6875      	ldr	r5, [r6, #4]
 800a8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d6:	07d9      	lsls	r1, r3, #31
 800a8d8:	d405      	bmi.n	800a8e6 <_vfiprintf_r+0x32>
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	059a      	lsls	r2, r3, #22
 800a8de:	d402      	bmi.n	800a8e6 <_vfiprintf_r+0x32>
 800a8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8e2:	f7ff fc3c 	bl	800a15e <__retarget_lock_acquire_recursive>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	071b      	lsls	r3, r3, #28
 800a8ea:	d501      	bpl.n	800a8f0 <_vfiprintf_r+0x3c>
 800a8ec:	692b      	ldr	r3, [r5, #16]
 800a8ee:	b9eb      	cbnz	r3, 800a92c <_vfiprintf_r+0x78>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f7ff feb4 	bl	800a660 <__swsetup_r>
 800a8f8:	b1c0      	cbz	r0, 800a92c <_vfiprintf_r+0x78>
 800a8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8fc:	07dc      	lsls	r4, r3, #31
 800a8fe:	d50e      	bpl.n	800a91e <_vfiprintf_r+0x6a>
 800a900:	f04f 30ff 	mov.w	r0, #4294967295
 800a904:	b01d      	add	sp, #116	; 0x74
 800a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90a:	4b7b      	ldr	r3, [pc, #492]	; (800aaf8 <_vfiprintf_r+0x244>)
 800a90c:	429d      	cmp	r5, r3
 800a90e:	d101      	bne.n	800a914 <_vfiprintf_r+0x60>
 800a910:	68b5      	ldr	r5, [r6, #8]
 800a912:	e7df      	b.n	800a8d4 <_vfiprintf_r+0x20>
 800a914:	4b79      	ldr	r3, [pc, #484]	; (800aafc <_vfiprintf_r+0x248>)
 800a916:	429d      	cmp	r5, r3
 800a918:	bf08      	it	eq
 800a91a:	68f5      	ldreq	r5, [r6, #12]
 800a91c:	e7da      	b.n	800a8d4 <_vfiprintf_r+0x20>
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	0598      	lsls	r0, r3, #22
 800a922:	d4ed      	bmi.n	800a900 <_vfiprintf_r+0x4c>
 800a924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a926:	f7ff fc1b 	bl	800a160 <__retarget_lock_release_recursive>
 800a92a:	e7e9      	b.n	800a900 <_vfiprintf_r+0x4c>
 800a92c:	2300      	movs	r3, #0
 800a92e:	9309      	str	r3, [sp, #36]	; 0x24
 800a930:	2320      	movs	r3, #32
 800a932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a936:	2330      	movs	r3, #48	; 0x30
 800a938:	f04f 0901 	mov.w	r9, #1
 800a93c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a940:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab00 <_vfiprintf_r+0x24c>
 800a944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a948:	4623      	mov	r3, r4
 800a94a:	469a      	mov	sl, r3
 800a94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a950:	b10a      	cbz	r2, 800a956 <_vfiprintf_r+0xa2>
 800a952:	2a25      	cmp	r2, #37	; 0x25
 800a954:	d1f9      	bne.n	800a94a <_vfiprintf_r+0x96>
 800a956:	ebba 0b04 	subs.w	fp, sl, r4
 800a95a:	d00b      	beq.n	800a974 <_vfiprintf_r+0xc0>
 800a95c:	465b      	mov	r3, fp
 800a95e:	4622      	mov	r2, r4
 800a960:	4629      	mov	r1, r5
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff ff93 	bl	800a88e <__sfputs_r>
 800a968:	3001      	adds	r0, #1
 800a96a:	f000 80aa 	beq.w	800aac2 <_vfiprintf_r+0x20e>
 800a96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a970:	445a      	add	r2, fp
 800a972:	9209      	str	r2, [sp, #36]	; 0x24
 800a974:	f89a 3000 	ldrb.w	r3, [sl]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 80a2 	beq.w	800aac2 <_vfiprintf_r+0x20e>
 800a97e:	2300      	movs	r3, #0
 800a980:	f04f 32ff 	mov.w	r2, #4294967295
 800a984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a988:	f10a 0a01 	add.w	sl, sl, #1
 800a98c:	9304      	str	r3, [sp, #16]
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a994:	931a      	str	r3, [sp, #104]	; 0x68
 800a996:	4654      	mov	r4, sl
 800a998:	2205      	movs	r2, #5
 800a99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99e:	4858      	ldr	r0, [pc, #352]	; (800ab00 <_vfiprintf_r+0x24c>)
 800a9a0:	f000 fa82 	bl	800aea8 <memchr>
 800a9a4:	9a04      	ldr	r2, [sp, #16]
 800a9a6:	b9d8      	cbnz	r0, 800a9e0 <_vfiprintf_r+0x12c>
 800a9a8:	06d1      	lsls	r1, r2, #27
 800a9aa:	bf44      	itt	mi
 800a9ac:	2320      	movmi	r3, #32
 800a9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9b2:	0713      	lsls	r3, r2, #28
 800a9b4:	bf44      	itt	mi
 800a9b6:	232b      	movmi	r3, #43	; 0x2b
 800a9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9c2:	d015      	beq.n	800a9f0 <_vfiprintf_r+0x13c>
 800a9c4:	4654      	mov	r4, sl
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	f04f 0c0a 	mov.w	ip, #10
 800a9cc:	9a07      	ldr	r2, [sp, #28]
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9d4:	3b30      	subs	r3, #48	; 0x30
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d94e      	bls.n	800aa78 <_vfiprintf_r+0x1c4>
 800a9da:	b1b0      	cbz	r0, 800aa0a <_vfiprintf_r+0x156>
 800a9dc:	9207      	str	r2, [sp, #28]
 800a9de:	e014      	b.n	800aa0a <_vfiprintf_r+0x156>
 800a9e0:	eba0 0308 	sub.w	r3, r0, r8
 800a9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	46a2      	mov	sl, r4
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	e7d2      	b.n	800a996 <_vfiprintf_r+0xe2>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	1d19      	adds	r1, r3, #4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9103      	str	r1, [sp, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bfbb      	ittet	lt
 800a9fc:	425b      	neglt	r3, r3
 800a9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800aa02:	9307      	strge	r3, [sp, #28]
 800aa04:	9307      	strlt	r3, [sp, #28]
 800aa06:	bfb8      	it	lt
 800aa08:	9204      	strlt	r2, [sp, #16]
 800aa0a:	7823      	ldrb	r3, [r4, #0]
 800aa0c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa0e:	d10c      	bne.n	800aa2a <_vfiprintf_r+0x176>
 800aa10:	7863      	ldrb	r3, [r4, #1]
 800aa12:	2b2a      	cmp	r3, #42	; 0x2a
 800aa14:	d135      	bne.n	800aa82 <_vfiprintf_r+0x1ce>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	3402      	adds	r4, #2
 800aa1a:	1d1a      	adds	r2, r3, #4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	9203      	str	r2, [sp, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bfb8      	it	lt
 800aa24:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa28:	9305      	str	r3, [sp, #20]
 800aa2a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ab04 <_vfiprintf_r+0x250>
 800aa2e:	2203      	movs	r2, #3
 800aa30:	4650      	mov	r0, sl
 800aa32:	7821      	ldrb	r1, [r4, #0]
 800aa34:	f000 fa38 	bl	800aea8 <memchr>
 800aa38:	b140      	cbz	r0, 800aa4c <_vfiprintf_r+0x198>
 800aa3a:	2340      	movs	r3, #64	; 0x40
 800aa3c:	eba0 000a 	sub.w	r0, r0, sl
 800aa40:	fa03 f000 	lsl.w	r0, r3, r0
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	3401      	adds	r4, #1
 800aa48:	4303      	orrs	r3, r0
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa50:	2206      	movs	r2, #6
 800aa52:	482d      	ldr	r0, [pc, #180]	; (800ab08 <_vfiprintf_r+0x254>)
 800aa54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa58:	f000 fa26 	bl	800aea8 <memchr>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d03f      	beq.n	800aae0 <_vfiprintf_r+0x22c>
 800aa60:	4b2a      	ldr	r3, [pc, #168]	; (800ab0c <_vfiprintf_r+0x258>)
 800aa62:	bb1b      	cbnz	r3, 800aaac <_vfiprintf_r+0x1f8>
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	3307      	adds	r3, #7
 800aa68:	f023 0307 	bic.w	r3, r3, #7
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	9303      	str	r3, [sp, #12]
 800aa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa72:	443b      	add	r3, r7
 800aa74:	9309      	str	r3, [sp, #36]	; 0x24
 800aa76:	e767      	b.n	800a948 <_vfiprintf_r+0x94>
 800aa78:	460c      	mov	r4, r1
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa80:	e7a5      	b.n	800a9ce <_vfiprintf_r+0x11a>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f04f 0c0a 	mov.w	ip, #10
 800aa88:	4619      	mov	r1, r3
 800aa8a:	3401      	adds	r4, #1
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa94:	3a30      	subs	r2, #48	; 0x30
 800aa96:	2a09      	cmp	r2, #9
 800aa98:	d903      	bls.n	800aaa2 <_vfiprintf_r+0x1ee>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0c5      	beq.n	800aa2a <_vfiprintf_r+0x176>
 800aa9e:	9105      	str	r1, [sp, #20]
 800aaa0:	e7c3      	b.n	800aa2a <_vfiprintf_r+0x176>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaaa:	e7f0      	b.n	800aa8e <_vfiprintf_r+0x1da>
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462a      	mov	r2, r5
 800aab2:	4630      	mov	r0, r6
 800aab4:	4b16      	ldr	r3, [pc, #88]	; (800ab10 <_vfiprintf_r+0x25c>)
 800aab6:	a904      	add	r1, sp, #16
 800aab8:	f3af 8000 	nop.w
 800aabc:	4607      	mov	r7, r0
 800aabe:	1c78      	adds	r0, r7, #1
 800aac0:	d1d6      	bne.n	800aa70 <_vfiprintf_r+0x1bc>
 800aac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aac4:	07d9      	lsls	r1, r3, #31
 800aac6:	d405      	bmi.n	800aad4 <_vfiprintf_r+0x220>
 800aac8:	89ab      	ldrh	r3, [r5, #12]
 800aaca:	059a      	lsls	r2, r3, #22
 800aacc:	d402      	bmi.n	800aad4 <_vfiprintf_r+0x220>
 800aace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aad0:	f7ff fb46 	bl	800a160 <__retarget_lock_release_recursive>
 800aad4:	89ab      	ldrh	r3, [r5, #12]
 800aad6:	065b      	lsls	r3, r3, #25
 800aad8:	f53f af12 	bmi.w	800a900 <_vfiprintf_r+0x4c>
 800aadc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aade:	e711      	b.n	800a904 <_vfiprintf_r+0x50>
 800aae0:	ab03      	add	r3, sp, #12
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	462a      	mov	r2, r5
 800aae6:	4630      	mov	r0, r6
 800aae8:	4b09      	ldr	r3, [pc, #36]	; (800ab10 <_vfiprintf_r+0x25c>)
 800aaea:	a904      	add	r1, sp, #16
 800aaec:	f000 f882 	bl	800abf4 <_printf_i>
 800aaf0:	e7e4      	b.n	800aabc <_vfiprintf_r+0x208>
 800aaf2:	bf00      	nop
 800aaf4:	0800b8b4 	.word	0x0800b8b4
 800aaf8:	0800b8d4 	.word	0x0800b8d4
 800aafc:	0800b894 	.word	0x0800b894
 800ab00:	0800b8f8 	.word	0x0800b8f8
 800ab04:	0800b8fe 	.word	0x0800b8fe
 800ab08:	0800b902 	.word	0x0800b902
 800ab0c:	00000000 	.word	0x00000000
 800ab10:	0800a88f 	.word	0x0800a88f

0800ab14 <_printf_common>:
 800ab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	4616      	mov	r6, r2
 800ab1a:	4699      	mov	r9, r3
 800ab1c:	688a      	ldr	r2, [r1, #8]
 800ab1e:	690b      	ldr	r3, [r1, #16]
 800ab20:	4607      	mov	r7, r0
 800ab22:	4293      	cmp	r3, r2
 800ab24:	bfb8      	it	lt
 800ab26:	4613      	movlt	r3, r2
 800ab28:	6033      	str	r3, [r6, #0]
 800ab2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab2e:	460c      	mov	r4, r1
 800ab30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab34:	b10a      	cbz	r2, 800ab3a <_printf_common+0x26>
 800ab36:	3301      	adds	r3, #1
 800ab38:	6033      	str	r3, [r6, #0]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	0699      	lsls	r1, r3, #26
 800ab3e:	bf42      	ittt	mi
 800ab40:	6833      	ldrmi	r3, [r6, #0]
 800ab42:	3302      	addmi	r3, #2
 800ab44:	6033      	strmi	r3, [r6, #0]
 800ab46:	6825      	ldr	r5, [r4, #0]
 800ab48:	f015 0506 	ands.w	r5, r5, #6
 800ab4c:	d106      	bne.n	800ab5c <_printf_common+0x48>
 800ab4e:	f104 0a19 	add.w	sl, r4, #25
 800ab52:	68e3      	ldr	r3, [r4, #12]
 800ab54:	6832      	ldr	r2, [r6, #0]
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	42ab      	cmp	r3, r5
 800ab5a:	dc28      	bgt.n	800abae <_printf_common+0x9a>
 800ab5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab60:	1e13      	subs	r3, r2, #0
 800ab62:	6822      	ldr	r2, [r4, #0]
 800ab64:	bf18      	it	ne
 800ab66:	2301      	movne	r3, #1
 800ab68:	0692      	lsls	r2, r2, #26
 800ab6a:	d42d      	bmi.n	800abc8 <_printf_common+0xb4>
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	4638      	mov	r0, r7
 800ab70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab74:	47c0      	blx	r8
 800ab76:	3001      	adds	r0, #1
 800ab78:	d020      	beq.n	800abbc <_printf_common+0xa8>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	68e5      	ldr	r5, [r4, #12]
 800ab7e:	f003 0306 	and.w	r3, r3, #6
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	bf18      	it	ne
 800ab86:	2500      	movne	r5, #0
 800ab88:	6832      	ldr	r2, [r6, #0]
 800ab8a:	f04f 0600 	mov.w	r6, #0
 800ab8e:	68a3      	ldr	r3, [r4, #8]
 800ab90:	bf08      	it	eq
 800ab92:	1aad      	subeq	r5, r5, r2
 800ab94:	6922      	ldr	r2, [r4, #16]
 800ab96:	bf08      	it	eq
 800ab98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	bfc4      	itt	gt
 800aba0:	1a9b      	subgt	r3, r3, r2
 800aba2:	18ed      	addgt	r5, r5, r3
 800aba4:	341a      	adds	r4, #26
 800aba6:	42b5      	cmp	r5, r6
 800aba8:	d11a      	bne.n	800abe0 <_printf_common+0xcc>
 800abaa:	2000      	movs	r0, #0
 800abac:	e008      	b.n	800abc0 <_printf_common+0xac>
 800abae:	2301      	movs	r3, #1
 800abb0:	4652      	mov	r2, sl
 800abb2:	4649      	mov	r1, r9
 800abb4:	4638      	mov	r0, r7
 800abb6:	47c0      	blx	r8
 800abb8:	3001      	adds	r0, #1
 800abba:	d103      	bne.n	800abc4 <_printf_common+0xb0>
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	3501      	adds	r5, #1
 800abc6:	e7c4      	b.n	800ab52 <_printf_common+0x3e>
 800abc8:	2030      	movs	r0, #48	; 0x30
 800abca:	18e1      	adds	r1, r4, r3
 800abcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abd6:	4422      	add	r2, r4
 800abd8:	3302      	adds	r3, #2
 800abda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abde:	e7c5      	b.n	800ab6c <_printf_common+0x58>
 800abe0:	2301      	movs	r3, #1
 800abe2:	4622      	mov	r2, r4
 800abe4:	4649      	mov	r1, r9
 800abe6:	4638      	mov	r0, r7
 800abe8:	47c0      	blx	r8
 800abea:	3001      	adds	r0, #1
 800abec:	d0e6      	beq.n	800abbc <_printf_common+0xa8>
 800abee:	3601      	adds	r6, #1
 800abf0:	e7d9      	b.n	800aba6 <_printf_common+0x92>
	...

0800abf4 <_printf_i>:
 800abf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abf8:	7e0f      	ldrb	r7, [r1, #24]
 800abfa:	4691      	mov	r9, r2
 800abfc:	2f78      	cmp	r7, #120	; 0x78
 800abfe:	4680      	mov	r8, r0
 800ac00:	460c      	mov	r4, r1
 800ac02:	469a      	mov	sl, r3
 800ac04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac0a:	d807      	bhi.n	800ac1c <_printf_i+0x28>
 800ac0c:	2f62      	cmp	r7, #98	; 0x62
 800ac0e:	d80a      	bhi.n	800ac26 <_printf_i+0x32>
 800ac10:	2f00      	cmp	r7, #0
 800ac12:	f000 80d9 	beq.w	800adc8 <_printf_i+0x1d4>
 800ac16:	2f58      	cmp	r7, #88	; 0x58
 800ac18:	f000 80a4 	beq.w	800ad64 <_printf_i+0x170>
 800ac1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac24:	e03a      	b.n	800ac9c <_printf_i+0xa8>
 800ac26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac2a:	2b15      	cmp	r3, #21
 800ac2c:	d8f6      	bhi.n	800ac1c <_printf_i+0x28>
 800ac2e:	a101      	add	r1, pc, #4	; (adr r1, 800ac34 <_printf_i+0x40>)
 800ac30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac34:	0800ac8d 	.word	0x0800ac8d
 800ac38:	0800aca1 	.word	0x0800aca1
 800ac3c:	0800ac1d 	.word	0x0800ac1d
 800ac40:	0800ac1d 	.word	0x0800ac1d
 800ac44:	0800ac1d 	.word	0x0800ac1d
 800ac48:	0800ac1d 	.word	0x0800ac1d
 800ac4c:	0800aca1 	.word	0x0800aca1
 800ac50:	0800ac1d 	.word	0x0800ac1d
 800ac54:	0800ac1d 	.word	0x0800ac1d
 800ac58:	0800ac1d 	.word	0x0800ac1d
 800ac5c:	0800ac1d 	.word	0x0800ac1d
 800ac60:	0800adaf 	.word	0x0800adaf
 800ac64:	0800acd1 	.word	0x0800acd1
 800ac68:	0800ad91 	.word	0x0800ad91
 800ac6c:	0800ac1d 	.word	0x0800ac1d
 800ac70:	0800ac1d 	.word	0x0800ac1d
 800ac74:	0800add1 	.word	0x0800add1
 800ac78:	0800ac1d 	.word	0x0800ac1d
 800ac7c:	0800acd1 	.word	0x0800acd1
 800ac80:	0800ac1d 	.word	0x0800ac1d
 800ac84:	0800ac1d 	.word	0x0800ac1d
 800ac88:	0800ad99 	.word	0x0800ad99
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	1d1a      	adds	r2, r3, #4
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	602a      	str	r2, [r5, #0]
 800ac94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e0a4      	b.n	800adea <_printf_i+0x1f6>
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	6829      	ldr	r1, [r5, #0]
 800aca4:	0606      	lsls	r6, r0, #24
 800aca6:	f101 0304 	add.w	r3, r1, #4
 800acaa:	d50a      	bpl.n	800acc2 <_printf_i+0xce>
 800acac:	680e      	ldr	r6, [r1, #0]
 800acae:	602b      	str	r3, [r5, #0]
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	da03      	bge.n	800acbc <_printf_i+0xc8>
 800acb4:	232d      	movs	r3, #45	; 0x2d
 800acb6:	4276      	negs	r6, r6
 800acb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acbc:	230a      	movs	r3, #10
 800acbe:	485e      	ldr	r0, [pc, #376]	; (800ae38 <_printf_i+0x244>)
 800acc0:	e019      	b.n	800acf6 <_printf_i+0x102>
 800acc2:	680e      	ldr	r6, [r1, #0]
 800acc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	bf18      	it	ne
 800accc:	b236      	sxthne	r6, r6
 800acce:	e7ef      	b.n	800acb0 <_printf_i+0xbc>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	6820      	ldr	r0, [r4, #0]
 800acd4:	1d19      	adds	r1, r3, #4
 800acd6:	6029      	str	r1, [r5, #0]
 800acd8:	0601      	lsls	r1, r0, #24
 800acda:	d501      	bpl.n	800ace0 <_printf_i+0xec>
 800acdc:	681e      	ldr	r6, [r3, #0]
 800acde:	e002      	b.n	800ace6 <_printf_i+0xf2>
 800ace0:	0646      	lsls	r6, r0, #25
 800ace2:	d5fb      	bpl.n	800acdc <_printf_i+0xe8>
 800ace4:	881e      	ldrh	r6, [r3, #0]
 800ace6:	2f6f      	cmp	r7, #111	; 0x6f
 800ace8:	bf0c      	ite	eq
 800acea:	2308      	moveq	r3, #8
 800acec:	230a      	movne	r3, #10
 800acee:	4852      	ldr	r0, [pc, #328]	; (800ae38 <_printf_i+0x244>)
 800acf0:	2100      	movs	r1, #0
 800acf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acf6:	6865      	ldr	r5, [r4, #4]
 800acf8:	2d00      	cmp	r5, #0
 800acfa:	bfa8      	it	ge
 800acfc:	6821      	ldrge	r1, [r4, #0]
 800acfe:	60a5      	str	r5, [r4, #8]
 800ad00:	bfa4      	itt	ge
 800ad02:	f021 0104 	bicge.w	r1, r1, #4
 800ad06:	6021      	strge	r1, [r4, #0]
 800ad08:	b90e      	cbnz	r6, 800ad0e <_printf_i+0x11a>
 800ad0a:	2d00      	cmp	r5, #0
 800ad0c:	d04d      	beq.n	800adaa <_printf_i+0x1b6>
 800ad0e:	4615      	mov	r5, r2
 800ad10:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad14:	fb03 6711 	mls	r7, r3, r1, r6
 800ad18:	5dc7      	ldrb	r7, [r0, r7]
 800ad1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad1e:	4637      	mov	r7, r6
 800ad20:	42bb      	cmp	r3, r7
 800ad22:	460e      	mov	r6, r1
 800ad24:	d9f4      	bls.n	800ad10 <_printf_i+0x11c>
 800ad26:	2b08      	cmp	r3, #8
 800ad28:	d10b      	bne.n	800ad42 <_printf_i+0x14e>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	07de      	lsls	r6, r3, #31
 800ad2e:	d508      	bpl.n	800ad42 <_printf_i+0x14e>
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	6861      	ldr	r1, [r4, #4]
 800ad34:	4299      	cmp	r1, r3
 800ad36:	bfde      	ittt	le
 800ad38:	2330      	movle	r3, #48	; 0x30
 800ad3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad42:	1b52      	subs	r2, r2, r5
 800ad44:	6122      	str	r2, [r4, #16]
 800ad46:	464b      	mov	r3, r9
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	f8cd a000 	str.w	sl, [sp]
 800ad50:	aa03      	add	r2, sp, #12
 800ad52:	f7ff fedf 	bl	800ab14 <_printf_common>
 800ad56:	3001      	adds	r0, #1
 800ad58:	d14c      	bne.n	800adf4 <_printf_i+0x200>
 800ad5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5e:	b004      	add	sp, #16
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	4834      	ldr	r0, [pc, #208]	; (800ae38 <_printf_i+0x244>)
 800ad66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad6a:	6829      	ldr	r1, [r5, #0]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad72:	6029      	str	r1, [r5, #0]
 800ad74:	061d      	lsls	r5, r3, #24
 800ad76:	d514      	bpl.n	800ada2 <_printf_i+0x1ae>
 800ad78:	07df      	lsls	r7, r3, #31
 800ad7a:	bf44      	itt	mi
 800ad7c:	f043 0320 	orrmi.w	r3, r3, #32
 800ad80:	6023      	strmi	r3, [r4, #0]
 800ad82:	b91e      	cbnz	r6, 800ad8c <_printf_i+0x198>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	f023 0320 	bic.w	r3, r3, #32
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	e7af      	b.n	800acf0 <_printf_i+0xfc>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	f043 0320 	orr.w	r3, r3, #32
 800ad96:	6023      	str	r3, [r4, #0]
 800ad98:	2378      	movs	r3, #120	; 0x78
 800ad9a:	4828      	ldr	r0, [pc, #160]	; (800ae3c <_printf_i+0x248>)
 800ad9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ada0:	e7e3      	b.n	800ad6a <_printf_i+0x176>
 800ada2:	0659      	lsls	r1, r3, #25
 800ada4:	bf48      	it	mi
 800ada6:	b2b6      	uxthmi	r6, r6
 800ada8:	e7e6      	b.n	800ad78 <_printf_i+0x184>
 800adaa:	4615      	mov	r5, r2
 800adac:	e7bb      	b.n	800ad26 <_printf_i+0x132>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	6826      	ldr	r6, [r4, #0]
 800adb2:	1d18      	adds	r0, r3, #4
 800adb4:	6961      	ldr	r1, [r4, #20]
 800adb6:	6028      	str	r0, [r5, #0]
 800adb8:	0635      	lsls	r5, r6, #24
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	d501      	bpl.n	800adc2 <_printf_i+0x1ce>
 800adbe:	6019      	str	r1, [r3, #0]
 800adc0:	e002      	b.n	800adc8 <_printf_i+0x1d4>
 800adc2:	0670      	lsls	r0, r6, #25
 800adc4:	d5fb      	bpl.n	800adbe <_printf_i+0x1ca>
 800adc6:	8019      	strh	r1, [r3, #0]
 800adc8:	2300      	movs	r3, #0
 800adca:	4615      	mov	r5, r2
 800adcc:	6123      	str	r3, [r4, #16]
 800adce:	e7ba      	b.n	800ad46 <_printf_i+0x152>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	2100      	movs	r1, #0
 800add4:	1d1a      	adds	r2, r3, #4
 800add6:	602a      	str	r2, [r5, #0]
 800add8:	681d      	ldr	r5, [r3, #0]
 800adda:	6862      	ldr	r2, [r4, #4]
 800addc:	4628      	mov	r0, r5
 800adde:	f000 f863 	bl	800aea8 <memchr>
 800ade2:	b108      	cbz	r0, 800ade8 <_printf_i+0x1f4>
 800ade4:	1b40      	subs	r0, r0, r5
 800ade6:	6060      	str	r0, [r4, #4]
 800ade8:	6863      	ldr	r3, [r4, #4]
 800adea:	6123      	str	r3, [r4, #16]
 800adec:	2300      	movs	r3, #0
 800adee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adf2:	e7a8      	b.n	800ad46 <_printf_i+0x152>
 800adf4:	462a      	mov	r2, r5
 800adf6:	4649      	mov	r1, r9
 800adf8:	4640      	mov	r0, r8
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	47d0      	blx	sl
 800adfe:	3001      	adds	r0, #1
 800ae00:	d0ab      	beq.n	800ad5a <_printf_i+0x166>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	079b      	lsls	r3, r3, #30
 800ae06:	d413      	bmi.n	800ae30 <_printf_i+0x23c>
 800ae08:	68e0      	ldr	r0, [r4, #12]
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	4298      	cmp	r0, r3
 800ae0e:	bfb8      	it	lt
 800ae10:	4618      	movlt	r0, r3
 800ae12:	e7a4      	b.n	800ad5e <_printf_i+0x16a>
 800ae14:	2301      	movs	r3, #1
 800ae16:	4632      	mov	r2, r6
 800ae18:	4649      	mov	r1, r9
 800ae1a:	4640      	mov	r0, r8
 800ae1c:	47d0      	blx	sl
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d09b      	beq.n	800ad5a <_printf_i+0x166>
 800ae22:	3501      	adds	r5, #1
 800ae24:	68e3      	ldr	r3, [r4, #12]
 800ae26:	9903      	ldr	r1, [sp, #12]
 800ae28:	1a5b      	subs	r3, r3, r1
 800ae2a:	42ab      	cmp	r3, r5
 800ae2c:	dcf2      	bgt.n	800ae14 <_printf_i+0x220>
 800ae2e:	e7eb      	b.n	800ae08 <_printf_i+0x214>
 800ae30:	2500      	movs	r5, #0
 800ae32:	f104 0619 	add.w	r6, r4, #25
 800ae36:	e7f5      	b.n	800ae24 <_printf_i+0x230>
 800ae38:	0800b909 	.word	0x0800b909
 800ae3c:	0800b91a 	.word	0x0800b91a

0800ae40 <_read_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4604      	mov	r4, r0
 800ae44:	4608      	mov	r0, r1
 800ae46:	4611      	mov	r1, r2
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4d05      	ldr	r5, [pc, #20]	; (800ae60 <_read_r+0x20>)
 800ae4c:	602a      	str	r2, [r5, #0]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	f7fb fc10 	bl	8006674 <_read>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d102      	bne.n	800ae5e <_read_r+0x1e>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	b103      	cbz	r3, 800ae5e <_read_r+0x1e>
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	200007b4 	.word	0x200007b4

0800ae64 <_fstat_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	2300      	movs	r3, #0
 800ae68:	4d06      	ldr	r5, [pc, #24]	; (800ae84 <_fstat_r+0x20>)
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	4608      	mov	r0, r1
 800ae6e:	4611      	mov	r1, r2
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	f7fb fc20 	bl	80066b6 <_fstat>
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	d102      	bne.n	800ae80 <_fstat_r+0x1c>
 800ae7a:	682b      	ldr	r3, [r5, #0]
 800ae7c:	b103      	cbz	r3, 800ae80 <_fstat_r+0x1c>
 800ae7e:	6023      	str	r3, [r4, #0]
 800ae80:	bd38      	pop	{r3, r4, r5, pc}
 800ae82:	bf00      	nop
 800ae84:	200007b4 	.word	0x200007b4

0800ae88 <_isatty_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	4d05      	ldr	r5, [pc, #20]	; (800aea4 <_isatty_r+0x1c>)
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	f7fb fc14 	bl	80066c0 <_isatty>
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	d102      	bne.n	800aea2 <_isatty_r+0x1a>
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	b103      	cbz	r3, 800aea2 <_isatty_r+0x1a>
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	200007b4 	.word	0x200007b4

0800aea8 <memchr>:
 800aea8:	4603      	mov	r3, r0
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	b2c9      	uxtb	r1, r1
 800aeae:	4402      	add	r2, r0
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	d101      	bne.n	800aeba <memchr+0x12>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	e003      	b.n	800aec2 <memchr+0x1a>
 800aeba:	7804      	ldrb	r4, [r0, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	428c      	cmp	r4, r1
 800aec0:	d1f6      	bne.n	800aeb0 <memchr+0x8>
 800aec2:	bd10      	pop	{r4, pc}

0800aec4 <_init>:
 800aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec6:	bf00      	nop
 800aec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeca:	bc08      	pop	{r3}
 800aecc:	469e      	mov	lr, r3
 800aece:	4770      	bx	lr

0800aed0 <_fini>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr
